/**
 * Multiplayer Logic - Socket.IO Event Handlers
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ real-time —Å–æ–±—ã—Ç–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
 */

const Room = require('./models/Room');
const Character = require('./models/Character');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
const activePlayers = new Map(); // socketId => { roomId, username, characterClass, position, animation, stats, userId }

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–∞–≥–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
const roomEnemies = new Map(); // roomId => Map(enemyId => { health, alive, position })

module.exports = (io) => {
  console.log('üéÆ Multiplayer module loaded');

  io.on('connection', (socket) => {
    console.log(`‚úÖ Player connected: ${socket.id}`);

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ö–û–ú–ù–ê–¢–ï
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('join_room', async (data) => {
      try {
        // –í–ê–ñ–ù–û: Unity –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
        let parsedData = data;
        if (typeof data === 'string') {
          try {
            parsedData = JSON.parse(data);
            console.log('[Join Room] ‚úÖ Parsed JSON string to object');
          } catch (e) {
            console.error('[Join Room] ‚ùå Failed to parse JSON:', e.message);
            return;
          }
        }

        const { roomId, username, characterClass, userId } = parsedData;

        console.log(`[Join Room] ${username} (${socket.id}) joining room ${roomId} as ${characterClass}`);

        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ Socket.IO room
        socket.join(roomId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º SPECIAL stats –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let playerStats = {
          strength: 5,
          perception: 5,
          endurance: 5,
          wisdom: 5,
          intelligence: 5,
          agility: 5,
          luck: 5
        };

        try {
          const character = await Character.findOne({ userId, isSelected: true });
          if (character && character.stats) {
            playerStats = character.stats;
            console.log(`[Join Room] Loaded stats for ${username}: STR=${playerStats.strength}, AGI=${playerStats.agility}, LUCK=${playerStats.luck}`);
          } else {
            console.log(`[Join Room] Character not found for ${username}, using default stats`);
          }
        } catch (error) {
          console.error(`[Join Room] Failed to load stats for ${username}:`, error.message);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        activePlayers.set(socket.id, {
          roomId,
          username,
          characterClass,
          userId,
          stats: playerStats,
          position: { x: 0, y: 0, z: 0 },
          rotation: { x: 0, y: 0, z: 0 },
          animation: 'Idle',
          health: 100,
          maxHealth: 100,
          connected: true,
          joinedAt: Date.now()
        });

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const playersInRoom = [];
        for (const [sid, player] of activePlayers.entries()) {
          if (player.roomId === roomId) {
            playersInRoom.push({
              socketId: sid,
              username: player.username,
              characterClass: player.characterClass,
              position: player.position,
              rotation: player.rotation,
              animation: player.animation,
              health: player.health,
              maxHealth: player.maxHealth
            });
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–º—É –∏–≥—Ä–æ–∫—É —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        socket.emit('room_players', {
          players: playersInRoom,
          yourSocketId: socket.id
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
        socket.to(roomId).emit('player_joined', {
          socketId: socket.id,
          username,
          characterClass,
          position: { x: 0, y: 0, z: 0 },
          rotation: { x: 0, y: 0, z: 0 }
        });

        console.log(`‚úÖ ${username} joined room ${roomId}. Total players: ${playersInRoom.length}`);
      } catch (error) {
        console.error('[Join Room] Error:', error);
        socket.emit('error', { message: 'Failed to join room' });
      }
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ó–ê–ü–†–û–° –°–ü–ò–°–ö–ê –ò–ì–†–û–ö–û–í (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('get_room_players', (data) => {
      try {
        // –í–ê–ñ–ù–û: Unity –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
        let parsedData = data;
        if (typeof data === 'string') {
          try {
            parsedData = JSON.parse(data);
          } catch (e) {
            console.error('[Get Room Players] ‚ùå Failed to parse JSON:', e.message);
            return;
          }
        }

        const { roomId } = parsedData;
        const player = activePlayers.get(socket.id);

        if (!player) {
          console.warn(`[Get Room Players] Player ${socket.id} not found in activePlayers`);
          return;
        }

        console.log(`[Get Room Players] ${player.username} requesting players for room ${roomId}`);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
        const playersInRoom = [];
        for (const [sid, p] of activePlayers.entries()) {
          if (p.roomId === roomId) {
            playersInRoom.push({
              socketId: sid,
              username: p.username,
              characterClass: p.characterClass,
              position: p.position,
              rotation: p.rotation,
              animation: p.animation,
              health: p.health,
              maxHealth: p.maxHealth
            });
          }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        socket.emit('room_players', {
          players: playersInRoom,
          yourSocketId: socket.id
        });

        console.log(`‚úÖ Sent ${playersInRoom.length} players to ${player.username}`);
      } catch (error) {
        console.error('[Get Room Players] Error:', error);
      }
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò –ò –î–í–ò–ñ–ï–ù–ò–Ø
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('player_update', (data) => {
      const player = activePlayers.get(socket.id);
      if (!player) {
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –µ—â—ë –Ω–µ –≤ activePlayers
        // console.warn(`[Player Update] Player ${socket.id} not found in activePlayers`);
        return;
      }

      // –í–ê–ñ–ù–û: Unity –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
      let parsedData = data;
      if (typeof data === 'string') {
        try {
          parsedData = JSON.parse(data);
        } catch (e) {
          console.error('[Player Update] ‚ùå Failed to parse JSON:', e.message);
          return;
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      if (parsedData.position) player.position = parsedData.position;
      if (parsedData.rotation) player.rotation = parsedData.rotation;
      if (parsedData.velocity) player.velocity = parsedData.velocity;
      if (parsedData.isGrounded !== undefined) player.isGrounded = parsedData.isGrounded;

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º parsedData.velocity –≤–º–µ—Å—Ç–æ data.velocity
      const movementUpdate = {
        socketId: socket.id,
        position: player.position,
        rotation: player.rotation,
        velocity: parsedData.velocity || { x: 0, y: 0, z: 0 },
        isGrounded: parsedData.isGrounded || false,
        timestamp: Date.now()
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      socket.to(player.roomId).emit('player_moved', movementUpdate);
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ê–ù–ò–ú–ê–¶–ò–ò
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('player_animation', (data) => {
      // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –í–°–Å —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
      console.log(`[Animation] üîç RAW EVENT RECEIVED! Type: ${typeof data}`);
      console.log(`[Animation] üîç RAW data:`, data);
      console.log(`[Animation] üîç RAW data (JSON):`, JSON.stringify(data));

      const player = activePlayers.get(socket.id);
      if (!player) {
        console.warn(`[Animation] Player ${socket.id} not found in activePlayers`);
        return;
      }

      // –í–ê–ñ–ù–û: Unity –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
      let parsedData = data;
      if (typeof data === 'string') {
        try {
          parsedData = JSON.parse(data);
          console.log('[Animation] ‚úÖ Parsed JSON string to object');
        } catch (e) {
          console.error('[Animation] ‚ùå Failed to parse JSON:', e.message);
          console.error('[Animation] ‚ùå Problematic data:', data);
          return;
        }
      }

      const { animation, speed } = parsedData;

      console.log(`[Animation] üé¨ ${player.username} (${socket.id}) animation: ${animation}, speed: ${speed || 1.0}`);

      player.animation = animation;
      player.animationSpeed = speed || 1.0;

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const animationUpdate = {
        socketId: socket.id,
        animation: animation,
        speed: speed || 1.0,
        timestamp: Date.now()
      };

      console.log(`[Animation] üì§ Broadcasting to room ${player.roomId}:`, animationUpdate);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      socket.to(player.roomId).emit('player_animation_changed', animationUpdate);

      console.log(`[Animation] ‚úÖ Animation broadcasted for ${player.username}`);
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ê–¢–ê–ö–ê (SERVER AUTHORITY)
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('player_attack', (data) => {
      const attacker = activePlayers.get(socket.id);
      if (!attacker) {
        console.warn(`[Attack] Attacker ${socket.id} not found in activePlayers`);
        return;
      }

      // –í–ê–ñ–ù–û: Unity –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
      let parsedData = data;
      console.log(`[Attack] üîç Raw data type: ${typeof data}`);
      console.log(`[Attack] üîç Raw data: ${JSON.stringify(data).substring(0, 200)}`);

      if (typeof data === 'string') {
        try {
          parsedData = JSON.parse(data);
          console.log('[Attack] ‚úÖ Parsed JSON string to object');
        } catch (e) {
          console.error('[Attack] ‚ùå Failed to parse JSON:', e.message);
          return;
        }
      }

      console.log(`[Attack] üîç Parsed data: ${JSON.stringify(parsedData).substring(0, 200)}`);

      const { targetType, targetId, attackType, position, direction } = parsedData;

      console.log(`[Attack] üó°Ô∏è ${attacker.username} attacking ${targetType} (ID: ${targetId}) with ${attackType}`);

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –®–ê–ì 1: –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ò–°–¢–ê–ù–¶–ò–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      let targetPosition = null;
      let targetObject = null;

      if (targetType === 'player') {
        targetObject = activePlayers.get(targetId);
        if (!targetObject) {
          console.warn(`[Attack] ‚ùå Target player ${targetId} not found`);
          return;
        }
        targetPosition = targetObject.position;
      } else if (targetType === 'enemy') {
        // –î–ª—è –≤—Ä–∞–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–∫–ª–∏–µ–Ω—Ç –∑–Ω–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤—Ä–∞–≥–∞)
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–∞–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        targetPosition = parsedData.targetPosition || { x: 0, y: 0, z: 0 };
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –º–µ–∂–¥—É –∞—Ç–∞–∫—É—é—â–∏–º –∏ —Ü–µ–ª—å—é
      const distance = Math.sqrt(
        Math.pow(attacker.position.x - targetPosition.x, 2) +
        Math.pow(attacker.position.y - targetPosition.y, 2) +
        Math.pow(attacker.position.z - targetPosition.z, 2)
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∞—Ç–∞–∫–∏
      const maxAttackRange = attackType === 'melee' ? 3.0 : 20.0; // 3–º –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ, 20–º –¥–ª—è –¥–∞–ª—å–Ω–µ–≥–æ
      if (distance > maxAttackRange) {
        console.warn(`[Attack] ‚ùå Target too far: ${distance.toFixed(2)}m > ${maxAttackRange}m`);
        socket.emit('attack_failed', {
          reason: 'target_too_far',
          distance: distance,
          maxRange: maxAttackRange
        });
        return;
      }

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –®–ê–ì 2: –†–ê–°–ß–Å–¢ –£–†–û–ù–ê –ù–ê –°–ï–†–í–ï–†–ï ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      let baseDamage = 5; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω (—É–º–µ–Ω—å—à–µ–Ω –¥–ª—è –±–∞–ª–∞–Ω—Å–∞)
      const stats = attacker.stats;

      // –£—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∞—Ç–∞–∫–∏ –∏ SPECIAL —Å—Ç–∞—Ç–æ–≤
      // –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê: –£–º–µ–Ω—å—à–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —á—Ç–æ–±—ã –≤—Ä–∞–≥–∏ –Ω–µ —É–º–∏—Ä–∞–ª–∏ —Å 1 —É–¥–∞—Ä–∞
      if (attackType === 'melee') {
        // –ë–ª–∏–∂–Ω—è—è –∞—Ç–∞–∫–∞: STR * 0.8 + AGI * 0.2
        baseDamage = (stats.strength * 0.8) + (stats.agility * 0.2) + 3;
      } else if (attackType === 'ranged') {
        // –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞: PER * 0.6 + AGI * 0.4
        baseDamage = (stats.perception * 0.6) + (stats.agility * 0.4) + 3;
      } else if (attackType === 'magic') {
        // –ú–∞–≥–∏—è: INT * 0.8 + WIS * 0.2
        baseDamage = (stats.intelligence * 0.8) + (stats.wisdom * 0.2) + 3;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–±–æ–Ω—É—Å—ã)
      const classMultipliers = {
        'Warrior': attackType === 'melee' ? 1.3 : 1.0,
        'Archer': attackType === 'ranged' ? 1.3 : 1.0,
        'Mage': attackType === 'magic' ? 1.3 : 1.0,
        'Rogue': attackType === 'melee' ? 1.15 : 1.1, // –†–æ–≥–∏ —Ö–æ—Ä–æ—à–∏ –∏ –≤ –±–ª–∏–∂–Ω–µ–º –∏ –≤ –¥–∞–ª—å–Ω–µ–º
        'Paladin': 1.1 // –ü–∞–ª–∞–¥–∏–Ω—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã
      };
      const classMultiplier = classMultipliers[attacker.characterClass] || 1.0;
      baseDamage *= classMultiplier;

      // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–±—Ä–æ—Å ¬±10%
      const randomFactor = 0.9 + Math.random() * 0.2;
      baseDamage *= randomFactor;

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –®–ê–ì 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–† ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      const critChance = Math.min(0.5, stats.luck * 0.02); // –ú–∞–∫—Å 50% –∫—Ä–∏—Ç –ø—Ä–∏ 25 LUCK
      const isCritical = Math.random() < critChance;
      let finalDamage = baseDamage;

      if (isCritical) {
        finalDamage *= 2.0; // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä x2
        console.log(`[Attack] üí• CRITICAL HIT! Damage: ${finalDamage.toFixed(1)}`);
      }

      finalDamage = Math.round(finalDamage);

      console.log(`[Attack] üéØ ${attacker.username} deals ${finalDamage} damage (base: ${baseDamage.toFixed(1)}, crit: ${isCritical})`);

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –®–ê–ì 4: –ü–†–ò–ú–ï–ù–Ø–ï–ú –£–†–û–ù –ö –¶–ï–õ–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      if (targetType === 'player' && targetObject) {
        // –£—Ä–æ–Ω –ø–æ –∏–≥—Ä–æ–∫—É
        targetObject.health = Math.max(0, targetObject.health - finalDamage);

        console.log(`[Attack] ${targetObject.username} HP: ${targetObject.health}/${targetObject.maxHealth}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        io.to(attacker.roomId).emit('player_health_changed', {
          socketId: targetId,
          damage: finalDamage,
          currentHealth: targetObject.health,
          maxHealth: targetObject.maxHealth,
          attackerId: socket.id,
          isCritical: isCritical,
          timestamp: Date.now()
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å
        if (targetObject.health <= 0) {
          targetObject.animation = 'Dead';
          io.to(attacker.roomId).emit('player_died', {
            socketId: targetId,
            killerId: socket.id,
            killerUsername: attacker.username,
            timestamp: Date.now()
          });
          console.log(`[Attack] üíÄ ${targetObject.username} was killed by ${attacker.username}`);
        }
      } else if (targetType === 'enemy') {
        // –£—Ä–æ–Ω –ø–æ NPC –≤—Ä–∞–≥—É - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        io.to(attacker.roomId).emit('enemy_damaged_by_server', {
          enemyId: targetId,
          damage: finalDamage,
          attackerId: socket.id,
          attackerUsername: attacker.username,
          isCritical: isCritical,
          timestamp: Date.now()
        });
      }

      // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –®–ê–ì 5: BROADCAST –ê–ù–ò–ú–ê–¶–ò–ò –ê–¢–ê–ö–ò ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏ (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
      io.to(attacker.roomId).emit('player_attacked', {
        socketId: socket.id,
        attackType: attackType,
        targetType: targetType,
        targetId: targetId,
        damage: finalDamage,
        isCritical: isCritical,
        position: position,
        direction: direction,
        timestamp: Date.now()
      });
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ü–û–õ–£–ß–ï–ù–ò–ï –£–†–û–ù–ê
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('player_damaged', (data) => {
      const player = activePlayers.get(socket.id);
      if (!player) return;

      player.health = Math.max(0, data.currentHealth);

      console.log(`[Damage] ${player.username} took ${data.damage} damage. Health: ${player.health}/${player.maxHealth}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      io.to(player.roomId).emit('player_health_changed', {
        socketId: socket.id,
        damage: data.damage,
        currentHealth: player.health,
        maxHealth: player.maxHealth,
        attackerId: data.attackerId,
        timestamp: Date.now()
      });

      // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–º–µ—Ä
      if (player.health <= 0) {
        player.animation = 'Dead';
        io.to(player.roomId).emit('player_died', {
          socketId: socket.id,
          killerId: data.attackerId,
          timestamp: Date.now()
        });
      }
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –†–ï–°–ü–ê–í–ù
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('player_respawn', (data) => {
      const player = activePlayers.get(socket.id);
      if (!player) return;

      player.health = player.maxHealth;
      player.position = data.position;
      player.animation = 'Idle';

      console.log(`[Respawn] ${player.username} respawned at (${data.position.x}, ${data.position.y}, ${data.position.z})`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
      io.to(player.roomId).emit('player_respawned', {
        socketId: socket.id,
        position: data.position,
        health: player.health,
        timestamp: Date.now()
      });
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –í–†–ê–ì–ò (NPC)
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('enemy_damaged', (data) => {
      const player = activePlayers.get(socket.id);
      if (!player) return;

      const { roomId, enemyId, damage, currentHealth } = data;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞–≥–∞
      if (!roomEnemies.has(roomId)) {
        roomEnemies.set(roomId, new Map());
      }
      const enemies = roomEnemies.get(roomId);
      enemies.set(enemyId, {
        health: currentHealth,
        alive: currentHealth > 0
      });

      console.log(`[Enemy Damage] ${enemyId} took ${damage} damage. Health: ${currentHealth}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
      io.to(roomId).emit('enemy_health_changed', {
        enemyId,
        damage,
        currentHealth,
        attackerId: socket.id,
        timestamp: Date.now()
      });
    });

    socket.on('enemy_killed', (data) => {
      const player = activePlayers.get(socket.id);
      if (!player) return;

      const { roomId, enemyId, position } = data;

      // –ü–æ–º–µ—á–∞–µ–º –≤—Ä–∞–≥–∞ –∫–∞–∫ –º—ë—Ä—Ç–≤–æ–≥–æ
      if (roomEnemies.has(roomId)) {
        const enemies = roomEnemies.get(roomId);
        enemies.set(enemyId, {
          health: 0,
          alive: false
        });
      }

      console.log(`[Enemy Killed] ${enemyId} killed by ${player.username}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      io.to(roomId).emit('enemy_died', {
        enemyId,
        killerId: socket.id,
        killerUsername: player.username,
        position,
        timestamp: Date.now()
      });
    });

    socket.on('enemy_respawned', (data) => {
      const player = activePlayers.get(socket.id);
      if (!player) return;

      const { roomId, enemyId, enemyType, position, health } = data;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞–≥–∞
      if (roomEnemies.has(roomId)) {
        const enemies = roomEnemies.get(roomId);
        enemies.set(enemyId, {
          health,
          alive: true,
          position
        });
      }

      console.log(`[Enemy Respawned] ${enemyId} (${enemyType}) at (${position.x}, ${position.y}, ${position.z})`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      io.to(roomId).emit('enemy_respawned', {
        enemyId,
        enemyType,
        position,
        health,
        timestamp: Date.now()
      });
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('disconnect', () => {
      const player = activePlayers.get(socket.id);

      if (player) {
        console.log(`‚ùå Player disconnected: ${player.username} (${socket.id})`);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        socket.to(player.roomId).emit('player_left', {
          socketId: socket.id,
          username: player.username
        });

        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        activePlayers.delete(socket.id);
      } else {
        console.log(`‚ùå Unknown player disconnected: ${socket.id}`);
      }
    });

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ü–ò–ù–ì (–î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–û–ï–î–ò–ù–ï–ù–ò–Ø)
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    socket.on('ping', () => {
      socket.emit('pong', { timestamp: Date.now() });
    });
  });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
  setInterval(() => {
    const now = Date.now();
    const timeout = 5 * 60 * 1000; // 5 minutes

    for (const [socketId, player] of activePlayers.entries()) {
      if (now - player.joinedAt > timeout && !player.connected) {
        console.log(`üßπ Cleaning up inactive player: ${player.username}`);
        activePlayers.delete(socketId);
      }
    }
  }, 5 * 60 * 1000);
};
