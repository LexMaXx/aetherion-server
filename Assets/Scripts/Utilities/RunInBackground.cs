using UnityEngine;

/// <summary>
/// –ü–æ–∑–≤–æ–ª—è–µ—Ç Unity —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
/// –í–ê–ñ–ù–û –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ - —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–≤—É—Ö –æ–∫–Ω–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
/// </summary>
public class RunInBackground : MonoBehaviour
{
    [Header("Background Settings")]
    [Tooltip("–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ –æ–∫–Ω–æ –Ω–µ –≤ —Ñ–æ–∫—É—Å–µ")]
    [SerializeField] private bool runInBackground = true;

    [Tooltip("–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å FPS –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")]
    [SerializeField] private int backgroundFrameRate = 30;

    [Tooltip("–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å FPS –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ (0 = VSync, -1 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")]
    [SerializeField] private int foregroundFrameRate = 60;

    private bool hasFocus = true;

    void Awake()
    {
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        Application.runInBackground = runInBackground;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π FPS –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (foregroundFrameRate == 0)
        {
            QualitySettings.vSyncCount = 1; // VSync –≤–∫–ª—é—á–µ–Ω
            Application.targetFrameRate = -1;
        }
        else
        {
            QualitySettings.vSyncCount = 0; // VSync –≤—ã–∫–ª—é—á–µ–Ω
            Application.targetFrameRate = foregroundFrameRate;
        }

        Debug.Log($"[RunInBackground] ‚úÖ –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º: {(runInBackground ? "–í–ö–õ–Æ–ß–Å–ù" : "–í–´–ö–õ–Æ–ß–ï–ù")}");
        Debug.Log($"[RunInBackground] FPS: –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ={foregroundFrameRate}, –§–æ–Ω–æ–≤–æ–µ={backgroundFrameRate}");
    }

    void OnApplicationFocus(bool focus)
    {
        hasFocus = focus;

        if (!runInBackground)
            return;

        if (focus)
        {
            // –û–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π FPS
            if (foregroundFrameRate == 0)
            {
                QualitySettings.vSyncCount = 1;
                Application.targetFrameRate = -1;
            }
            else
            {
                QualitySettings.vSyncCount = 0;
                Application.targetFrameRate = foregroundFrameRate;
            }

            Debug.Log($"[RunInBackground] üéØ –û–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ, FPS={foregroundFrameRate}");
        }
        else
        {
            // –û–∫–Ω–æ –ø–æ—Ç–µ—Ä—è–ª–æ —Ñ–æ–∫—É—Å - —Å–Ω–∏–∂–∞–µ–º FPS –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            if (backgroundFrameRate > 0)
            {
                QualitySettings.vSyncCount = 0;
                Application.targetFrameRate = backgroundFrameRate;
                Debug.Log($"[RunInBackground] üí§ –û–∫–Ω–æ –≤ —Ñ–æ–Ω–µ, FPS={backgroundFrameRate}");
            }
        }
    }

    void OnGUI()
    {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –∏–ª–∏ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ)
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        GUIStyle style = new GUIStyle(GUI.skin.label);
        style.fontSize = 12;
        style.normal.textColor = hasFocus ? Color.green : Color.yellow;

        string status = hasFocus ? "ACTIVE" : "BACKGROUND";
        string fpsInfo = $"FPS: {(int)(1f / Time.smoothDeltaTime)}";

        GUI.Label(new Rect(10, 10, 200, 40), $"{status}\n{fpsInfo}", style);
        #endif
    }
}
