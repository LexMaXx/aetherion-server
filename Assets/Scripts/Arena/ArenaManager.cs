using UnityEngine;
using UnityEngine.SceneManagement;
#if UNITY_EDITOR
using UnityEditor;
#endif

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä–µ–Ω—ã - —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∞–≤–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
/// –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PlayerController —Å –∞–≥–∏–ª–∏—Ç–∏-–±–æ–Ω—É—Å–æ–º –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
/// </summary>
public class ArenaManager : MonoBehaviour
{
    [Header("Spawn Settings")]
    [SerializeField] private Transform spawnPoint;
    [SerializeField] private Vector3 defaultSpawnPosition = new Vector3(0, 0, 0);

    [Header("Character Prefabs")]
    [SerializeField] private GameObject warriorPrefab;
    [SerializeField] private GameObject magePrefab;
    [SerializeField] private GameObject archerPrefab;
    [SerializeField] private GameObject roguePrefab;
    [SerializeField] private GameObject paladinPrefab;

    [Header("Camera")]
    [SerializeField] private Camera arenaCamera;

    [Header("Fog of War")]
    [Tooltip("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Fog of War –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")]
    [SerializeField] private FogOfWarSettings fogOfWarSettings;

    [Header("Multiplayer")]
    [SerializeField] private GameObject networkSyncManagerPrefab;
    [SerializeField] private Transform[] multiplayerSpawnPoints; // –°–ø–∞—É–Ω-–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (0-19)

    private GameObject spawnedCharacter;
    private bool isMultiplayer = false;
    private int assignedSpawnIndex = -1; // –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (-1 = –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω)
    private bool spawnIndexReceived = false; // –§–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è spawnIndex –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    private bool gameStarted = false; // LOBBY SYSTEM: –§–ª–∞–≥ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã

    void Start()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ä–µ–∂–∏–º
        string roomId = PlayerPrefs.GetString("CurrentRoomId", "");
        isMultiplayer = !string.IsNullOrEmpty(roomId);

        if (isMultiplayer)
        {
            Debug.Log("[ArenaManager] üåê MULTIPLAYER MODE");
            SetupMultiplayer();

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ù–ï —Å–ø–∞–≤–Ω–∏–º —Å—Ä–∞–∑—É –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ!
            // –ñ–¥–µ–º spawnIndex –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            Debug.Log("[ArenaManager] ‚è≥ –û–∂–∏–¥–∞–µ–º spawnIndex –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...");
        }
        else
        {
            Debug.Log("[ArenaManager] üéÆ SINGLEPLAYER MODE");
            // –û—á–∏—â–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã
            PlayerPrefs.DeleteKey("CurrentRoomId");
            PlayerPrefs.Save();

            // Singleplayer - —Å–ø–∞–≤–Ω–∏–º —Å—Ä–∞–∑—É
            SpawnSelectedCharacter();
        }

        // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è Action Points
        SetupActionPointsUI();

        // –°–æ–∑–¥–∞—ë–º UI –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–∂–º–∏ C –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã)
        SetupCharacterStatsUI();

        // –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π HUD —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        SetupStatsHUD();

        // –°–æ–∑–¥–∞—ë–º HP/MP –±–∞—Ä—ã —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
        SetupStatusBars();

        // –î–æ–±–∞–≤–ª—è–µ–º debug —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–Ω–∞–∂–º–∏ F9 –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã)
        if (GetComponent<DebugPlayerStructure>() == null)
        {
            gameObject.AddComponent<DebugPlayerStructure>();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–∞–≥–æ–≤
        if (GetComponent<EnemyAutoSetup>() == null)
        {
            EnemyAutoSetup enemyAutoSetup = gameObject.AddComponent<EnemyAutoSetup>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω EnemyAutoSetup (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤)");
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä
    /// </summary>
    private void SetupMultiplayer()
    {
        // Create NetworkSyncManager if not exists
        if (NetworkSyncManager.Instance == null)
        {
            if (networkSyncManagerPrefab != null)
            {
                Instantiate(networkSyncManagerPrefab);
                Debug.Log("[ArenaManager] ‚úÖ NetworkSyncManager —Å–æ–∑–¥–∞–Ω");
            }
            else
            {
                GameObject networkManager = new GameObject("NetworkSyncManager");
                networkManager.AddComponent<NetworkSyncManager>();
                Debug.Log("[ArenaManager] ‚úÖ NetworkSyncManager —Å–æ–∑–¥–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏");
            }
        }

        // Verify WebSocket connection
        if (SocketIOManager.Instance == null)
        {
            Debug.LogError("[ArenaManager] ‚ùå SocketIOManager –Ω–µ –Ω–∞–π–¥–µ–Ω! Multiplayer –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å");
        }
        else if (!SocketIOManager.Instance.IsConnected)
        {
            Debug.LogWarning("[ArenaManager] ‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. Connecting...");
            string token = PlayerPrefs.GetString("UserToken", "");
            SocketIOManager.Instance.Connect(token, (success) =>
            {
                if (success)
                {
                    Debug.Log("[ArenaManager] ‚úÖ WebSocket (SocketIOManager) –ø–æ–¥–∫–ª—é—á–µ–Ω");
                }
                else
                {
                    Debug.LogError("[ArenaManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket");
                }
            });
        }
        else
        {
            Debug.Log("[ArenaManager] ‚úÖ WebSocket (SocketIOManager) –ø–æ–¥–∫–ª—é—á–µ–Ω");
        }
    }

    /// <summary>
    /// –°–ø–∞–≤–Ω –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    /// </summary>
    private void SpawnSelectedCharacter()
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∏–∑ PlayerPrefs
        string selectedClass = PlayerPrefs.GetString("SelectedCharacterClass", "");

        if (string.IsNullOrEmpty(selectedClass))
        {
            Debug.LogError("–ù–µ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂! –í–æ–∑–≤—Ä–∞—Ç –∫ CharacterSelectionScene");
            SceneManager.LoadScene("CharacterSelectionScene");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∞–± –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        GameObject characterPrefab = GetCharacterPrefab(selectedClass);

        if (characterPrefab == null)
        {
            Debug.LogError($"–ü—Ä–µ—Ñ–∞–± –¥–ª—è –∫–ª–∞—Å—Å–∞ {selectedClass} –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞
        Vector3 spawnPosition;
        Quaternion spawnRotation;

        // MULTIPLAYER: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (isMultiplayer && assignedSpawnIndex >= 0 && multiplayerSpawnPoints != null && assignedSpawnIndex < multiplayerSpawnPoints.Length)
        {
            Transform spawnTransform = multiplayerSpawnPoints[assignedSpawnIndex];
            spawnPosition = spawnTransform.position;
            spawnRotation = spawnTransform.rotation;
            Debug.Log($"[ArenaManager] üéØ –ò—Å–ø–æ–ª—å–∑—É—é –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞ #{assignedSpawnIndex}: {spawnPosition}");
        }
        else
        {
            // Singleplayer –∏–ª–∏ fallback
            spawnPosition = spawnPoint != null ? spawnPoint.position : defaultSpawnPosition;
            spawnRotation = spawnPoint != null ? spawnPoint.rotation : Quaternion.identity;

            if (isMultiplayer)
            {
                Debug.LogWarning($"[ArenaManager] ‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —Å–ø–∞–≤–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω (assignedSpawnIndex={assignedSpawnIndex}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π spawn point");
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç)
        spawnedCharacter = new GameObject($"{selectedClass}Player");
        spawnedCharacter.transform.position = spawnPosition;
        spawnedCharacter.transform.rotation = spawnRotation;

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç
        GameObject characterModel = Instantiate(characterPrefab, spawnedCharacter.transform);
        characterModel.name = $"{selectedClass}Model"; // –í–∫–ª—é—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Layer –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
        int characterLayer = LayerMask.NameToLayer("Character");
        if (characterLayer == -1)
        {
            Debug.LogWarning("Layer 'Character' –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ–º Default");
            characterLayer = 0;
        }
        SetLayerRecursively(characterModel, characterLayer);
        Debug.Log($"‚úì Layer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {LayerMask.LayerToName(characterLayer)}");

        // –í–ê–ñ–ù–û: –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞ –∑–µ–º–ª–µ (Y = 0)
        // –¢–µ–ø–µ—Ä—å Root Motion Y –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∞–Ω–∏–º–∞—Ü–∏—è—Ö, –ø–æ—ç—Ç–æ–º—É —Å–º–µ—â–µ–Ω–∏–µ –ù–ï –Ω—É–∂–Ω–æ
        characterModel.transform.localPosition = Vector3.zero;
        characterModel.transform.localRotation = Quaternion.identity;

        Debug.Log($"‚úì –°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {selectedClass}");
        Debug.Log($"  –†–æ–¥–∏—Ç–µ–ª—å –ø–æ–∑–∏—Ü–∏—è: {spawnedCharacter.transform.position}");
        Debug.Log($"  –ú–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {characterModel.transform.localPosition}");
        Debug.Log($"  –ú–æ–¥–µ–ª—å –º–∏—Ä–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {characterModel.transform.position}");

        // –í–ê–ñ–ù–û: Animator –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ Model —Å –Ω–∞—à–∏–º–∏ Mixamo –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
        Animator modelAnimator = characterModel.GetComponent<Animator>();
        if (modelAnimator != null)
        {
            modelAnimator.applyRootMotion = false; // –û—Ç–∫–ª—é—á–∞–µ–º Root Motion
            Debug.Log($"‚úì Animator –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ Model (Root Motion: {modelAnimator.applyRootMotion})");
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        SetupCharacterComponents();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
        SetupCamera();
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
    /// </summary>
    private void SetupCharacterComponents()
    {
        if (spawnedCharacter == null)
            return;

        // –í–ê–ñ–ù–û: CharacterController –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ Model (–¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ)
        // –£–¥–∞–ª—è–µ–º CharacterController —Å —Ä–æ–¥–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        CharacterController parentCC = spawnedCharacter.GetComponent<CharacterController>();
        if (parentCC != null)
        {
            DestroyImmediate(parentCC);
            Debug.Log("‚úì –£–¥–∞–ª–µ–Ω CharacterController —Å —Ä–æ–¥–∏—Ç–µ–ª—è");
        }

        // –ù–∞—Ö–æ–¥–∏–º Model (–¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç)
        Transform modelTransform = spawnedCharacter.transform.GetChild(0);
        if (modelTransform == null)
        {
            Debug.LogError("‚ùå Model –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }
        Debug.Log($"‚úì –ù–∞–π–¥–µ–Ω Model: {modelTransform.name}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º/–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CharacterController –Ω–∞ Model
        CharacterController charController = modelTransform.GetComponent<CharacterController>();
        if (charController == null)
        {
            charController = modelTransform.gameObject.AddComponent<CharacterController>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω CharacterController –Ω–∞ Model");
        }

        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è CharacterController (best practices –¥–ª—è MMO/RPG)
        charController.height = 2.16f;
        charController.center = new Vector3(0, 0.05f, 0);
        charController.radius = 0.3f;

        // –í–ê–ñ–ù–û: Best practices –æ—Ç Unity –¥–ª—è CharacterController
        charController.skinWidth = 0.03f;         // ~10% –æ—Ç radius (0.3 * 0.1 = 0.03)
        charController.minMoveDistance = 0f;      // Unity —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç 0
        charController.slopeLimit = 45f;
        charController.stepOffset = 0.3f;

        Debug.Log($"‚úì CharacterController –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ Model: Center={charController.center}, Height={charController.height}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Animator –Ω–∞ Model
        Animator animator = modelTransform.GetComponent<Animator>();
        if (animator != null && animator.runtimeAnimatorController != null)
        {
            Debug.Log($"‚úì Animator –Ω–∞ Model: {animator.runtimeAnimatorController.name}");

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–µ–≤—É—é —Å—Ç–æ–π–∫—É
            animator.SetBool("InBattle", true);
        }
        else
        {
            Debug.LogWarning("‚ö† Animator –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ Model!");
        }

        // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º SPECIAL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –Ω–∏—Ö!)
        SetupStatsAndSystems(modelTransform);

        // –î–æ–±–∞–≤–ª—è–µ–º PlayerController —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≥–∏–ª–∏—Ç–∏-–±–æ–Ω—É—Å–∞ –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–û–ë–ù–û–í–õ–ï–ù–û)
        // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ü–û–°–õ–ï CharacterStats —á—Ç–æ–±—ã PlayerController –º–æ–≥ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ Start()
        // –õ–æ–≤–∫–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –±—É–¥–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –±–µ–≥–∞
        PlayerController playerController = modelTransform.GetComponent<PlayerController>();
        if (playerController == null)
        {
            playerController = modelTransform.gameObject.AddComponent<PlayerController>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω PlayerController (—Å –∞–≥–∏–ª–∏—Ç–∏-–±–æ–Ω—É—Å–æ–º –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏)");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ä—É–∂–∏—è
        SetupWeapons(modelTransform);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –∞—Ç–∞–∫–∏
        PlayerAttack playerAttack = modelTransform.GetComponent<PlayerAttack>();
        if (playerAttack == null)
        {
            playerAttack = modelTransform.gameObject.AddComponent<PlayerAttack>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω PlayerAttack");
        }

        // MULTIPLAYER: –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–æ—è
        if (isMultiplayer)
        {
            NetworkCombatSync combatSync = modelTransform.GetComponent<NetworkCombatSync>();
            if (combatSync == null)
            {
                combatSync = modelTransform.gameObject.AddComponent<NetworkCombatSync>();
                Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω NetworkCombatSync (–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä)");
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        TargetSystem targetSystem = modelTransform.GetComponent<TargetSystem>();
        if (targetSystem == null)
        {
            targetSystem = modelTransform.gameObject.AddComponent<TargetSystem>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω TargetSystem");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–∏ (—Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–¥ –≤—Ä–∞–≥–æ–º)
        TargetIndicator targetIndicator = modelTransform.GetComponent<TargetIndicator>();
        if (targetIndicator == null)
        {
            targetIndicator = modelTransform.gameObject.AddComponent<TargetIndicator>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω TargetIndicator");

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            SetupTargetIndicator(targetIndicator, targetSystem, modelTransform);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ—á–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
        ActionPointsSystem actionPointsSystem = modelTransform.GetComponent<ActionPointsSystem>();
        if (actionPointsSystem == null)
        {
            actionPointsSystem = modelTransform.gameObject.AddComponent<ActionPointsSystem>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω ActionPointsSystem");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—É–º–∞–Ω –≤–æ–π–Ω—ã (Fog of War)
        FogOfWar fogOfWar = modelTransform.GetComponent<FogOfWar>();
        if (fogOfWar == null)
        {
            fogOfWar = modelTransform.gameObject.AddComponent<FogOfWar>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω FogOfWar");
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FogOfWar –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã
        SetupFogOfWar(fogOfWar);

        // MULTIPLAYER: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ NetworkSyncManager
        if (isMultiplayer && NetworkSyncManager.Instance != null)
        {
            string selectedClass = PlayerPrefs.GetString("SelectedCharacterClass", "");
            NetworkSyncManager.Instance.SetLocalPlayer(modelTransform.gameObject, selectedClass);
            Debug.Log("[ArenaManager] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ NetworkSyncManager");

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ù–ï–ú–ï–î–õ–ï–ù–ù–û
            // –ß—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —É–≤–∏–¥–µ–ª–∏ –Ω–∞—Å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∞–≤–Ω–∞
            if (SocketIOManager.Instance != null && SocketIOManager.Instance.IsConnected)
            {
                Vector3 initialPosition = spawnedCharacter.transform.position;
                Quaternion initialRotation = spawnedCharacter.transform.rotation;
                SocketIOManager.Instance.UpdatePosition(initialPosition, initialRotation, Vector3.zero, true);
                Debug.Log($"[ArenaManager] ‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {initialPosition}");
            }
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SPECIAL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º—ã–µ —Å–∏—Å—Ç–µ–º—ã
    /// </summary>
    private void SetupStatsAndSystems(Transform modelTransform)
    {
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
        string selectedClass = PlayerPrefs.GetString("SelectedCharacterClass", "Warrior");

        // 1. CharacterStats (SPECIAL —Å–∏—Å—Ç–µ–º–∞)
        CharacterStats characterStats = modelTransform.GetComponent<CharacterStats>();
        if (characterStats == null)
        {
            characterStats = modelTransform.gameObject.AddComponent<CharacterStats>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω CharacterStats");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç –∫–ª–∞—Å—Å–∞
        ClassStatsPreset classPreset = Resources.Load<ClassStatsPreset>($"ClassStats/{selectedClass}Stats");
        if (classPreset != null)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞
            var presetField = typeof(CharacterStats).GetField("classPreset",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (presetField != null)
            {
                presetField.SetValue(characterStats, classPreset);
                Debug.Log($"‚úì –ü—Ä–∏–º–µ–Ω–µ–Ω –ø—Ä–µ—Å–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {selectedClass}");
            }
        }
        else
        {
            Debug.LogWarning($"[ArenaManager] –ü—Ä–µ—Å–µ—Ç {selectedClass}Stats –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/ClassStats/");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞
        StatsFormulas formulas = Resources.Load<StatsFormulas>("StatsFormulas");
        if (formulas != null)
        {
            var formulasField = typeof(CharacterStats).GetField("formulas",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (formulasField != null)
            {
                formulasField.SetValue(characterStats, formulas);
                Debug.Log("‚úì –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫");
            }
        }

        // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º RecalculateStats() –°–†–ê–ó–£
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ HealthSystem/ManaSystem –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å Start() —Ä–∞–Ω—å—à–µ CharacterStats
        if (classPreset != null && formulas != null)
        {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∞
            characterStats.strength = classPreset.strength;
            characterStats.perception = classPreset.perception;
            characterStats.endurance = classPreset.endurance;
            characterStats.wisdom = classPreset.wisdom;
            characterStats.intelligence = classPreset.intelligence;
            characterStats.agility = classPreset.agility;
            characterStats.luck = classPreset.luck;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            characterStats.RecalculateStats();
            Debug.Log("‚úì CharacterStats –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ù–ï–ú–ï–î–õ–ï–ù–ù–û (–¥–æ Start())");
        }

        // 2. LevelingSystem (–ø—Ä–æ–∫–∞—á–∫–∞)
        LevelingSystem levelingSystem = modelTransform.GetComponent<LevelingSystem>();
        if (levelingSystem == null)
        {
            levelingSystem = modelTransform.gameObject.AddComponent<LevelingSystem>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω LevelingSystem");
        }

        // 3. HealthSystem (HP)
        HealthSystem healthSystem = modelTransform.GetComponent<HealthSystem>();
        if (healthSystem == null)
        {
            healthSystem = modelTransform.gameObject.AddComponent<HealthSystem>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω HealthSystem");
        }

        // 4. ManaSystem (MP)
        ManaSystem manaSystem = modelTransform.GetComponent<ManaSystem>();
        if (manaSystem == null)
        {
            manaSystem = modelTransform.gameObject.AddComponent<ManaSystem>();
            Debug.Log("‚úì –î–æ–±–∞–≤–ª–µ–Ω ManaSystem");
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ä—É–∂–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    /// </summary>
    private void SetupWeapons(Transform modelTransform)
    {
        Debug.Log($"\n=== SetupWeapons –¥–ª—è {modelTransform.name} ===");

        ClassWeaponManager weaponManager = modelTransform.GetComponent<ClassWeaponManager>();
        if (weaponManager == null)
        {
            Debug.Log("–î–æ–±–∞–≤–ª—è–µ–º ClassWeaponManager...");
            weaponManager = modelTransform.gameObject.AddComponent<ClassWeaponManager>();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º WeaponDatabase
            WeaponDatabase db = WeaponDatabase.Instance;
            if (db == null)
            {
                Debug.LogError("‚ùå WeaponDatabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ Tools ‚Üí Create Weapon Database");
            }
            else
            {
                Debug.Log("‚úì WeaponDatabase –Ω–∞–π–¥–µ–Ω–∞");
            }

            // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Ä—É–∂–∏–µ
            weaponManager.AttachWeaponForClass();
            Debug.Log($"‚úì –û—Ä—É–∂–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {modelTransform.name}");
        }
        else
        {
            Debug.Log("‚úì ClassWeaponManager —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            // –ü–µ—Ä–µ–ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –æ—Ä—É–∂–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            weaponManager.AttachWeaponForClass();
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∫–ª–∞—Å—Å—É
    /// </summary>
    private GameObject GetCharacterPrefab(string characterClass)
    {
        switch (characterClass)
        {
            case "Warrior":
                return warriorPrefab;
            case "Mage":
                return magePrefab;
            case "Archer":
                return archerPrefab;
            case "Rogue":
                return roguePrefab;
            case "Paladin":
                return paladinPrefab;
            default:
                Debug.LogWarning($"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å: {characterClass}");
                return null;
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–º–µ—Ä—É –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
    /// </summary>
    private void SetupCamera()
    {
        if (spawnedCharacter == null || arenaCamera == null)
        {
            Debug.LogError("‚ö† SetupCamera: spawnedCharacter –∏–ª–∏ arenaCamera = null!");
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º Model (–¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç)
        Transform modelTransform = spawnedCharacter.transform.GetChild(0);
        if (modelTransform == null)
        {
            Debug.LogError("‚ùå Model –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã!");
            return;
        }
        Debug.Log($"‚úì –ö–∞–º–µ—Ä–∞ –Ω–∞—Ü–µ–ª–µ–Ω–∞ –Ω–∞: {modelTransform.name}");

        // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–∞–º–µ—Ä—ã
        CameraFollow[] oldFollows = arenaCamera.GetComponents<CameraFollow>();
        foreach (CameraFollow cf in oldFollows)
        {
            DestroyImmediate(cf);
            Debug.Log("‚úì –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π CameraFollow");
        }

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ TPSCameraController
        TPSCameraController[] oldTPS = arenaCamera.GetComponents<TPSCameraController>();
        foreach (TPSCameraController tps in oldTPS)
        {
            DestroyImmediate(tps);
            Debug.Log("‚úì –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π TPSCameraController");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π TPS Camera Controller
        TPSCameraController newTpsCamera = arenaCamera.gameObject.AddComponent<TPSCameraController>();

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target –Ω–∞ Model (–∞ –Ω–µ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è!)
        newTpsCamera.SetTarget(modelTransform);

        Debug.Log($"‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ TPS –∫–∞–º–µ—Ä–∞, target = {modelTransform.name}");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∑–∞—Å–ø–∞–≤–Ω–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    /// </summary>
    public GameObject GetSpawnedCharacter()
    {
        return spawnedCharacter;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö pivot —Ç–æ—á–µ–∫ Mixamo
    /// </summary>
    private float GetModelOffsetY(string characterClass)
    {
        // –°–º–µ—â–µ–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ Bounds center Y –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
        // Warrior: 0.87, Mage: 0.87, Archer: 0.83, Rogue: 0.92, Paladin: 0.80
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0.86 –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        switch (characterClass)
        {
            case "Warrior":
                return 1.01f; // 0.87 —Ü–µ–Ω—Ç—Ä ‚Üí 1.01 –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
            case "Mage":
                return 1.01f; // 0.87 —Ü–µ–Ω—Ç—Ä ‚Üí 1.01 –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
            case "Archer":
                return 1.05f; // 0.83 —Ü–µ–Ω—Ç—Ä ‚Üí 1.05 –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è (–º–æ–¥–µ–ª—å –Ω–∏–∂–µ, –ø–æ–¥–Ω–∏–º–∞–µ–º –±–æ–ª—å—à–µ)
            case "Rogue":
                return 0.96f; // 0.92 —Ü–µ–Ω—Ç—Ä ‚Üí 0.96 –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è (–º–æ–¥–µ–ª—å –≤—ã—à–µ, –ø–æ–¥–Ω–∏–º–∞–µ–º –º–µ–Ω—å—à–µ)
            case "Paladin":
                return 1.08f; // 0.80 —Ü–µ–Ω—Ç—Ä ‚Üí 1.08 –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π, –ø–æ–¥–Ω–∏–º–∞–µ–º –±–æ–ª—å—à–µ –≤—Å–µ—Ö)
            default:
                return 1.0f; // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Layer —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π
    /// </summary>
    private void SetLayerRecursively(GameObject obj, int layer)
    {
        obj.layer = layer;
        foreach (Transform child in obj.transform)
        {
            SetLayerRecursively(child.gameObject, layer);
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å UI –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    private void SetupActionPointsUI()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ —Å–æ–∑–¥–∞–Ω –ª–∏ UI
        ActionPointsUI existingUI = FindFirstObjectByType<ActionPointsUI>();
        if (existingUI != null)
        {
            Debug.Log("‚úì ActionPointsUI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Canvas
        UnityEngine.Canvas canvas = FindFirstObjectByType<UnityEngine.Canvas>();
        if (canvas == null)
        {
            GameObject canvasObj = new GameObject("Canvas");
            canvas = canvasObj.AddComponent<UnityEngine.Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasObj.AddComponent<UnityEngine.UI.CanvasScaler>();
            canvasObj.AddComponent<UnityEngine.UI.GraphicRaycaster>();
            Debug.Log("‚úì Canvas —Å–æ–∑–¥–∞–Ω");
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è Action Points –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
        GameObject apPanel = new GameObject("ActionPointsPanel");
        apPanel.transform.SetParent(canvas.transform, false);

        RectTransform apRect = apPanel.AddComponent<RectTransform>();
        apRect.anchorMin = new Vector2(0.5f, 0f); // –¶–µ–Ω—Ç—Ä –Ω–∏–∑–∞
        apRect.anchorMax = new Vector2(0.5f, 0f);
        apRect.pivot = new Vector2(0.5f, 0f);
        apRect.anchoredPosition = new Vector2(0, 50); // 50px –æ—Ç –Ω–∏–∑–∞
        apRect.sizeDelta = new Vector2(500, 50);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        UnityEngine.UI.Image bgImage = apPanel.AddComponent<UnityEngine.UI.Image>();
        bgImage.color = new Color(0, 0, 0, 0.3f); // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —à–∞—Ä–∏–∫–æ–≤
        GameObject container = new GameObject("PointsContainer");
        container.transform.SetParent(apPanel.transform, false);

        RectTransform containerRect = container.AddComponent<RectTransform>();
        containerRect.anchorMin = new Vector2(0.5f, 0.5f);
        containerRect.anchorMax = new Vector2(0.5f, 0.5f);
        containerRect.pivot = new Vector2(0.5f, 0.5f);
        containerRect.anchoredPosition = Vector2.zero;
        containerRect.sizeDelta = new Vector2(450, 40);

        // –î–æ–±–∞–≤–ª—è–µ–º Horizontal Layout Group –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
        UnityEngine.UI.HorizontalLayoutGroup layout = container.AddComponent<UnityEngine.UI.HorizontalLayoutGroup>();
        layout.spacing = 10f;
        layout.childAlignment = TextAnchor.MiddleCenter;
        layout.childControlWidth = false;
        layout.childControlHeight = false;
        layout.childForceExpandWidth = false;
        layout.childForceExpandHeight = false;

        // –î–æ–±–∞–≤–ª—è–µ–º ActionPointsUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        ActionPointsUI apUI = apPanel.AddComponent<ActionPointsUI>();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
        var pointsContainerField = typeof(ActionPointsUI).GetField("pointsContainer",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        if (pointsContainerField != null)
        {
            pointsContainerField.SetValue(apUI, container.transform);
        }

        Debug.Log("‚úì Action Points UI —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
    }

    /// <summary>
    /// –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /// </summary>
    public void ReturnToMainMenu()
    {
        SceneManager.LoadScene("GameScene");
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å UI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–Ω–∞–∂–º–∏ C)
    /// </summary>
    private void SetupCharacterStatsUI()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ —Å–æ–∑–¥–∞–Ω –ª–∏ UI
        CharacterStatsUI existingUI = FindFirstObjectByType<CharacterStatsUI>();
        if (existingUI != null)
        {
            Debug.Log("‚úì CharacterStatsUI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π GameObject –¥–ª—è UI
        GameObject uiObj = new GameObject("CharacterStatsUI");
        CharacterStatsUI statsUI = uiObj.AddComponent<CharacterStatsUI>();

        Debug.Log("‚úì CharacterStatsUI —Å–æ–∑–¥–∞–Ω (–ù–∞–∂–º–∏—Ç–µ C –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è)");
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π HUD —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    /// </summary>
    private void SetupStatsHUD()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ —Å–æ–∑–¥–∞–Ω –ª–∏ HUD
        SimpleStatsHUD existingHUD = FindFirstObjectByType<SimpleStatsHUD>();
        if (existingHUD != null)
        {
            Debug.Log("‚úì SimpleStatsHUD —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π GameObject –¥–ª—è HUD
        GameObject hudObj = new GameObject("SimpleStatsHUD");
        SimpleStatsHUD statsHUD = hudObj.AddComponent<SimpleStatsHUD>();

        Debug.Log("‚úì SimpleStatsHUD —Å–æ–∑–¥–∞–Ω (–ù–∞–∂–º–∏—Ç–µ H –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)");
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ü–µ–ª–∏ (—Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–¥ –≤—Ä–∞–≥–æ–º)
    /// </summary>
    private void SetupTargetIndicator(TargetIndicator indicator, TargetSystem targetSystem, Transform playerTransform)
    {
        if (indicator == null)
        {
            Debug.LogWarning("[ArenaManager] TargetIndicator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∞–± —Å—Ç—Ä–µ–ª–∫–∏ –∏–∑ Resources
        GameObject arrowPrefab = Resources.Load<GameObject>("Prefabs/UI/TargetArrow");

        if (arrowPrefab == null)
        {
            Debug.LogWarning("[ArenaManager] –ü—Ä–µ—Ñ–∞–± TargetArrow –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Resources/Prefabs/UI/TargetArrow");
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
        var targetSystemField = typeof(TargetIndicator).GetField("targetSystem",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        var playerTransformField = typeof(TargetIndicator).GetField("playerTransform",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        var worldMarkerPrefabField = typeof(TargetIndicator).GetField("worldMarkerPrefab",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

        if (targetSystemField != null)
            targetSystemField.SetValue(indicator, targetSystem);

        if (playerTransformField != null)
            playerTransformField.SetValue(indicator, playerTransform);

        if (worldMarkerPrefabField != null)
            worldMarkerPrefabField.SetValue(indicator, arrowPrefab);

        Debug.Log("‚úì TargetIndicator –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–µ—Ñ–∞–±–æ–º —Å—Ç—Ä–µ–ª–∫–∏");
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Fog of War —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    /// </summary>
    private void SetupFogOfWar(FogOfWar fogOfWar)
    {
        if (fogOfWar == null)
        {
            Debug.LogWarning("[ArenaManager] FogOfWar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        if (fogOfWarSettings != null)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è globalSettings
            var globalSettingsField = typeof(FogOfWar).GetField("globalSettings",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            if (globalSettingsField != null)
            {
                globalSettingsField.SetValue(fogOfWar, fogOfWarSettings);
                Debug.Log($"‚úì FogOfWar –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {fogOfWarSettings.name}");
            }
            else
            {
                Debug.LogWarning("[ArenaManager] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FogOfWar —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é");
            }
        }
        else
        {
            Debug.LogWarning("[ArenaManager] FogOfWarSettings –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ArenaManager. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.");
        }

        // –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º ignoreHeight –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—ã—Å–æ–∫–∏—Ö –≤—Ä–∞–≥–æ–≤
        var ignoreHeightField = typeof(FogOfWar).GetField("ignoreHeight",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

        if (ignoreHeightField != null)
        {
            ignoreHeightField.SetValue(fogOfWar, true);
            Debug.Log("‚úì FogOfWar: ignoreHeight = TRUE (–≤—Ä–∞–≥–∏ –≤–∏–¥–Ω—ã –Ω–∞ –ª—é–±–æ–π –≤—ã—Å–æ—Ç–µ)");
        }

        // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ maxHeightDifference –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        var maxHeightDifferenceField = typeof(FogOfWar).GetField("maxHeightDifference",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

        if (maxHeightDifferenceField != null)
        {
            maxHeightDifferenceField.SetValue(fogOfWar, 1000f);
            Debug.Log("‚úì FogOfWar: maxHeightDifference = 1000–º");
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HP/MP –±–∞—Ä–æ–≤ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º
    /// </summary>
    private void SetupStatusBars()
    {
        if (GetComponent<PlayerStatusBars>() == null)
        {
            gameObject.AddComponent<PlayerStatusBars>();
            Debug.Log("[ArenaManager] ‚úÖ PlayerStatusBars –¥–æ–±–∞–≤–ª–µ–Ω");
        }
    }

    /// <summary>
    /// –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä–µ–Ω—É
    /// </summary>
    public void RestartArena()
    {
        SceneManager.LoadScene(SceneManager.GetActiveScene().name);
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞)
    /// </summary>
    public void SetSpawnIndex(int spawnIndex)
    {
        assignedSpawnIndex = spawnIndex;
        spawnIndexReceived = true;
        Debug.Log($"[ArenaManager] üéØ –°–µ—Ä–≤–µ—Ä –Ω–∞–∑–Ω–∞—á–∏–ª —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞: #{spawnIndex}");

        // LOBBY SYSTEM: –ù–ï –°–ü–ê–í–ù–ò–ú –î–û game_start!
        // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º spawnIndex, —Å–ø–∞–≤–Ω –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø—Ä–∏ OnGameStarted()
        Debug.Log("[ArenaManager] ‚è≥ –ñ–¥–µ–º game_start –¥–ª—è —Å–ø–∞–≤–Ω–∞...");
    }

    // ===== LOBBY SYSTEM CALLBACKS =====

    private GameObject lobbyUI;
    private UnityEngine.UI.Text lobbyText;
    private UnityEngine.UI.Text countdownText;

    /// <summary>
    /// Callback: –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è 20-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    /// </summary>
    public void OnLobbyStarted(int waitTimeMs)
    {
        Debug.Log($"[ArenaManager] üèÅ LOBBY STARTED! –û–∂–∏–¥–∞–Ω–∏–µ {waitTimeMs}ms");

        // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è –ª–æ–±–±–∏
        CreateLobbyUI();

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        StartCoroutine(LobbyTimerCoroutine(waitTimeMs / 1000f));
    }

    /// <summary>
    /// Callback: Countdown (3, 2, 1...)
    /// </summary>
    public void OnCountdown(int countdown)
    {
        Debug.Log($"[ArenaManager] ‚è±Ô∏è COUNTDOWN: {countdown}");

        // –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ª–æ–±–±–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–π countdown
        if (lobbyText != null)
            lobbyText.gameObject.SetActive(false);

        if (countdownText != null)
        {
            countdownText.gameObject.SetActive(true);
            countdownText.text = countdown.ToString();
            countdownText.fontSize = 120;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å UI –¥–ª—è –ª–æ–±–±–∏
    /// </summary>
    private void CreateLobbyUI()
    {
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Canvas
        UnityEngine.Canvas canvas = FindFirstObjectByType<UnityEngine.Canvas>();
        if (canvas == null)
        {
            GameObject canvasObj = new GameObject("Canvas");
            canvas = canvasObj.AddComponent<UnityEngine.Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasObj.AddComponent<UnityEngine.UI.CanvasScaler>();
            canvasObj.AddComponent<UnityEngine.UI.GraphicRaycaster>();
        }

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ª–æ–±–±–∏
        lobbyUI = new GameObject("LobbyUI");
        lobbyUI.transform.SetParent(canvas.transform, false);

        // Lobby Timer Text (–ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–≤–µ—Ä—Ö—É)
        GameObject lobbyTimerObj = new GameObject("LobbyTimer");
        lobbyTimerObj.transform.SetParent(lobbyUI.transform, false);

        RectTransform lobbyRect = lobbyTimerObj.AddComponent<RectTransform>();
        lobbyRect.anchorMin = new Vector2(0.5f, 1f);
        lobbyRect.anchorMax = new Vector2(0.5f, 1f);
        lobbyRect.pivot = new Vector2(0.5f, 1f);
        lobbyRect.anchoredPosition = new Vector2(0, -50);
        lobbyRect.sizeDelta = new Vector2(600, 80);

        lobbyText = lobbyTimerObj.AddComponent<UnityEngine.UI.Text>();
        lobbyText.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
        lobbyText.fontSize = 32;
        lobbyText.alignment = TextAnchor.MiddleCenter;
        lobbyText.color = Color.white;
        lobbyText.text = "–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤...";

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        UnityEngine.UI.Shadow shadow = lobbyTimerObj.AddComponent<UnityEngine.UI.Shadow>();
        shadow.effectColor = Color.black;
        shadow.effectDistance = new Vector2(2, -2);

        // Countdown Text (–ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞)
        GameObject countdownObj = new GameObject("Countdown");
        countdownObj.transform.SetParent(lobbyUI.transform, false);

        RectTransform countdownRect = countdownObj.AddComponent<RectTransform>();
        countdownRect.anchorMin = new Vector2(0.5f, 0.5f);
        countdownRect.anchorMax = new Vector2(0.5f, 0.5f);
        countdownRect.pivot = new Vector2(0.5f, 0.5f);
        countdownRect.anchoredPosition = Vector2.zero;
        countdownRect.sizeDelta = new Vector2(400, 200);

        countdownText = countdownObj.AddComponent<UnityEngine.UI.Text>();
        countdownText.font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
        countdownText.fontSize = 120;
        countdownText.alignment = TextAnchor.MiddleCenter;
        countdownText.color = Color.yellow;
        countdownText.text = "3";
        countdownText.gameObject.SetActive(false);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
        UnityEngine.UI.Shadow countdownShadow = countdownObj.AddComponent<UnityEngine.UI.Shadow>();
        countdownShadow.effectColor = Color.black;
        countdownShadow.effectDistance = new Vector2(4, -4);

        Debug.Log("[ArenaManager] ‚úÖ Lobby UI —Å–æ–∑–¥–∞–Ω");
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –ª–æ–±–±–∏
    /// </summary>
    private System.Collections.IEnumerator LobbyTimerCoroutine(float totalSeconds)
    {
        float timeRemaining = totalSeconds;

        while (timeRemaining > 0)
        {
            if (lobbyText != null)
            {
                int seconds = Mathf.CeilToInt(timeRemaining);
                lobbyText.text = $"–û–∂–∏–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤... {seconds} —Å–µ–∫";
            }

            yield return new WaitForSeconds(0.1f);
            timeRemaining -= 0.1f;
        }
    }

    /// <summary>
    /// Callback: –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å - –°–ü–ê–í–ù–ò–ú –í–°–ï–• –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û!
    /// </summary>
    public void OnGameStarted()
    {
        Debug.Log($"[ArenaManager] üéÆ GAME START! –°–ø–∞–≤–Ω–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...");
        gameStarted = true;

        // –°–∫—Ä—ã–≤–∞–µ–º Lobby UI
        if (lobbyUI != null)
        {
            Destroy(lobbyUI);
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–ø–∞–≤–Ω–∏—Ç—å!
        if (isMultiplayer && spawnedCharacter == null && spawnIndexReceived)
        {
            Debug.Log("[ArenaManager] ‚úÖ –°–ø–∞–≤–Ω–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–∏ game_start");
            SpawnSelectedCharacter();
        }
        else if (!spawnIndexReceived)
        {
            Debug.LogError("[ArenaManager] ‚ùå game_start –ø–æ–ª—É—á–µ–Ω, –Ω–æ spawnIndex –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å singleton instance
    /// </summary>
    private static ArenaManager instance;
    public static ArenaManager Instance
    {
        get
        {
            if (instance == null)
            {
                instance = FindFirstObjectByType<ArenaManager>();
            }
            return instance;
        }
    }

    void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }
        else if (instance != this)
        {
            Destroy(gameObject);
        }
    }
}
