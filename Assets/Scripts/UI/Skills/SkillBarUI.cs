using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç Skill Bar –≤ Arena Scene (3 –∏–∫–æ–Ω–∫–∏ –≤–Ω–∏–∑—É —Å–ø—Ä–∞–≤–∞)
/// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö–æ—Ç–∫–µ–∏ (1, 2, 3)
/// </summary>
public class SkillBarUI : MonoBehaviour
{
    [Header("Settings")]
    [Tooltip("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤")]
    [SerializeField] private SkillDatabase skillDatabase;

    private SkillSlotBar[] skillSlots;
    private List<int> equippedSkillIds = new List<int>();

    void Awake()
    {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ—Ç—ã
        skillSlots = GetComponentsInChildren<SkillSlotBar>();

        if (skillSlots.Length != 3)
        {
            Debug.LogError($"[SkillBarUI] –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 3 —Å–ª–æ—Ç–∞! –ù–∞–π–¥–µ–Ω–æ: {skillSlots.Length}");
        }
        else
        {
            Debug.Log("[SkillBarUI] ‚úÖ –ù–∞–π–¥–µ–Ω–æ 3 —Å–ª–æ—Ç–∞ —Å–∫–∏–ª–ª–æ–≤");
        }
    }

    void Start()
    {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º SkillDatabase –∏–∑ Resources –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if (skillDatabase == null)
        {
            skillDatabase = Resources.Load<SkillDatabase>("SkillDatabase");

            if (skillDatabase == null)
            {
                Debug.LogError("[SkillBarUI] ‚ùå SkillDatabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
                return;
            }
            else
            {
                Debug.Log("[SkillBarUI] ‚úÖ SkillDatabase –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Resources");
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã
        LoadEquippedSkills();
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã –∏–∑ PlayerPrefs
    /// (—Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Character Selection Scene)
    /// </summary>
    private void LoadEquippedSkills()
    {
        // –ü–æ–ª—É—á–∞–µ–º ID —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤ –∏–∑ PlayerPrefs
        string equippedSkillsJson = PlayerPrefs.GetString("EquippedSkills", "");

        if (string.IsNullOrEmpty(equippedSkillsJson))
        {
            Debug.LogWarning("[SkillBarUI] ‚ö†Ô∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–∏–ª–ª—ã.");
            LoadTestSkills();
            return;
        }

        try
        {
            // –ü–∞—Ä—Å–∏–º JSON
            EquippedSkillsData data = JsonUtility.FromJson<EquippedSkillsData>(equippedSkillsJson);
            equippedSkillIds = data.skillIds;

            Debug.Log($"[SkillBarUI] –ó–∞–≥—Ä—É–∂–µ–Ω–æ {equippedSkillIds.Count} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤: [{string.Join(", ", equippedSkillIds)}]");

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∏–ª–ª—ã –≤ —Å–ª–æ—Ç—ã
            for (int i = 0; i < skillSlots.Length && i < equippedSkillIds.Count; i++)
            {
                SkillData skill = skillDatabase.GetSkillById(equippedSkillIds[i]);

                if (skill != null)
                {
                    skillSlots[i].SetSkill(skill);
                    Debug.Log($"[SkillBarUI] –°–ª–æ—Ç {i + 1}: {skill.skillName}");
                }
                else
                {
                    Debug.LogWarning($"[SkillBarUI] ‚ö†Ô∏è –°–∫–∏–ª–ª —Å ID {equippedSkillIds[i]} –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                }
            }
        }
        catch (System.Exception e)
        {
            Debug.LogError($"[SkillBarUI] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∫–∏–ª–ª–æ–≤: {e.Message}");
            LoadTestSkills();
        }
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–∏–ª–ª—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    /// </summary>
    private void LoadTestSkills()
    {
        // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        PlayerController player = FindObjectOfType<PlayerController>();
        CharacterClass playerClass = CharacterClass.Warrior; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

        if (player != null)
        {
            CharacterStats stats = player.GetComponent<CharacterStats>();
            if (stats != null)
            {
                playerClass = stats.characterClass;
            }
        }

        Debug.Log($"[SkillBarUI] üß™ –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–∏–ª–ª—ã –¥–ª—è {playerClass}...");

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∫–∏–ª–ª–∞ –∫–ª–∞—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
        List<SkillData> classSkills = skillDatabase.GetSkillsForClass(playerClass);

        if (classSkills == null || classSkills.Count == 0)
        {
            Debug.LogError($"[SkillBarUI] ‚ùå –ù–µ—Ç —Å–∫–∏–ª–ª–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ {playerClass}!");
            return;
        }

        for (int i = 0; i < skillSlots.Length && i < classSkills.Count; i++)
        {
            skillSlots[i].SetSkill(classSkills[i]);
            Debug.Log($"[SkillBarUI] ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Å–ª–æ—Ç {i + 1}: {classSkills[i].skillName} (ID: {classSkills[i].skillId})");
        }
    }

    void Update()
    {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ—Ç–∫–µ–µ–≤ (–∫–ª–∞–≤–∏—à–∏ 1, 2, 3)
        if (Input.GetKeyDown(KeyCode.Alpha1))
        {
            UseSkill(0);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha2))
        {
            UseSkill(1);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha3))
        {
            UseSkill(2);
        }
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å–ª–æ—Ç–∞ (0, 1, 2)
    /// </summary>
    public void UseSkill(int slotIndex)
    {
        if (slotIndex < 0 || slotIndex >= skillSlots.Length)
        {
            Debug.LogError($"[SkillBarUI] –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞: {slotIndex}");
            return;
        }

        SkillSlotBar slot = skillSlots[slotIndex];
        SkillData skill = slot.GetSkill();

        if (skill == null)
        {
            Debug.LogWarning($"[SkillBarUI] –°–ª–æ—Ç {slotIndex + 1} –ø—É—Å—Ç–æ–π!");
            return;
        }

        if (slot.IsOnCooldown())
        {
            Debug.LogWarning($"[SkillBarUI] –°–∫–∏–ª–ª '{skill.skillName}' –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ! –û—Å—Ç–∞–ª–æ—Å—å: {slot.GetCooldownRemaining():F1}—Å");
            return;
        }

        Debug.Log($"[SkillBarUI] ‚ö° –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª: '{skill.skillName}' (–£—Ä–æ–Ω: {skill.baseDamageOrHeal}, –ú–∞–Ω–∞: {skill.manaCost})");

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–ª–ª (SkillManager —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç –º–∞–Ω—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∫—É–ª–¥–∞—É–Ω)
        bool success = ApplySkill(skill);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫–∏–ª–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω
        if (success)
        {
            slot.StartCooldown(skill.cooldown);
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å–∫–∏–ª–ª–∞
    /// –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SkillManager –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–∫–∏–ª–ª–æ–≤
    /// </summary>
    private bool ApplySkill(SkillData skill)
    {
        PlayerController player = FindObjectOfType<PlayerController>();
        if (player == null)
        {
            Debug.LogWarning("[SkillBarUI] PlayerController –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return false;
        }

        // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º SkillManager –µ—Å–ª–∏ –µ—Å—Ç—å
        SkillManager skillManager = player.GetComponent<SkillManager>();
        if (skillManager != null)
        {
            Debug.Log("[SkillBarUI] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SkillManager –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–ª–ª–∞");

            // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            Transform target = null;
            if (skill.requiresTarget)
            {
                TargetSystem targetSystem = player.GetComponent<TargetSystem>();
                if (targetSystem != null)
                {
                    Enemy currentTarget = targetSystem.GetCurrentTarget();
                    if (currentTarget != null)
                    {
                        target = currentTarget.transform;
                    }
                }
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∏–ª–ª —á–µ—Ä–µ–∑ SkillManager
            bool success = skillManager.UseSkill(skill, target);
            if (success)
            {
                Debug.Log($"[SkillBarUI] ‚úÖ –°–∫–∏–ª–ª '{skill.skillName}' –ø—Ä–∏–º–µ–Ω—ë–Ω —á–µ—Ä–µ–∑ SkillManager");
            }
            else
            {
                Debug.LogWarning($"[SkillBarUI] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–ª–ª '{skill.skillName}' —á–µ—Ä–µ–∑ SkillManager");
            }
            return success;
        }

        // FALLBACK: –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (–µ—Å–ª–∏ –Ω–µ—Ç SkillManager)
        Debug.LogWarning("[SkillBarUI] SkillManager –Ω–µ –Ω–∞–π–¥–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Ç–æ–ª—å–∫–æ —É—Ä–æ–Ω)");

        // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
        TargetSystem targetSystem2 = player.GetComponent<TargetSystem>();
        if (targetSystem2 == null)
        {
            Debug.LogWarning("[SkillBarUI] TargetSystem –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return false;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
        Enemy currentTarget2 = targetSystem2.GetCurrentTarget();

        if (currentTarget2 == null)
        {
            Debug.LogWarning($"[SkillBarUI] –ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è —Å–∫–∏–ª–ª–∞ '{skill.skillName}'!");
            return false;
        }

        GameObject target2 = currentTarget2.gameObject;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
        float distance = Vector3.Distance(player.transform.position, target2.transform.position);
        if (distance > skill.castRange)
        {
            Debug.LogWarning($"[SkillBarUI] –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance:F1}–º, –ú–∞–∫—Å: {skill.castRange}–º");
            return false;
        }

        Debug.Log($"[SkillBarUI] –ü—Ä–∏–º–µ–Ω—è—é —Å–∫–∏–ª–ª '{skill.skillName}' –∫ —Ü–µ–ª–∏ '{target2.name}' (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance:F1}–º)");

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É—Ä–æ–Ω–∞
        CharacterStats playerStats = player.GetComponent<CharacterStats>();
        float damage = skill.CalculateDamage(playerStats);

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ü–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Enemy –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. currentTarget —É–∂–µ —Ç–∏–ø–∞ Enemy)
        currentTarget2.TakeDamage(damage);
        Debug.Log($"[SkillBarUI] ‚úÖ –ù–∞–Ω–µ—Å—ë–Ω —É—Ä–æ–Ω: {damage:F0}");

        // –°–ø–∞–≤–Ω–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (skill.visualEffectPrefab != null)
        {
            Vector3 spawnPosition = target2.transform.position;
            GameObject effectInstance = Instantiate(skill.visualEffectPrefab, spawnPosition, Quaternion.identity);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            Destroy(effectInstance, 5f);

            Debug.Log($"[SkillBarUI] ‚úÖ –°–æ–∑–¥–∞–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç '{skill.skillName}'");
        }

        // –°–ø–∞–≤–Ω–∏–º —Å–Ω–∞—Ä—è–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (skill.projectilePrefab != null)
        {
            Vector3 spawnPosition = player.transform.position + player.transform.forward * 1f + Vector3.up * 1.5f;
            GameObject projectile = Instantiate(skill.projectilePrefab, spawnPosition, Quaternion.identity);

            // TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–≤–∏–∂–µ–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞ –∫ —Ü–µ–ª–∏
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø—Ä–∞–≤–∏–º –µ–≥–æ –Ω–∞ —Ü–µ–ª—å
            Vector3 direction = (target2.transform.position - spawnPosition).normalized;
            projectile.transform.forward = direction;

            Debug.Log($"[SkillBarUI] ‚úÖ –°–æ–∑–¥–∞–Ω —Å–Ω–∞—Ä—è–¥ '{skill.skillName}'");
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–∞—Å—Ç–∞
        if (skill.castSound != null)
        {
            AudioSource.PlayClipAtPoint(skill.castSound, player.transform.position);
            Debug.Log($"[SkillBarUI] ‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –∑–≤—É–∫ –∫–∞—Å—Ç–∞");
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–¥–∞—Ä–∞ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–Ω–∞—Ä—è–¥)
        if (skill.impactSound != null)
        {
            float delay = skill.projectilePrefab != null ? 0.5f : 0f;
            StartCoroutine(PlayImpactSoundDelayed(skill.impactSound, target2.transform.position, delay));
        }

        return true; // Fallback —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª–∞ —Å–∫–∏–ª–ª
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫ —É–¥–∞—Ä–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    /// </summary>
    private System.Collections.IEnumerator PlayImpactSoundDelayed(AudioClip sound, Vector3 position, float delay)
    {
        yield return new WaitForSeconds(delay);
        AudioSource.PlayClipAtPoint(sound, position);
        Debug.Log("[SkillBarUI] ‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –∑–≤—É–∫ —É–¥–∞—Ä–∞");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
    /// </summary>
    public SkillSlotBar GetSlot(int index)
    {
        if (index >= 0 && index < skillSlots.Length)
        {
            return skillSlots[index];
        }
        return null;
    }
}

/// <summary>
/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤ –≤ JSON
/// </summary>
[System.Serializable]
public class EquippedSkillsData
{
    public List<int> skillIds;
}
