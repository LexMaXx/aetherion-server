using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π HUD —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–≤—Å–µ–≥–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ)
/// </summary>
public class SimpleStatsHUD : MonoBehaviour
{
    [Header("Settings")]
    [SerializeField] private bool showHUD = true;
    [SerializeField] private int fontSize = 16;

    private Text hudText;
    private CharacterStats characterStats;
    private LevelingSystem levelingSystem;
    private HealthSystem healthSystem;
    private ManaSystem manaSystem;
    private ActionPointsSystem actionPointsSystem;

    void Start()
    {
        CreateHUD();
        // –ù–µ –∏—â–µ–º —Å—Ä–∞–∑—É - –ø–µ—Ä—Å–æ–Ω–∞–∂ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏!
    }

    void Update()
    {
        // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏ —Å–∏—Å—Ç–µ–º—ã - –∏—â–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä (–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞—ë—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
        if (characterStats == null)
        {
            FindPlayerSystems();
        }

        if (showHUD && hudText != null && characterStats != null)
        {
            UpdateHUD();
        }
        else if (showHUD && hudText != null && characterStats == null)
        {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            hudText.text = "Loading character...";
        }

        // Toggle HUD —Å –∫–ª–∞–≤–∏—à–µ–π H
        if (Input.GetKeyDown(KeyCode.H))
        {
            showHUD = !showHUD;
            if (hudText != null)
            {
                hudText.gameObject.SetActive(showHUD);
            }
        }
    }

    private void FindPlayerSystems()
    {
        // –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —Ç–µ–≥—É
        GameObject player = GameObject.FindGameObjectWithTag("Player");
        if (player == null)
        {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            CharacterStats[] allStats = FindObjectsByType<CharacterStats>(FindObjectsSortMode.None);
            if (allStats.Length > 0)
            {
                player = allStats[0].gameObject;
                Debug.Log("[SimpleStatsHUD] ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ CharacterStats");
            }
            else
            {
                return; // –ü–µ—Ä—Å–æ–Ω–∞–∂ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω
            }
        }

        characterStats = player.GetComponentInChildren<CharacterStats>();
        levelingSystem = player.GetComponentInChildren<LevelingSystem>();
        healthSystem = player.GetComponentInChildren<HealthSystem>();
        manaSystem = player.GetComponentInChildren<ManaSystem>();
        actionPointsSystem = player.GetComponentInChildren<ActionPointsSystem>();

        if (characterStats != null)
        {
            Debug.Log($"[SimpleStatsHUD] ‚úÖ –°–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–π–¥–µ–Ω—ã! S:{characterStats.strength} P:{characterStats.perception} E:{characterStats.endurance}");
        }
    }

    private void UpdateHUD()
    {
        string text = "";

        // –£—Ä–æ–≤–µ–Ω—å
        if (levelingSystem != null)
        {
            text += $"<b>LVL {levelingSystem.CurrentLevel}</b>  ";
            text += $"EXP: {levelingSystem.CurrentExperience}/{levelingSystem.GetExperienceForNextLevel()}";
            if (levelingSystem.AvailableStatPoints > 0)
            {
                text += $"  <color=yellow>‚òÖ {levelingSystem.AvailableStatPoints} points</color>";
            }
            text += "\n";
        }

        // HP
        if (healthSystem != null)
        {
            float hpPercent = healthSystem.HealthPercent * 100f;
            string hpColor = hpPercent > 50 ? "green" : (hpPercent > 25 ? "yellow" : "red");
            text += $"<color={hpColor}>HP:</color> {healthSystem.CurrentHealth:F0}/{healthSystem.MaxHealth:F0}  ";
        }

        // MP
        if (manaSystem != null)
        {
            text += $"<color=cyan>MP:</color> {manaSystem.CurrentMana:F0}/{manaSystem.MaxMana:F0}  ";
        }

        // AP (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º current/max)
        if (actionPointsSystem != null)
        {
            int currentAP = actionPointsSystem.GetCurrentPoints();
            int maxAP = actionPointsSystem.GetMaxPoints();
            text += $"<color=yellow>AP:</color> {currentAP}/{maxAP}";
        }

        text += "\n";

        // SPECIAL –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        text += $"<size={fontSize - 2}>";
        text += $"S:{characterStats.strength} ";
        text += $"P:{characterStats.perception} ";
        text += $"E:{characterStats.endurance} ";
        text += $"W:{characterStats.wisdom} ";
        text += $"I:{characterStats.intelligence} ";
        text += $"A:{characterStats.agility} ";
        text += $"L:{characterStats.luck}";
        text += "</size>\n";

        // –î–æ–ø. –∏–Ω—Ñ–æ
        text += $"<size={fontSize - 3}>";
        text += $"Vision: {characterStats.VisionRadius:F0}m  ";
        text += $"Crit: {characterStats.CritChance:F1}%";
        text += "</size>";

        text += "\n<size=10><i>Press C for details, H to toggle HUD</i></size>";

        hudText.text = text;
    }

    private void CreateHUD()
    {
        Debug.Log("[SimpleStatsHUD] üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ HUD...");

        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º Canvas
        Canvas canvas = FindFirstObjectByType<Canvas>();
        if (canvas == null)
        {
            Debug.Log("[SimpleStatsHUD] Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...");
            GameObject canvasObj = new GameObject("StatsHUD_Canvas");
            canvas = canvasObj.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvas.sortingOrder = 100; // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ!

            CanvasScaler scaler = canvasObj.AddComponent<UnityEngine.UI.CanvasScaler>();
            scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            scaler.referenceResolution = new Vector2(1920, 1080);

            canvasObj.AddComponent<UnityEngine.UI.GraphicRaycaster>();
            Debug.Log("[SimpleStatsHUD] ‚úÖ Canvas —Å–æ–∑–¥–∞–Ω —Å sortingOrder = 100");
        }
        else
        {
            Debug.Log($"[SimpleStatsHUD] Canvas –Ω–∞–π–¥–µ–Ω: {canvas.name}, sortingOrder = {canvas.sortingOrder}");
            canvas.sortingOrder = Mathf.Max(canvas.sortingOrder, 100); // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ
        }

        // –°–æ–∑–¥–∞—ë–º HUD —Ç–µ–∫—Å—Ç
        GameObject hudObj = new GameObject("StatsHUD");
        hudObj.transform.SetParent(canvas.transform, false);
        Debug.Log("[SimpleStatsHUD] HUD –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ Canvas");

        RectTransform hudRect = hudObj.AddComponent<RectTransform>();
        hudRect.anchorMin = new Vector2(0, 1); // –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        hudRect.anchorMax = new Vector2(0, 1);
        hudRect.pivot = new Vector2(0, 1);
        hudRect.anchoredPosition = new Vector2(10, -10); // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è
        hudRect.sizeDelta = new Vector2(600, 120);
        Debug.Log($"[SimpleStatsHUD] RectTransform –Ω–∞—Å—Ç—Ä–æ–µ–Ω: position={hudRect.anchoredPosition}, size={hudRect.sizeDelta}");

        hudText = hudObj.AddComponent<Text>();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º LegacyRuntime.ttf –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ Arial.ttf
        Font font = Resources.GetBuiltinResource<Font>("LegacyRuntime.ttf");
        if (font == null)
        {
            Debug.LogWarning("[SimpleStatsHUD] LegacyRuntime.ttf –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Resources...");
            font = Resources.Load<Font>("Arial");
        }
        if (font != null)
        {
            hudText.font = font;
            Debug.Log($"[SimpleStatsHUD] –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {font.name}");
        }
        else
        {
            Debug.LogError("[SimpleStatsHUD] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç! –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è.");
        }

        hudText.fontSize = 18; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        hudText.color = Color.yellow; // –Ø–†–ö–ò–ô –ñ–Å–õ–¢–´–ô –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏!
        hudText.alignment = TextAnchor.UpperLeft;
        hudText.supportRichText = true;
        hudText.text = "=== STATS HUD ===\nLoading character...\nPress H to toggle";
        Debug.Log($"[SimpleStatsHUD] Text –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: fontSize={hudText.fontSize}, color={hudText.color}, text='{hudText.text}'");

        // –î–æ–±–∞–≤–ª—è–µ–º Outline –≤–º–µ—Å—Ç–æ Shadow –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        Outline outline = hudObj.AddComponent<Outline>();
        outline.effectColor = Color.black;
        outline.effectDistance = new Vector2(2, -2);
        Debug.Log("[SimpleStatsHUD] Outline –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏");

        Debug.Log("[SimpleStatsHUD] ‚úÖ HUD —Å–æ–∑–¥–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é! –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω –Ø–†–ö–û-–ñ–Å–õ–¢–´–ú –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É");
    }
}
