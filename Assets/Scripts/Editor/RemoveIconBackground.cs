using UnityEngine;
using UnityEditor;
using System.IO;

/// <summary>
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ—Ç —á–µ—Ä–Ω—ã–π –∏–ª–∏ –±–µ–ª—ã–π —Ñ–æ–Ω —Å –∏–∫–æ–Ω–æ–∫ —Å–∫–∏–ª–ª–æ–≤
/// –†–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ –≤ –ø–∞–ø–∫–µ Assets/UI/Icons
/// </summary>
public class RemoveIconBackground : Editor
{
    /// <summary>
    /// –£–±—Ä–∞—Ç—å —á–µ—Ä–Ω—ã–π –ò –±–µ–ª—ã–π —Ñ–æ–Ω —Å –∏–∫–æ–Ω–æ–∫ (–º–µ–Ω—è–µ—Ç —Å–∞–º–∏ PNG —Ñ–∞–π–ª—ã)
    /// </summary>
    [MenuItem("Tools/Aetherion/Remove Icon Backgrounds (Black & White)")]
    public static void RemoveBackgrounds()
    {
        if (!EditorUtility.DisplayDialog(
            "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏–∫–æ–Ω–æ–∫",
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑–º–µ–Ω–∏—Ç PNG —Ñ–∞–π–ª—ã, —É–¥–∞–ª–∏–≤ —á–µ—Ä–Ω—ã–π –∏ –±–µ–ª—ã–π —Ñ–æ–Ω.\n\n" +
            "–ò–∫–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å:\n" +
            "- –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω (RGB –±–ª–∏–∑–∫–æ –∫ 0,0,0)\n" +
            "- –ò–õ–ò –ë–µ–ª—ã–π —Ñ–æ–Ω (RGB –±–ª–∏–∑–∫–æ –∫ 255,255,255)\n\n" +
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å backup!\n\n" +
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            "–î–∞, —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω",
            "–û—Ç–º–µ–Ω–∞"))
        {
            return;
        }

        Debug.Log("[RemoveIconBackground] üé® –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∫–æ–Ω–æ–∫...");

        string[] iconGuids = AssetDatabase.FindAssets("t:Texture2D", new[] { "Assets/UI/Icons" });
        int processedCount = 0;
        int skippedCount = 0;

        foreach (string guid in iconGuids)
        {
            string path = AssetDatabase.GUIDToAssetPath(guid);

            if (!path.EndsWith(".png") && !path.EndsWith(".jpg") && !path.EndsWith(".jpeg"))
            {
                continue;
            }

            try
            {
                // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Import Settings
                TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;
                if (importer != null)
                {
                    importer.isReadable = true; // –ù—É–∂–Ω–æ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π
                    importer.textureType = TextureImporterType.Sprite;
                    importer.alphaIsTransparency = true;
                    AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
                Texture2D texture = AssetDatabase.LoadAssetAtPath<Texture2D>(path);
                if (texture == null)
                {
                    Debug.LogWarning($"[RemoveIconBackground] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {Path.GetFileName(path)}");
                    skippedCount++;
                    continue;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ–Ω –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å
                if (!NeedsBackgroundRemoval(texture))
                {
                    Debug.Log($"[RemoveIconBackground] ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ (—Ñ–æ–Ω —É–∂–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π): {Path.GetFileName(path)}");
                    skippedCount++;
                    continue;
                }

                // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
                Texture2D newTexture = RemoveBackground(texture);

                if (newTexture != null)
                {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ PNG
                    byte[] pngData = newTexture.EncodeToPNG();
                    string fullPath = Path.Combine(Application.dataPath, path.Replace("Assets/", ""));
                    File.WriteAllBytes(fullPath, pngData);

                    Debug.Log($"[RemoveIconBackground] ‚úÖ {Path.GetFileName(path)}");
                    processedCount++;
                }
                else
                {
                    Debug.LogWarning($"[RemoveIconBackground] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {Path.GetFileName(path)}");
                    skippedCount++;
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"[RemoveIconBackground] ‚ùå –û—à–∏–±–∫–∞: {Path.GetFileName(path)} - {e.Message}");
                skippedCount++;
            }
        }

        AssetDatabase.Refresh();

        Debug.Log($"[RemoveIconBackground] ‚úÖ –ì–û–¢–û–í–û!");
        Debug.Log($"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processedCount}");
        Debug.Log($"  - –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skippedCount}");
        Debug.Log($"  - –§–æ–Ω (—á–µ—Ä–Ω—ã–π/–±–µ–ª—ã–π) —É–¥–∞–ª—ë–Ω, –∏–∫–æ–Ω–∫–∏ –≥–æ—Ç–æ–≤—ã!");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ —É–±–∏—Ä–∞—Ç—å —Ñ–æ–Ω —É —ç—Ç–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
    /// </summary>
    private static bool NeedsBackgroundRemoval(Texture2D texture)
    {
        Color[] pixels = texture.GetPixels();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –æ–±—ã—á–Ω–æ —Ç–∞–º —Ñ–æ–Ω
        int width = texture.width;
        int height = texture.height;

        Color[] corners = new Color[]
        {
            pixels[0], // –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
            pixels[width - 1], // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π
            pixels[(height - 1) * width], // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
            pixels[height * width - 1] // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π
        };

        // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–≥–æ–ª —á–µ—Ä–Ω—ã–π –∏–ª–∏ –±–µ–ª—ã–π - –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
        foreach (Color corner in corners)
        {
            if (IsBlack(corner) || IsWhite(corner))
            {
                return true;
            }
        }

        return false;
    }

    /// <summary>
    /// –£–±—Ä–∞—Ç—å —á–µ—Ä–Ω—ã–π –∏ –±–µ–ª—ã–π —Ñ–æ–Ω
    /// </summary>
    private static Texture2D RemoveBackground(Texture2D source)
    {
        Texture2D result = new Texture2D(source.width, source.height, TextureFormat.RGBA32, false);
        Color[] pixels = source.GetPixels();

        float blackThreshold = 0.15f; // –ü–æ—Ä–æ–≥ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ (0-1)
        float whiteThreshold = 0.85f; // –ü–æ—Ä–æ–≥ –¥–ª—è –±–µ–ª–æ–≥–æ (0-1)

        for (int i = 0; i < pixels.Length; i++)
        {
            Color pixel = pixels[i];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º: —á–µ—Ä–Ω—ã–π –∏–ª–∏ –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å?
            if (IsBlack(pixel, blackThreshold))
            {
                // –ß–µ—Ä–Ω—ã–π -> –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                pixels[i] = new Color(0, 0, 0, 0);
            }
            else if (IsWhite(pixel, whiteThreshold))
            {
                // –ë–µ–ª—ã–π -> –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
                pixels[i] = new Color(1, 1, 1, 0);
            }
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (—Ü–≤–µ—Ç–Ω—ã–µ) - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }

        result.SetPixels(pixels);
        result.Apply();

        return result;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞: —á–µ—Ä–Ω—ã–π –ª–∏ –ø–∏–∫—Å–µ–ª—å
    /// </summary>
    private static bool IsBlack(Color color, float threshold = 0.15f)
    {
        return color.r < threshold && color.g < threshold && color.b < threshold;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞: –±–µ–ª—ã–π –ª–∏ –ø–∏–∫—Å–µ–ª—å
    /// </summary>
    private static bool IsWhite(Color color, float threshold = 0.85f)
    {
        return color.r > threshold && color.g > threshold && color.b > threshold;
    }

    /// <summary>
    /// –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤)
    /// </summary>
    [MenuItem("Tools/Aetherion/Fix Icon Import Settings Only")]
    public static void FixImportSettings()
    {
        Debug.Log("[RemoveIconBackground] üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Import Settings...");

        string[] iconGuids = AssetDatabase.FindAssets("t:Texture2D", new[] { "Assets/UI/Icons" });
        int count = 0;

        foreach (string guid in iconGuids)
        {
            string path = AssetDatabase.GUIDToAssetPath(guid);

            TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;
            if (importer == null) continue;

            bool changed = false;

            if (importer.textureType != TextureImporterType.Sprite)
            {
                importer.textureType = TextureImporterType.Sprite;
                changed = true;
            }

            if (importer.spriteImportMode != SpriteImportMode.Single)
            {
                importer.spriteImportMode = SpriteImportMode.Single;
                changed = true;
            }

            if (!importer.alphaIsTransparency)
            {
                importer.alphaIsTransparency = true;
                changed = true;
            }

            if (importer.filterMode != FilterMode.Bilinear)
            {
                importer.filterMode = FilterMode.Bilinear;
                changed = true;
            }

            if (changed)
            {
                AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
                count++;
            }
        }

        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();

        Debug.Log($"[RemoveIconBackground] ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {count} –∏–∫–æ–Ω–æ–∫");
    }
}
