using UnityEngine;
using UnityEditor;

/// <summary>
/// –°–æ–∑–¥–∞—ë—Ç –ø—Ä–µ—Ñ–∞–± —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ü–µ–ª–∏
/// </summary>
public class CreateTargetArrow : Editor
{
    [MenuItem("Tools/Target System/Create Target Arrow Prefab (Sprite)")]
    public static void CreateArrowPrefabWithSprite()
    {
        Debug.Log("[CreateTargetArrow] –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Ñ–∞–±–∞ —Å—Ç—Ä–µ–ª–∫–∏ —Å Sprite Renderer...");

        // –°–æ–∑–¥–∞—ë–º –≥–ª–∞–≤–Ω—ã–π GameObject
        GameObject arrowObj = new GameObject("TargetArrow");

        // –°–æ–∑–¥–∞—ë–º –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–ø—Ä–∞–π—Ç–∞
        GameObject spriteObj = new GameObject("ArrowSprite");
        spriteObj.transform.SetParent(arrowObj.transform);
        spriteObj.transform.localPosition = Vector3.zero;

        // –î–æ–±–∞–≤–ª—è–µ–º SpriteRenderer
        SpriteRenderer spriteRenderer = spriteObj.AddComponent<SpriteRenderer>();

        // –í–ê–ñ–ù–û: –ò—â–µ–º PNG —Å—Ç—Ä–µ–ª–∫—É –≤ –ø—Ä–æ–µ–∫—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        string[] guids = AssetDatabase.FindAssets("t:Texture2D arrow", new[] { "Assets" });
        if (guids.Length == 0)
        {
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ChatGPT_Image
            guids = AssetDatabase.FindAssets("t:Texture2D ChatGPT", new[] { "Assets" });
        }

        Sprite arrowSprite = null;
        if (guids.Length > 0)
        {
            string path = AssetDatabase.GUIDToAssetPath(guids[0]);
            Texture2D texture = AssetDatabase.LoadAssetAtPath<Texture2D>(path);

            if (texture != null)
            {
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –∫–∞–∫ Sprite –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
                TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;
                if (importer != null && importer.textureType != TextureImporterType.Sprite)
                {
                    importer.textureType = TextureImporterType.Sprite;
                    importer.spriteImportMode = SpriteImportMode.Single;
                    importer.SaveAndReimport();
                }

                arrowSprite = AssetDatabase.LoadAssetAtPath<Sprite>(path);
                Debug.Log($"[CreateTargetArrow] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–µ–ª–∫–∞: {path}");
            }
        }

        if (arrowSprite != null)
        {
            spriteRenderer.sprite = arrowSprite;
            Debug.Log($"[CreateTargetArrow] ‚úÖ –°–ø—Ä–∞–π—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {arrowSprite.name}");
        }
        else
        {
            Debug.LogWarning("[CreateTargetArrow] ‚ö†Ô∏è PNG —Å—Ç—Ä–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
            Debug.LogWarning("[CreateTargetArrow] üí° –í—Ä—É—á–Ω—É—é –Ω–∞–∑–Ω–∞—á—å—Ç–µ Sprite –≤ –ø—Ä–µ—Ñ–∞–±–µ:");
            Debug.LogWarning("[CreateTargetArrow]    TargetArrow ‚Üí ArrowSprite ‚Üí Sprite Renderer ‚Üí Sprite");
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SpriteRenderer
        spriteRenderer.color = new Color(1f, 0.2f, 0.2f, 1f); // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç
        spriteRenderer.sortingOrder = 1000; // –ü–æ–≤–µ—Ä—Ö –≤—Å–µ–≥–æ

        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø—Ä–∞–π—Ç –≤–Ω–∏–∑ (—Å—Ç—Ä–µ–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤—Ä–∞–≥–∞)
        spriteObj.transform.localRotation = Quaternion.Euler(90, 0, 0);
        spriteObj.transform.localScale = Vector3.one * 0.5f; // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–∫–∏

        // –î–æ–±–∞–≤–ª—è–µ–º Billboard —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç (–≤—Ä–∞—â–∞–µ—Ç –∫ –∫–∞–º–µ—Ä–µ)
        Billboard billboard = arrowObj.AddComponent<Billboard>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
        TargetArrowAnimation anim = arrowObj.AddComponent<TargetArrowAnimation>();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–µ—Ñ–∞–±
        string prefabPath = "Assets/Prefabs/UI/TargetArrow.prefab";
        System.IO.Directory.CreateDirectory("Assets/Prefabs/UI");

        PrefabUtility.SaveAsPrefabAsset(arrowObj, prefabPath);

        Debug.Log($"[CreateTargetArrow] ‚úÖ –ü—Ä–µ—Ñ–∞–± —Å–æ–∑–¥–∞–Ω: {prefabPath}");
        Debug.Log($"[CreateTargetArrow] üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞:");
        Debug.Log($"[CreateTargetArrow]   TargetArrow (Billboard + Animation)");
        Debug.Log($"[CreateTargetArrow]     ‚îî‚îÄ ArrowSprite (SpriteRenderer)");

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã
        DestroyImmediate(arrowObj);

        AssetDatabase.Refresh();

        // –í—ã–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∞–± –≤ Project
        Object prefab = AssetDatabase.LoadAssetAtPath<Object>(prefabPath);
        Selection.activeObject = prefab;
        EditorGUIUtility.PingObject(prefab);
    }
}
