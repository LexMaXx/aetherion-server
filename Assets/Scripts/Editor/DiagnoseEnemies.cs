using UnityEngine;
using UnityEditor;
using System.Linq;

/// <summary>
/// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Ä–∞–≥–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á–µ–º—É –Ω–µ –≤—Å–µ –≤—Ä–∞–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
/// </summary>
public class DiagnoseEnemies : MonoBehaviour
{
    [MenuItem("Tools/Enemy Setup/Diagnose All Enemies")]
    public static void DiagnoseAllEnemies()
    {
        Debug.Log("=== üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–†–ê–ì–û–í ===\n");

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Enemy
        Enemy[] allEnemies = FindObjectsOfType<Enemy>();

        if (allEnemies.Length == 0)
        {
            Debug.LogError("[Diagnose] ‚ùå –í —Å—Ü–µ–Ω–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Enemy!");
            return;
        }

        Debug.Log($"[Diagnose] –ù–∞–π–¥–µ–Ω–æ Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {allEnemies.Length}\n");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º FogOfWar
        FogOfWar fogOfWar = FindObjectOfType<FogOfWar>();
        if (fogOfWar == null)
        {
            Debug.LogWarning("[Diagnose] ‚ö†Ô∏è FogOfWar –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!");
        }
        else
        {
            Debug.Log("[Diagnose] ‚úÖ FogOfWar –Ω–∞–π–¥–µ–Ω");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TargetSystem
        TargetSystem targetSystem = FindObjectOfType<TargetSystem>();
        if (targetSystem == null)
        {
            Debug.LogWarning("[Diagnose] ‚ö†Ô∏è TargetSystem –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ü–µ–Ω–µ!");
        }
        else
        {
            Debug.Log("[Diagnose] ‚úÖ TargetSystem –Ω–∞–π–¥–µ–Ω");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TargetIndicator
        TargetIndicator targetIndicator = FindObjectOfType<TargetIndicator>();
        if (targetIndicator == null)
        {
            Debug.LogWarning("[Diagnose] ‚ö†Ô∏è TargetIndicator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }
        else
        {
            Debug.Log("[Diagnose] ‚úÖ TargetIndicator –Ω–∞–π–¥–µ–Ω");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –ø—Ä–µ—Ñ–∞–± —Å—Ç—Ä–µ–ª–∫–∏
            var worldMarkerPrefabField = typeof(TargetIndicator).GetField("worldMarkerPrefab",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (worldMarkerPrefabField != null)
            {
                GameObject prefab = worldMarkerPrefabField.GetValue(targetIndicator) as GameObject;
                if (prefab == null)
                {
                    Debug.LogWarning("[Diagnose] ‚ö†Ô∏è –£ TargetIndicator –Ω–µ—Ç –ø—Ä–µ—Ñ–∞–±–∞ —Å—Ç—Ä–µ–ª–∫–∏ (worldMarkerPrefab)!");
                }
                else
                {
                    Debug.Log($"[Diagnose] ‚úÖ –ü—Ä–µ—Ñ–∞–± —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω: {prefab.name}");
                }
            }
        }

        Debug.Log("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞ ---\n");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
        for (int i = 0; i < allEnemies.Length; i++)
        {
            Enemy enemy = allEnemies[i];
            Debug.Log($"\n[–í—Ä–∞–≥ #{i + 1}] {enemy.gameObject.name}:");

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–≥–∞
            if (enemy.gameObject.CompareTag("Enemy"))
            {
                Debug.Log("  ‚úÖ –¢–µ–≥: Enemy");
            }
            else
            {
                Debug.LogError($"  ‚ùå –¢–µ–≥: {enemy.gameObject.tag} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Enemy')");
            }

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞
            Collider collider = enemy.GetComponent<Collider>();
            if (collider != null)
            {
                Debug.Log($"  ‚úÖ –ö–æ–ª–ª–∞–π–¥–µ—Ä: {collider.GetType().Name} (enabled: {collider.enabled})");
            }
            else
            {
                Debug.LogError("  ‚ùå –ö–æ–ª–ª–∞–π–¥–µ—Ä: –ù–ï–¢ (–Ω—É–∂–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞ –º—ã—à—å—é!)");
            }

            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Renderer
            Renderer[] renderers = enemy.GetComponentsInChildren<Renderer>();
            if (renderers.Length > 0)
            {
                int enabledCount = renderers.Count(r => r.enabled);
                Debug.Log($"  ‚úÖ Renderer'—ã: {renderers.Length} (–≤–∫–ª—é—á–µ–Ω–æ: {enabledCount})");
            }
            else
            {
                Debug.LogWarning("  ‚ö†Ô∏è Renderer'—ã: –ù–ï–¢ (–≤—Ä–∞–≥ –±—É–¥–µ—Ç –Ω–µ–≤–∏–¥–∏–º)");
            }

            // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è
            Debug.Log($"  ‚Ä¢ –ò–º—è: {enemy.GetEnemyName()}");
            Debug.Log($"  ‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: {enemy.GetCurrentHealth()}/{enemy.GetMaxHealth()}");
            Debug.Log($"  ‚Ä¢ –ñ–∏–≤: {(enemy.IsAlive() ? "–î–∞" : "–ù–µ—Ç")}");

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
            Debug.Log($"  ‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: {enemy.transform.position}");

            // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
            if (enemy.transform.parent != null)
            {
                Debug.Log($"  ‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å: {enemy.transform.parent.name}");
            }
            else
            {
                Debug.Log("  ‚Ä¢ –†–æ–¥–∏—Ç–µ–ª—å: –Ω–µ—Ç (root)");
            }

            // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ FogOfWar
            if (fogOfWar != null)
            {
                var allEnemiesField = typeof(FogOfWar).GetField("allEnemies",
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                if (allEnemiesField != null)
                {
                    var enemyList = allEnemiesField.GetValue(fogOfWar) as System.Collections.Generic.List<Enemy>;
                    if (enemyList != null && enemyList.Contains(enemy))
                    {
                        Debug.Log("  ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ FogOfWar");
                    }
                    else
                    {
                        Debug.LogError("  ‚ùå –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ FogOfWar! (–í—Ä–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã?)");
                    }
                }
            }
        }

        Debug.Log("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
    }

    [MenuItem("Tools/Enemy Setup/Fix All Enemy Issues")]
    public static void FixAllEnemyIssues()
    {
        Debug.Log("=== üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –í–†–ê–ì–û–í ===\n");

        Enemy[] allEnemies = FindObjectsOfType<Enemy>();

        if (allEnemies.Length == 0)
        {
            Debug.LogError("[Fix] ‚ùå –í —Å—Ü–µ–Ω–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Enemy!");
            return;
        }

        int fixedCount = 0;

        foreach (Enemy enemy in allEnemies)
        {
            bool needsFix = false;

            // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–≥
            if (!enemy.gameObject.CompareTag("Enemy"))
            {
                enemy.gameObject.tag = "Enemy";
                Debug.Log($"[Fix] ‚úì {enemy.gameObject.name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥ 'Enemy'");
                needsFix = true;
            }

            // 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–∞–π–¥–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            Collider collider = enemy.GetComponent<Collider>();
            if (collider == null)
            {
                BoxCollider box = enemy.gameObject.AddComponent<BoxCollider>();
                box.size = new Vector3(1f, 2f, 1f);
                box.center = new Vector3(0f, 1f, 0f);
                Debug.Log($"[Fix] ‚úì {enemy.gameObject.name}: –¥–æ–±–∞–≤–ª–µ–Ω BoxCollider");
                needsFix = true;
            }
            else if (!collider.enabled)
            {
                collider.enabled = true;
                Debug.Log($"[Fix] ‚úì {enemy.gameObject.name}: –≤–∫–ª—é—á–µ–Ω Collider");
                needsFix = true;
            }

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Renderer
            Renderer[] renderers = enemy.GetComponentsInChildren<Renderer>();
            if (renderers.Length > 0)
            {
                foreach (Renderer rend in renderers)
                {
                    if (!rend.enabled)
                    {
                        rend.enabled = true;
                        Debug.Log($"[Fix] ‚úì {enemy.gameObject.name}: –≤–∫–ª—é—á–µ–Ω Renderer");
                        needsFix = true;
                    }
                }
            }

            // 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ FogOfWar
            FogOfWar fogOfWar = FindObjectOfType<FogOfWar>();
            if (fogOfWar != null)
            {
                var allEnemiesField = typeof(FogOfWar).GetField("allEnemies",
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                if (allEnemiesField != null)
                {
                    var enemyList = allEnemiesField.GetValue(fogOfWar) as System.Collections.Generic.List<Enemy>;
                    if (enemyList != null && !enemyList.Contains(enemy))
                    {
                        enemyList.Add(enemy);
                        Debug.Log($"[Fix] ‚úì {enemy.gameObject.name}: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ FogOfWar");
                        needsFix = true;
                    }
                }
            }

            if (needsFix)
            {
                fixedCount++;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º FogOfWar
        FogOfWar fog = FindObjectOfType<FogOfWar>();
        if (fog != null)
        {
            fog.RefreshEnemies();
            Debug.Log("\n[Fix] ‚úì FogOfWar –æ–±–Ω–æ–≤–ª–µ–Ω");
        }

        Debug.Log($"\n=== –ò–°–ü–†–ê–í–õ–ï–ù–û –í–†–ê–ì–û–í: {fixedCount}/{allEnemies.Length} ===");

        if (fixedCount > 0)
        {
            Debug.Log("‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ Play Mode!");
            Debug.Log("–ü–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ Play Mode –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.");
            Debug.Log("–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å - –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–∞–≥–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
        }
    }
}
