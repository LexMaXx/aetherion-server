using UnityEngine;
using UnityEditor;
using UnityEngine.SceneManagement;
using UnityEditor.SceneManagement;

/// <summary>
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–∞–≥–æ–≤ –≤ —Å—Ü–µ–Ω–µ
/// </summary>
public class SetupEnemies : Editor
{
    [MenuItem("Tools/Enemy Setup/Setup All Enemies in Scene")]
    public static void SetupAllEnemiesInScene()
    {
        Debug.Log("[SetupEnemies] ========== –ù–ê–ß–ê–õ–û ==========");

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Enemy –≤ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω–µ
        Enemy[] enemies = FindObjectsOfType<Enemy>();

        if (enemies.Length == 0)
        {
            Debug.LogWarning("[SetupEnemies] –í —Å—Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Enemy!");
            Debug.Log("[SetupEnemies] üí° –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Enemy –Ω–∞ –∫—É–±—ã-–≤—Ä–∞–≥–∏ –≤—Ä—É—á–Ω—É—é:");
            Debug.Log("[SetupEnemies]    1. –í—ã–±–µ—Ä–∏—Ç–µ –∫—É–± –≤ Hierarchy");
            Debug.Log("[SetupEnemies]    2. Add Component ‚Üí Enemy");
            return;
        }

        int setupCount = 0;
        int alreadySetupCount = 0;

        foreach (Enemy enemy in enemies)
        {
            GameObject enemyObj = enemy.gameObject;

            Debug.Log($"\n[SetupEnemies] –û–±—Ä–∞–±–æ—Ç–∫–∞: {enemyObj.name}");

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ Enemy
            if (!enemyObj.CompareTag("Enemy"))
            {
                try
                {
                    enemyObj.tag = "Enemy";
                    Debug.Log($"  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: Enemy");
                }
                catch
                {
                    Debug.LogError($"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ Enemy! –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥ –≤ Project Settings ‚Üí Tags and Layers");
                    continue;
                }
            }
            else
            {
                Debug.Log($"  ‚ÑπÔ∏è –¢–µ–≥ Enemy —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Layer
            if (enemyObj.layer == LayerMask.NameToLayer("Default"))
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–π Enemy
                int enemyLayer = LayerMask.NameToLayer("Enemy");
                if (enemyLayer != -1)
                {
                    enemyObj.layer = enemyLayer;
                    Debug.Log($"  ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Layer: Enemy");
                }
                else
                {
                    Debug.LogWarning($"  ‚ö†Ô∏è Layer 'Enemy' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ Project Settings ‚Üí Tags and Layers");
                }
            }

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Collider (–Ω—É–∂–µ–Ω –¥–ª—è –∫–ª–∏–∫–∞)
            Collider collider = enemyObj.GetComponent<Collider>();
            if (collider == null)
            {
                // –î–æ–±–∞–≤–ª—è–µ–º BoxCollider
                BoxCollider boxCollider = enemyObj.AddComponent<BoxCollider>();
                Debug.Log($"  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω BoxCollider");
            }
            else
            {
                Debug.Log($"  ‚ÑπÔ∏è Collider —É–∂–µ –µ—Å—Ç—å: {collider.GetType().Name}");
            }

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            SerializedObject so = new SerializedObject(enemy);

            SerializedProperty enemyNameProp = so.FindProperty("enemyName");
            if (string.IsNullOrEmpty(enemyNameProp.stringValue) || enemyNameProp.stringValue == "Enemy")
            {
                enemyNameProp.stringValue = enemyObj.name;
                Debug.Log($"  ‚úÖ –ò–º—è –≤—Ä–∞–≥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {enemyObj.name}");
            }

            SerializedProperty maxHealthProp = so.FindProperty("maxHealth");
            if (maxHealthProp.floatValue <= 0)
            {
                maxHealthProp.floatValue = 100f;
                Debug.Log($"  ‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 100");
            }

            so.ApplyModifiedProperties();

            setupCount++;
        }

        Debug.Log($"\n[SetupEnemies] ========== –ó–ê–í–ï–†–®–ï–ù–û ==========");
        Debug.Log($"[SetupEnemies] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Ä–∞–≥–æ–≤: {setupCount}");
        Debug.Log($"[SetupEnemies] ‚úÖ –í—Å–µ –≤—Ä–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!");
        Debug.Log($"[SetupEnemies] üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–∞—Ç—å –ø–æ –≤—Ä–∞–≥–∞–º –∏ —Ç–∞—Ä–≥–µ—Ç–∏—Ç—å –∏—Ö!");

        // –ü–æ–º–µ—á–∞–µ–º —Å—Ü–µ–Ω—É –∫–∞–∫ –∏–∑–º–µ–Ω—ë–Ω–Ω—É—é
        EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
    }

    [MenuItem("Tools/Enemy Setup/Add Enemy Component to Selected")]
    public static void AddEnemyToSelected()
    {
        if (Selection.gameObjects.Length == 0)
        {
            Debug.LogWarning("[SetupEnemies] –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç!");
            return;
        }

        int addedCount = 0;

        foreach (GameObject obj in Selection.gameObjects)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            if (obj.GetComponent<Enemy>() != null)
            {
                Debug.Log($"[SetupEnemies] {obj.name} —É–∂–µ –∏–º–µ–µ—Ç Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç");
                continue;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º Enemy
            Enemy enemy = obj.AddComponent<Enemy>();

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥
            try
            {
                obj.tag = "Enemy";
            }
            catch
            {
                Debug.LogError($"[SetupEnemies] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ Enemy –¥–ª—è {obj.name}");
            }

            // –î–æ–±–∞–≤–ª—è–µ–º Collider –µ—Å–ª–∏ –Ω–µ—Ç
            if (obj.GetComponent<Collider>() == null)
            {
                obj.AddComponent<BoxCollider>();
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Enemy
            SerializedObject so = new SerializedObject(enemy);
            so.FindProperty("enemyName").stringValue = obj.name;
            so.FindProperty("maxHealth").floatValue = 100f;
            so.ApplyModifiedProperties();

            Debug.Log($"[SetupEnemies] ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ {obj.name}");
            addedCount++;
        }

        Debug.Log($"[SetupEnemies] –î–æ–±–∞–≤–ª–µ–Ω–æ Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {addedCount}");

        EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
    }
}
