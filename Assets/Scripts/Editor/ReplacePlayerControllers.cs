using UnityEngine;
using UnityEditor;
using System.Linq;

/// <summary>
/// –ó–∞–º–µ–Ω—è–µ—Ç MixamoPlayerController –Ω–∞ PlayerController –≤–æ –≤—Å–µ—Ö –ø—Ä–µ—Ñ–∞–±–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
/// </summary>
public class ReplacePlayerControllers : Editor
{
    [MenuItem("Tools/Character Setup/Replace with PlayerController (Agility Speed)")]
    public static void ReplaceControllers()
    {
        Debug.Log("[ReplacePlayerControllers] ========== –ù–ê–ß–ê–õ–û ==========");

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ—Ñ–∞–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        string[] prefabPaths = new string[]
        {
            "Assets/UI/Prefabs/WarriorModel.prefab",
            "Assets/UI/Prefabs/MageModel.prefab",
            "Assets/UI/Prefabs/ArcherModel.prefab",
            "Assets/UI/Prefabs/RogueModel.prefab",
            "Assets/UI/Prefabs/PaladinModel.prefab"
        };

        int replaced = 0;
        int added = 0;

        foreach (string path in prefabPaths)
        {
            GameObject prefab = AssetDatabase.LoadAssetAtPath<GameObject>(path);
            if (prefab == null)
            {
                Debug.LogWarning($"[ReplacePlayerControllers] ‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}");
                continue;
            }

            Debug.Log($"\n[ReplacePlayerControllers] –û–±—Ä–∞–±–æ—Ç–∫–∞: {prefab.name}");

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ—Ñ–∞–± –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            string prefabPath = AssetDatabase.GetAssetPath(prefab);
            GameObject prefabContents = PrefabUtility.LoadPrefabContents(prefabPath);

            bool modified = false;

            // –ò—â–µ–º MixamoPlayerController
            MixamoPlayerController oldController = prefabContents.GetComponent<MixamoPlayerController>();
            if (oldController != null)
            {
                Debug.Log($"  ‚ùå –ù–∞–π–¥–µ–Ω MixamoPlayerController - —É–¥–∞–ª—è—é");
                DestroyImmediate(oldController, true);
                modified = true;
                replaced++;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ PlayerController
            PlayerController playerController = prefabContents.GetComponent<PlayerController>();
            if (playerController == null)
            {
                Debug.Log($"  ‚úÖ –î–æ–±–∞–≤–ª—è—é PlayerController");
                playerController = prefabContents.AddComponent<PlayerController>();

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SerializedObject
                SerializedObject so = new SerializedObject(playerController);
                so.FindProperty("walkSpeed").floatValue = 3f;
                so.FindProperty("runSpeed").floatValue = 6f;
                so.FindProperty("rotationSpeed").floatValue = 10f;
                so.FindProperty("gravity").floatValue = 30f;
                so.ApplyModifiedProperties();

                modified = true;
                added++;
            }
            else
            {
                Debug.Log($"  ‚ÑπÔ∏è PlayerController —É–∂–µ –µ—Å—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞—é");
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (modified)
            {
                PrefabUtility.SaveAsPrefabAsset(prefabContents, prefabPath);
                Debug.Log($"  üíæ –ü—Ä–µ—Ñ–∞–± —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {prefab.name}");
            }

            PrefabUtility.UnloadPrefabContents(prefabContents);
        }

        Debug.Log($"\n[ReplacePlayerControllers] ========== –ó–ê–í–ï–†–®–ï–ù–û ==========");
        Debug.Log($"  –£–¥–∞–ª–µ–Ω–æ MixamoPlayerController: {replaced}");
        Debug.Log($"  –î–æ–±–∞–≤–ª–µ–Ω–æ PlayerController: {added}");
        Debug.Log($"  ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç PlayerController —Å –∞–≥–∏–ª–∏—Ç–∏-–±–æ–Ω—É—Å–æ–º!");

        AssetDatabase.SaveAssets();
        AssetDatabase.Refresh();
    }
}
