using UnityEngine;
using UnityEditor;
using System.IO;

/// <summary>
/// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ—Ç –±–µ–ª—ã–π –∏ —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Å–æ –í–°–ï–• –∏–∫–æ–Ω–æ–∫
/// –ë–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ - –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ—Ç –≤—Å–µ –±–µ–ª—ã–µ/—á–µ—Ä–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
/// </summary>
public class ForceRemoveIconBackground : Editor
{
    [MenuItem("Tools/Aetherion/FORCE Remove All Backgrounds")]
    public static void ForceRemoveAll()
    {
        if (!EditorUtility.DisplayDialog(
            "‚ö†Ô∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞",
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –í–°–ï –∏–∫–æ–Ω–∫–∏ –≤ Assets/UI/Icons\n\n" +
            "–í—Å–µ –±–µ–ª—ã–µ –∏ —á–µ—Ä–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ —Å—Ç–∞–Ω—É—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏!\n\n" +
            "–í–ê–ñ–ù–û: –°–¥–µ–ª–∞–π backup –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!\n\n" +
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            "–î–ê, —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ñ–æ–Ω",
            "–û—Ç–º–µ–Ω–∞"))
        {
            return;
        }

        Debug.Log("[ForceRemoveBackground] ‚ö° –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–∫–æ–Ω–æ–∫...");

        string[] iconGuids = AssetDatabase.FindAssets("t:Texture2D", new[] { "Assets/UI/Icons" });
        int processedCount = 0;

        foreach (string guid in iconGuids)
        {
            string path = AssetDatabase.GUIDToAssetPath(guid);

            // –¢–æ–ª—å–∫–æ PNG —Ñ–∞–π–ª—ã
            if (!path.EndsWith(".png"))
            {
                Debug.Log($"[ForceRemoveBackground] ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω (–Ω–µ PNG): {Path.GetFileName(path)}");
                continue;
            }

            try
            {
                Debug.Log($"[ForceRemoveBackground] üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {path}");

                // 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
                TextureImporter importer = AssetImporter.GetAtPath(path) as TextureImporter;
                if (importer != null)
                {
                    importer.isReadable = true;
                    importer.textureCompression = TextureImporterCompression.Uncompressed;
                    importer.alphaIsTransparency = true;
                    AssetDatabase.ImportAsset(path, ImportAssetOptions.ForceUpdate);
                }

                // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
                Texture2D originalTexture = AssetDatabase.LoadAssetAtPath<Texture2D>(path);
                if (originalTexture == null)
                {
                    Debug.LogError($"[ForceRemoveBackground] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {path}");
                    continue;
                }

                int width = originalTexture.width;
                int height = originalTexture.height;

                Debug.Log($"[ForceRemoveBackground]   –†–∞–∑–º–µ—Ä: {width}x{height}");

                // 3. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–∫—Å—Ç—É—Ä—É
                Texture2D newTexture = new Texture2D(width, height, TextureFormat.RGBA32, false);
                Color[] pixels = originalTexture.GetPixels();

                int removedPixels = 0;

                // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∏–∫—Å–µ–ª—å
                for (int i = 0; i < pixels.Length; i++)
                {
                    Color pixel = pixels[i];

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –±–µ–ª—ã–π –∏–ª–∏ —á–µ—Ä–Ω—ã–π?
                    bool isWhite = pixel.r > 0.9f && pixel.g > 0.9f && pixel.b > 0.9f;
                    bool isBlack = pixel.r < 0.1f && pixel.g < 0.1f && pixel.b < 0.1f;

                    if (isWhite || isBlack)
                    {
                        // –î–µ–ª–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
                        pixels[i] = new Color(pixel.r, pixel.g, pixel.b, 0f);
                        removedPixels++;
                    }
                }

                Debug.Log($"[ForceRemoveBackground]   –£–¥–∞–ª–µ–Ω–æ –ø–∏–∫—Å–µ–ª–µ–π: {removedPixels} –∏–∑ {pixels.Length}");

                // 5. –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                newTexture.SetPixels(pixels);
                newTexture.Apply();

                // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG
                byte[] pngData = newTexture.EncodeToPNG();
                string fullPath = Path.Combine(Application.dataPath, path.Replace("Assets/", ""));

                File.WriteAllBytes(fullPath, pngData);

                Debug.Log($"[ForceRemoveBackground] ‚úÖ –ì–û–¢–û–í–û: {Path.GetFileName(path)}");
                processedCount++;
            }
            catch (System.Exception e)
            {
                Debug.LogError($"[ForceRemoveBackground] ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {path}:\n{e.Message}\n{e.StackTrace}");
            }
        }

        // 7. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        AssetDatabase.Refresh();

        Debug.Log($"[ForceRemoveBackground] ‚úÖ‚úÖ‚úÖ –í–°–Å –ì–û–¢–û–í–û! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processedCount} –∏–∫–æ–Ω–æ–∫");
        Debug.Log("[ForceRemoveBackground] –ë–µ–ª—ã–π –∏ —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω —É–¥–∞–ª—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å –∏–∫–æ–Ω–∫–∏!");
    }
}
