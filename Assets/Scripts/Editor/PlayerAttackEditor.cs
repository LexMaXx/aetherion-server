using UnityEngine;
using UnityEditor;

/// <summary>
/// Custom Editor –¥–ª—è PlayerAttack - —É–¥–æ–±–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ç–∞–∫–∏
/// </summary>
[CustomEditor(typeof(PlayerAttack))]
public class PlayerAttackEditor : Editor
{
    // Serialized Properties
    private SerializedProperty attackCooldown;
    private SerializedProperty attackRange;
    private SerializedProperty attackDamage;
    private SerializedProperty attackRotationOffset;
    private SerializedProperty projectilePrefab;
    private SerializedProperty isRangedAttack;
    private SerializedProperty projectileSpeed;
    private SerializedProperty weaponTipTransform;
    private SerializedProperty attackAnimationSpeed;
    private SerializedProperty attackHitTiming;

    private void OnEnable()
    {
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—è
        attackCooldown = serializedObject.FindProperty("attackCooldown");
        attackRange = serializedObject.FindProperty("attackRange");
        attackDamage = serializedObject.FindProperty("attackDamage");
        attackRotationOffset = serializedObject.FindProperty("attackRotationOffset");
        projectilePrefab = serializedObject.FindProperty("projectilePrefab");
        isRangedAttack = serializedObject.FindProperty("isRangedAttack");
        projectileSpeed = serializedObject.FindProperty("projectileSpeed");
        weaponTipTransform = serializedObject.FindProperty("weaponTipTransform");
        attackAnimationSpeed = serializedObject.FindProperty("attackAnimationSpeed");
        attackHitTiming = serializedObject.FindProperty("attackHitTiming");
    }

    public override void OnInspectorGUI()
    {
        serializedObject.Update();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        EditorGUILayout.Space(10);
        EditorGUILayout.LabelField("‚öîÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ê–¢–ê–ö–ò", EditorStyles.boldLabel);
        EditorGUILayout.Space(5);

        // ===== –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ =====
        DrawHeader("–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        EditorGUILayout.PropertyField(attackDamage, new GUIContent("üí• –£—Ä–æ–Ω"));
        EditorGUILayout.PropertyField(attackCooldown, new GUIContent("‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω (—Å–µ–∫)"));
        EditorGUILayout.PropertyField(attackRange, new GUIContent("üìè –î–∞–ª—å–Ω–æ—Å—Ç—å (–º)"));
        EditorGUILayout.Space(10);

        // ===== –ê–ù–ò–ú–ê–¶–ò–Ø =====
        DrawHeader("‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏");

        // –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
        EditorGUILayout.BeginHorizontal();
        EditorGUILayout.PropertyField(attackAnimationSpeed, new GUIContent("üé¨ –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏"));
        if (attackAnimationSpeed.floatValue != 1.0f)
        {
            GUILayout.Label($"({attackAnimationSpeed.floatValue}x)", EditorStyles.miniLabel);
        }
        EditorGUILayout.EndHorizontal();

        // –°–ª–∞–π–¥–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –ø—Ä–µ—Å–µ—Ç–∞–º–∏
        EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("0.5x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 0.5f;
        if (GUILayout.Button("1x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 1.0f;
        if (GUILayout.Button("2x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 2.0f;
        if (GUILayout.Button("3x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 3.0f;
        if (GUILayout.Button("5x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 5.0f;
        if (GUILayout.Button("10x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 10.0f;
        if (GUILayout.Button("20x", GUILayout.Width(45))) attackAnimationSpeed.floatValue = 20.0f;
        EditorGUILayout.EndHorizontal();

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ —Å–∫–æ—Ä–æ—Å—Ç—è–º–∏
        if (attackAnimationSpeed.floatValue >= 10.0f)
        {
            EditorGUILayout.HelpBox($"‚ö° –û–ß–ï–ù–¨ –ë–´–°–¢–†–û! –ê–Ω–∏–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å—Å—è –≤ {attackAnimationSpeed.floatValue} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ", MessageType.Warning);
        }

        EditorGUILayout.Space(5);

        // –ú–æ–º–µ–Ω—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞/—É–¥–∞—Ä–∞
        EditorGUILayout.PropertyField(attackHitTiming, new GUIContent("üéØ –ú–æ–º–µ–Ω—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞/—É–¥–∞—Ä–∞"));

        // –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        DrawTimingBar(attackHitTiming.floatValue);

        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —Ç–∞–π–º–∏–Ω–≥–∞
        EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("–ù–∞—á–∞–ª–æ (20%)", GUILayout.Width(100))) attackHitTiming.floatValue = 0.2f;
        if (GUILayout.Button("–°–µ—Ä–µ–¥–∏–Ω–∞ (50%)", GUILayout.Width(120))) attackHitTiming.floatValue = 0.5f;
        if (GUILayout.Button("–ö–æ–Ω–µ—Ü (80%)", GUILayout.Width(100))) attackHitTiming.floatValue = 0.8f;
        EditorGUILayout.EndHorizontal();

        EditorGUILayout.Space(10);

        // ===== –°–ù–ê–†–Ø–î–´ =====
        DrawHeader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤");
        EditorGUILayout.PropertyField(isRangedAttack, new GUIContent("üèπ –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞?"));

        if (isRangedAttack.boolValue)
        {
            EditorGUI.indentLevel++;
            EditorGUILayout.PropertyField(projectilePrefab, new GUIContent("–ü—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞"));
            EditorGUILayout.PropertyField(projectileSpeed, new GUIContent("–°–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–∞—Ä—è–¥–∞"));
            EditorGUILayout.PropertyField(weaponTipTransform, new GUIContent("–¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ (WeaponTip)"));
            EditorGUI.indentLevel--;
        }

        EditorGUILayout.Space(10);

        // ===== –ü–û–í–û–†–û–¢ =====
        DrawHeader("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞");
        EditorGUILayout.PropertyField(attackRotationOffset, new GUIContent("üìê –°–º–µ—â–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ (¬∞)"));

        // –ü–æ–¥—Å–∫–∞–∑–∫–∞
        if (attackRotationOffset.floatValue != 0)
        {
            EditorGUILayout.HelpBox($"–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≤–µ—Ä–Ω—ë—Ç—Å—è –Ω–∞ {attackRotationOffset.floatValue}¬∞ –ø—Ä–∏ –∞—Ç–∞–∫–µ", MessageType.Info);
        }

        EditorGUILayout.Space(10);

        // ===== –ë–´–°–¢–†–´–ï –ü–†–ï–°–ï–¢–´ =====
        DrawHeader("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã");

        EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("‚öîÔ∏è –í–æ–∏–Ω"))
        {
            SetWarriorPreset();
        }
        if (GUILayout.Button("üèπ –õ—É—á–Ω–∏–∫"))
        {
            SetArcherPreset();
        }
        EditorGUILayout.EndHorizontal();

        EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("üîÆ –ú–∞–≥"))
        {
            SetMagePreset();
        }
        if (GUILayout.Button("üíÄ –†–∞–∑–±–æ–π–Ω–∏–∫"))
        {
            SetRoguePreset();
        }
        EditorGUILayout.EndHorizontal();

        EditorGUILayout.Space(10);

        // ===== –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
        DrawInfo();

        serializedObject.ApplyModifiedProperties();
    }

    private void DrawHeader(string text)
    {
        EditorGUILayout.BeginVertical(EditorStyles.helpBox);
        EditorGUILayout.LabelField(text, EditorStyles.boldLabel);
        EditorGUILayout.EndVertical();
    }

    private void DrawTimingBar(float timing)
    {
        EditorGUILayout.BeginHorizontal();

        Rect rect = EditorGUILayout.GetControlRect(GUILayout.Height(20));

        // –§–æ–Ω
        EditorGUI.DrawRect(rect, new Color(0.2f, 0.2f, 0.2f));

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ –º–æ–º–µ–Ω—Ç–∞ —É–¥–∞—Ä–∞
        Rect fillRect = new Rect(rect.x, rect.y, rect.width * timing, rect.height);
        EditorGUI.DrawRect(fillRect, new Color(0.3f, 0.7f, 0.3f));

        // –ú–∞—Ä–∫–µ—Ä –º–æ–º–µ–Ω—Ç–∞ —É–¥–∞—Ä–∞
        Rect markerRect = new Rect(rect.x + rect.width * timing - 2, rect.y, 4, rect.height);
        EditorGUI.DrawRect(markerRect, Color.yellow);

        // –¢–µ–∫—Å—Ç
        GUIStyle style = new GUIStyle(EditorStyles.label);
        style.alignment = TextAnchor.MiddleCenter;
        style.normal.textColor = Color.white;
        EditorGUI.LabelField(rect, $"{timing * 100:F0}% –∞–Ω–∏–º–∞—Ü–∏–∏", style);

        EditorGUILayout.EndHorizontal();
    }

    private void DrawInfo()
    {
        EditorGUILayout.HelpBox(
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n\n" +
            "‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ - –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ (3x = –≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)\n" +
            "‚Ä¢ –ú–æ–º–µ–Ω—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞ - –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∞—Ä—è–¥ (0.5 = –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ, 0.8 = –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É)\n" +
            "‚Ä¢ –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞ - —Å–æ–∑–¥–∞—ë—Ç —Å–Ω–∞—Ä—è–¥ –≤–º–µ—Å—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞\n" +
            "‚Ä¢ –°–º–µ—â–µ–Ω–∏–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ - –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —Å –±–æ–∫–æ–≤—ã–º —É–¥–∞—Ä–æ–º",
            MessageType.Info
        );
    }

    // ===== –ü–†–ï–°–ï–¢–´ =====

    private void SetWarriorPreset()
    {
        attackDamage.floatValue = 30f;
        attackRange.floatValue = 3f;
        attackCooldown.floatValue = 1.0f;
        attackRotationOffset.floatValue = 45f;
        isRangedAttack.boolValue = false;
        attackAnimationSpeed.floatValue = 1.0f;
        attackHitTiming.floatValue = 0.7f;
        Debug.Log("‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω –ø—Ä–µ—Å–µ—Ç –í–æ–∏–Ω–∞");
    }

    private void SetArcherPreset()
    {
        attackDamage.floatValue = 35f;
        attackRange.floatValue = 50f;
        attackCooldown.floatValue = 1.2f;
        attackRotationOffset.floatValue = 0f;
        isRangedAttack.boolValue = true;
        attackAnimationSpeed.floatValue = 1.0f;
        attackHitTiming.floatValue = 0.5f; // –í—ã—Å—Ç—Ä–µ–ª –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ (–Ω–∞—Ç—è–∂–µ–Ω–∏–µ –ª—É–∫–∞)
        projectileSpeed.floatValue = 30f;
        Debug.Log("‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω –ø—Ä–µ—Å–µ—Ç –õ—É—á–Ω–∏–∫–∞");
    }

    private void SetMagePreset()
    {
        attackDamage.floatValue = 40f;
        attackRange.floatValue = 20f;
        attackCooldown.floatValue = 0.8f;
        attackRotationOffset.floatValue = 0f;
        isRangedAttack.boolValue = true;
        attackAnimationSpeed.floatValue = 3.0f; // –ë—ã—Å—Ç—Ä–∞—è –∞—Ç–∞–∫–∞!
        attackHitTiming.floatValue = 0.4f; // –†–∞–Ω–æ - –±—ã—Å—Ç—Ä—ã–π –≤–∑–º–∞—Ö
        projectileSpeed.floatValue = 20f;
        Debug.Log("‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω –ø—Ä–µ—Å–µ—Ç –ú–∞–≥–∞");
    }

    private void SetRoguePreset()
    {
        attackDamage.floatValue = 50f;
        attackRange.floatValue = 20f;
        attackCooldown.floatValue = 1.0f;
        attackRotationOffset.floatValue = -30f;
        isRangedAttack.boolValue = true;
        attackAnimationSpeed.floatValue = 1.0f;
        attackHitTiming.floatValue = 0.6f;
        projectileSpeed.floatValue = 15f;
        Debug.Log("‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω –ø—Ä–µ—Å–µ—Ç –†–∞–∑–±–æ–π–Ω–∏–∫–∞");
    }
}
