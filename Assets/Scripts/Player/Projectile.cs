using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –°–Ω–∞—Ä—è–¥ (—Å—Ç—Ä–µ–ª–∞, –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä, —ç—Ñ—Ñ–µ–∫—Ç –¥—É—à–∏)
/// –õ–µ—Ç–∏—Ç –∫ —Ü–µ–ª–∏ –∏ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
/// </summary>
public class Projectile : MonoBehaviour
{
    [Header("Projectile Settings")]
    [SerializeField] private float speed = 20f; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞
    [SerializeField] private float lifetime = 5f; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (—Å–µ–∫—É–Ω–¥—ã)
    [SerializeField] private bool homing = false; // –°–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ü–µ–ª—å—é?

    [Header("Visual Settings")]
    [SerializeField] private TrailRenderer trail; // –°–ª–µ–¥ –∑–∞ —Å–Ω–∞—Ä—è–¥–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    [SerializeField] private ParticleSystem hitEffect; // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
    [SerializeField] private float rotationSpeed = 360f; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è (–≥—Ä–∞–¥—É—Å—ã/—Å–µ–∫)

    private Transform target; // –¶–µ–ª—å
    private float damage; // –£—Ä–æ–Ω
    private Vector3 direction; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞
    private float spawnTime; // –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
    private Transform visualTransform; // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ (–¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è)
    private GameObject owner; // –í–ª–∞–¥–µ–ª–µ—Ü —Å–Ω–∞—Ä—è–¥–∞ (–∫—Ç–æ –µ–≥–æ –≤—ã–ø—É—Å—Ç–∏–ª) - –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
    private List<SkillEffect> effects; // –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–∫–∏–ª–ª–∞ (–≥–æ—Ä–µ–Ω–∏–µ, –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç.–¥.)

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–Ω–∞—Ä—è–¥–∞
    /// </summary>
    public void Initialize(Transform targetTransform, float projectileDamage, Vector3 initialDirection, GameObject projectileOwner = null, List<SkillEffect> skillEffects = null)
    {
        target = targetTransform;
        damage = projectileDamage;
        direction = initialDirection.normalized;
        spawnTime = Time.time;
        owner = projectileOwner;
        effects = skillEffects;

        // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (transform.childCount > 0)
        {
            visualTransform = transform.GetChild(0); // –ü–µ—Ä–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫ = –≤–∏–∑—É–∞–ª
        }

        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ—Ç–∞
        if (direction != Vector3.zero)
        {
            transform.rotation = Quaternion.LookRotation(direction);
        }
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–Ω–∞—Ä—è–¥–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ SkillData (–ù–û–í–û–ï)
    /// </summary>
    public void InitializeFromSkill(SkillData skill, Transform targetTransform, Vector3 initialDirection, GameObject projectileOwner = null)
    {
        target = targetTransform;
        damage = skill.baseDamageOrHeal;
        direction = initialDirection.normalized;
        spawnTime = Time.time;
        owner = projectileOwner;
        effects = skill.effects;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ SkillData
        speed = skill.projectileSpeed;
        homing = skill.projectileHoming;
        lifetime = skill.projectileLifetime;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º hitEffect –∏–∑ SkillData
        if (skill.projectileHitEffectPrefab != null)
        {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ prefab —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
            hitEffect = skill.projectileHitEffectPrefab.GetComponent<ParticleSystem>();
        }

        // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (transform.childCount > 0)
        {
            visualTransform = transform.GetChild(0);
        }

        // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ—Ç–∞
        if (direction != Vector3.zero)
        {
            transform.rotation = Quaternion.LookRotation(direction);
        }

        Debug.Log($"[Projectile] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ SkillData: speed={speed}, homing={homing}, lifetime={lifetime}");
    }

    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
        if (Time.time - spawnTime > lifetime)
        {
            DestroySelf();
            return;
        }

        // –î–≤–∏–∂–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
        MoveProjectile();

        // –í—Ä–∞—â–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ (–¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
        if (visualTransform != null && rotationSpeed > 0)
        {
            visualTransform.Rotate(Vector3.forward * rotationSpeed * Time.deltaTime, Space.Self);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
        if (target != null && Vector3.Distance(transform.position, target.position) < 0.5f)
        {
            HitTarget();
        }
    }

    /// <summary>
    /// –î–≤–∏–∂–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
    /// </summary>
    private void MoveProjectile()
    {
        if (homing && target != null)
        {
            // –°–∞–º–æ–Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª—å
            direction = (target.position - transform.position).normalized;
            transform.rotation = Quaternion.LookRotation(direction);
        }

        // –î–≤–∏–≥–∞–µ–º —Å–Ω–∞—Ä—è–¥
        transform.position += direction * speed * Time.deltaTime;
    }

    /// <summary>
    /// –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª—å
    /// </summary>
    private void HitTarget()
    {
        if (target != null)
        {
            Enemy enemy = target.GetComponent<Enemy>();
            if (enemy != null && enemy.IsAlive())
            {
                // –í–ê–ñ–ù–û: –í –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –ù–ï –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω NetworkPlayer –ª–æ–∫–∞–ª—å–Ω–æ!
                NetworkPlayer networkTarget = target.GetComponent<NetworkPlayer>();
                if (networkTarget == null)
                {
                    // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π NPC –≤—Ä–∞–≥ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
                    enemy.TakeDamage(damage);
                    Debug.Log($"[Projectile] –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ NPC! –£—Ä–æ–Ω: {damage}");

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã (–≥–æ—Ä–µ–Ω–∏–µ, –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç.–¥.)
                    ApplyEffects(target);
                }
                else
                {
                    // –≠—Ç–æ NetworkPlayer - —É—Ä–æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ PlayerAttack
                    Debug.Log($"[Projectile] –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ NetworkPlayer {networkTarget.username}! –£—Ä–æ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç —Å–µ—Ä–≤–µ—Ä");
                }
            }
        }

        // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è (–≤–∑—Ä—ã–≤, –∏—Å–∫—Ä—ã –∏ —Ç.–¥.)
        if (hitEffect != null)
        {
            GameObject effectObj = Instantiate(hitEffect, transform.position, Quaternion.identity);

            // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
            if (SocketIOManager.Instance != null && SocketIOManager.Instance.IsConnected)
            {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ prefab —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö
                string effectName = hitEffect.name.Replace("(Clone)", "").Trim();
                SocketIOManager.Instance.SendVisualEffect(
                    "explosion", // —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
                    effectName, // –Ω–∞–∑–≤–∞–Ω–∏–µ prefab
                    transform.position, // –ø–æ–∑–∏—Ü–∏—è –≤–∑—Ä—ã–≤–∞
                    Quaternion.identity, // —Ä–æ—Ç–∞—Ü–∏—è
                    "", // –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É (world space)
                    0f // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (0 = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ParticleSystem)
                );
                Debug.Log($"[Projectile] ‚ú® –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {effectName}");
            }
        }

        DestroySelf();
    }

    /// <summary>
    /// –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–º
    /// </summary>
    private void OnTriggerEnter(Collider other)
    {
        Debug.Log($"[Projectile] ‚ö° OnTriggerEnter: {other.gameObject.name}, tag: {other.tag}");

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–Ω–∞—Ä—è–¥–∞ (–Ω–µ –ø–æ–ø–∞–¥–∞–µ–º –≤ —Å–µ–±—è)
        if (owner != null && other.gameObject == owner)
        {
            Debug.Log($"[Projectile] ‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞");
            return;
        }

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ —Å –∑–µ–º–ª—ë–π –∏ –¥—Ä—É–≥–∏–º–∏ –Ω–µ-—Ü–µ–ª–µ–≤—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
        if (other.CompareTag("Ground") || other.CompareTag("Terrain"))
        {
            Debug.Log($"[Projectile] ‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–µ–º–ª—é/—Ç–µ—Ä–µ–π–Ω");
            return;
        }

        // –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤–æ –≤—Ä–∞–≥–∞ (Enemy tag) –∏–ª–∏ NetworkPlayer
        NetworkPlayer networkTarget = other.GetComponent<NetworkPlayer>();
        Enemy enemy = other.GetComponent<Enemy>();

        Debug.Log($"[Projectile] üéØ NetworkPlayer: {networkTarget != null}, Enemy: {enemy != null}");

        if (networkTarget != null || enemy != null)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∂–∏–≤–æ–π –ª–∏ –≤—Ä–∞–≥
            bool isAlive = true;
            if (enemy != null)
            {
                isAlive = enemy.IsAlive();
            }
            else if (networkTarget != null)
            {
                isAlive = networkTarget.IsAlive;
            }

            if (isAlive)
            {
                // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Ç–æ–ª—å–∫–æ NPC –≤—Ä–∞–≥–∞–º (NetworkPlayer –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)
                if (networkTarget == null && enemy != null)
                {
                    enemy.TakeDamage(damage);
                    Debug.Log($"[Projectile] üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ NPC! –£—Ä–æ–Ω: {damage}");

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã (–≥–æ—Ä–µ–Ω–∏–µ, –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç.–¥.)
                    ApplyEffects(other.transform);
                }
                else if (networkTarget != null)
                {
                    // NetworkPlayer - —É—Ä–æ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç —Å–µ—Ä–≤–µ—Ä, –Ω–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ!
                    Debug.Log($"[Projectile] üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ –≤ NetworkPlayer {networkTarget.username}! –£—Ä–æ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç —Å–µ—Ä–≤–µ—Ä");

                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–≥–æ—Ä–µ–Ω–∏–µ –∏ —Ç.–¥.) –Ω–∞ NetworkPlayer
                    ApplyEffects(other.transform);
                }

                // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è (–≤–∑—Ä—ã–≤, –∏—Å–∫—Ä—ã –∏ —Ç.–¥.)
                if (hitEffect != null)
                {
                    GameObject effectObj = Instantiate(hitEffect, transform.position, Quaternion.identity);

                    // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
                    if (SocketIOManager.Instance != null && SocketIOManager.Instance.IsConnected)
                    {
                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ prefab —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö
                        string effectName = hitEffect.name.Replace("(Clone)", "").Trim();
                        SocketIOManager.Instance.SendVisualEffect(
                            "explosion", // —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞
                            effectName, // –Ω–∞–∑–≤–∞–Ω–∏–µ prefab
                            transform.position, // –ø–æ–∑–∏—Ü–∏—è –≤–∑—Ä—ã–≤–∞
                            Quaternion.identity, // —Ä–æ—Ç–∞—Ü–∏—è
                            "", // –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É (world space)
                            0f // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (0 = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ParticleSystem)
                        );
                        Debug.Log($"[Projectile] ‚ú® –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è (OnTriggerEnter) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {effectName}");
                    }
                }

                DestroySelf();
            }
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã –∫ —Ü–µ–ª–∏
    /// </summary>
    private void ApplyEffects(Transform targetTransform)
    {
        if (effects == null || effects.Count == 0)
        {
            Debug.Log($"[Projectile] ‚ö†Ô∏è –ù–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è");
            return;
        }

        Debug.Log($"[Projectile] üî• –ü—Ä–∏–º–µ–Ω—è–µ–º {effects.Count} —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫ {targetTransform.name}");

        SkillManager skillManager = targetTransform.GetComponent<SkillManager>();
        if (skillManager == null)
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç SkillManager - –¥–æ–±–∞–≤–ª—è–µ–º (–¥–ª—è –≤—Ä–∞–≥–æ–≤)
            skillManager = targetTransform.gameObject.AddComponent<SkillManager>();
            Debug.Log($"[Projectile] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω SkillManager –∫ {targetTransform.name}");
        }

        foreach (SkillEffect effect in effects)
        {
            Debug.Log($"[Projectile] üî• –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç {effect.effectType}, particleEffectPrefab: {(effect.particleEffectPrefab != null ? effect.particleEffectPrefab.name : "NULL")}");
            skillManager.AddEffect(effect, targetTransform);
            Debug.Log($"[Projectile] ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç {effect.effectType} –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ {targetTransform.name}");
        }
    }

    /// <summary>
    /// –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
    /// </summary>
    private void DestroySelf()
    {
        Destroy(gameObject);
    }
}
