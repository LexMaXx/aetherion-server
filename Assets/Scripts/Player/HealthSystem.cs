using UnityEngine;
using System;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/// –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CharacterStats (Endurance ‚Üí MaxHP)
/// </summary>
public class HealthSystem : MonoBehaviour
{
    [Header("Health Settings")]
    [SerializeField] private float currentHealth;
    [SerializeField] private float maxHealth = 100f;

    [Header("Health Regeneration")]
    [SerializeField] private float healthRegenRate = 0.2f; // HP/—Å–µ–∫ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ (–ó–ê–ú–ï–î–õ–ï–ù–û –≤ 10 —Ä–∞–∑)

    [Header("Damage Reduction")]
    [SerializeField] private float damageReduction = 0f; // –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0-100)

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats
    private CharacterStats characterStats;

    // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    private bool isRegenerating = false;

    // –°–æ–±—ã—Ç–∏—è
    public event Action<float, float> OnHealthChanged; // (current, max)
    public event Action OnDeath;

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public float CurrentHealth => currentHealth;
    public float MaxHealth => maxHealth;
    public float HealthPercent => maxHealth > 0 ? currentHealth / maxHealth : 0f;
    public bool IsAlive => currentHealth > 0;

    void Start()
    {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats (Endurance ‚Üí HP)
        characterStats = GetComponent<CharacterStats>();
        if (characterStats != null)
        {
            characterStats.OnStatsChanged += UpdateHealthFromStats;
            UpdateHealthFromStats();
            Debug.Log("[HealthSystem] ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç CharacterStats - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            currentHealth = maxHealth;
        }

        OnHealthChanged?.Invoke(currentHealth, maxHealth);
    }

    void Update()
    {
        // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è HP —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
        bool isStanding = IsPlayerStanding();

        if (isStanding && currentHealth < maxHealth && IsAlive)
        {
            if (!isRegenerating)
            {
                isRegenerating = true;
                Debug.Log("[HealthSystem] üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP (–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–æ–∏—Ç)");
            }

            currentHealth += healthRegenRate * Time.deltaTime;
            currentHealth = Mathf.Min(currentHealth, maxHealth);

            OnHealthChanged?.Invoke(currentHealth, maxHealth);

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if (currentHealth >= maxHealth)
            {
                currentHealth = maxHealth;
                if (isRegenerating)
                {
                    isRegenerating = false;
                    Debug.Log("[HealthSystem] ‚úÖ HP –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
                }
            }
        }
        else if (!isStanding && isRegenerating)
        {
            // –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
            isRegenerating = false;
            Debug.Log("[HealthSystem] ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP (–ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è)");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –º–µ—Å—Ç–µ
    /// </summary>
    private bool IsPlayerStanding()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –¥–≤–∏–∂–µ–Ω–∏—è - —Å–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");
        bool hasMovementInput = Mathf.Abs(horizontal) > 0.01f || Mathf.Abs(vertical) > 0.01f;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–≤–æ–¥ - –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è
        return !hasMovementInput;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å HP –Ω–∞ –æ—Å–Ω–æ–≤–µ Endurance
    /// </summary>
    private void UpdateHealthFromStats()
    {
        if (characterStats == null) return;

        float oldMaxHealth = maxHealth;
        maxHealth = characterStats.MaxHealth;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—ë–º –ø–æ–ª–Ω–æ–µ HP
        if (oldMaxHealth > 0 && currentHealth > 0)
        {
            // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ maxHealth
            float healthPercent = currentHealth / oldMaxHealth;
            currentHealth = maxHealth * healthPercent;
        }
        else
        {
            // –ü–µ—Ä–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –¥–∞—ë–º –ø–æ–ª–Ω–æ–µ HP
            currentHealth = maxHealth;
        }

        OnHealthChanged?.Invoke(currentHealth, maxHealth);
        Debug.Log($"[HealthSystem] –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Stats: {currentHealth:F0}/{maxHealth:F0} HP (Endurance: {characterStats.endurance})");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω
    /// </summary>
    public void TakeDamage(float damage)
{
    if (!IsAlive) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
EffectManager effectManager = GetComponent<EffectManager>();
if (effectManager != null && effectManager.HasInvulnerability())
{
    Debug.Log($"[HealthSystem] üõ°Ô∏è –ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–¨! –£—Ä–æ–Ω {damage:F0} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
    return;
}


    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    float originalDamage = damage;
        if (damageReduction > 0)
        {
            float reduction = damage * (damageReduction / 100f);
            damage -= reduction;
            Debug.Log($"[HealthSystem] üõ°Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: {originalDamage:F1} ‚Üí {damage:F1} (-{reduction:F1}, {damageReduction}%)");
        }

        currentHealth -= damage;
        currentHealth = Mathf.Max(0, currentHealth);

        Debug.Log($"[HealthSystem] -{damage:F0} HP. –û—Å—Ç–∞–ª–æ—Å—å: {currentHealth:F0}/{maxHealth:F0}");

        OnHealthChanged?.Invoke(currentHealth, maxHealth);

        if (currentHealth <= 0)
        {
            Die();
        }
    }

    /// <summary>
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public void Heal(float amount)
    {
        if (!IsAlive) return;

        currentHealth += amount;
        currentHealth = Mathf.Min(currentHealth, maxHealth);

        Debug.Log($"[HealthSystem] +{amount:F0} HP. –¢–µ–∫—É—â–µ–µ: {currentHealth:F0}/{maxHealth:F0}");

        OnHealthChanged?.Invoke(currentHealth, maxHealth);
    }

    /// <summary>
    /// –°–º–µ—Ä—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    /// </summary>
    private void Die()
    {
        Debug.Log("[HealthSystem] ‚ò†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≥–∏–±!");
        OnDeath?.Invoke();

        // –†–µ—Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        StartCoroutine(RespawnAfterDelay(3f));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è —Ä–µ—Å–ø–∞–≤–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    /// </summary>
    private System.Collections.IEnumerator RespawnAfterDelay(float delay)
    {
        Debug.Log($"[HealthSystem] ‚è≥ –†–µ—Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...");
        yield return new WaitForSeconds(delay);

        // –í—ã–∑—ã–≤–∞–µ–º —Ä–µ—Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ ArenaManager
        if (ArenaManager.Instance != null)
        {
            ArenaManager.Instance.RespawnPlayer();
        }
        else
        {
            Debug.LogError("[HealthSystem] ‚ùå ArenaManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ—Å–ø–∞–≤–Ω–∞!");
            // Fallback: –ø—Ä–æ—Å—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP
            Revive(1f);
        }
    }

    /// <summary>
    /// –í–æ—Å–∫—Ä–µ—Å–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    /// </summary>
    public void Revive(float healthPercent = 1f)
    {
        currentHealth = maxHealth * healthPercent;
        Debug.Log($"[HealthSystem] ‚öïÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤–æ—Å–∫—Ä–µ—à–µ–Ω —Å {currentHealth:F0}/{maxHealth:F0} HP");
        OnHealthChanged?.Invoke(currentHealth, maxHealth);
    }

    /// <summary>
    /// –í—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (–¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π/–±–∞—Ñ—Ñ–æ–≤)
    /// </summary>
    public void AddTemporaryMaxHealth(float amount)
    {
        maxHealth += amount;
        currentHealth += amount; // –¢–∞–∫–∂–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ HP
        Debug.Log($"[HealthSystem] +{amount:F0} –í—Ä–µ–º–µ–Ω–Ω–æ–µ Max HP. –¢–µ–∫—É—â–µ–µ: {currentHealth:F0}/{maxHealth:F0}");
        OnHealthChanged?.Invoke(currentHealth, maxHealth);
    }

    /// <summary>
    /// –£–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–∞—Ñ—Ñ–∞)
    /// </summary>
    public void RemoveTemporaryMaxHealth(float amount)
    {
        maxHealth -= amount;
        maxHealth = Mathf.Max(maxHealth, 1f); // –ú–∏–Ω–∏–º—É–º 1 HP
        currentHealth = Mathf.Min(currentHealth, maxHealth); // –¢–µ–∫—É—â–µ–µ HP –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º—É–º
        Debug.Log($"[HealthSystem] -{amount:F0} –í—Ä–µ–º–µ–Ω–Ω–æ–µ Max HP. –¢–µ–∫—É—â–µ–µ: {currentHealth:F0}/{maxHealth:F0}");
        OnHealthChanged?.Invoke(currentHealth, maxHealth);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ (–¥–ª—è –∑–∞—â–∏—Ç–Ω—ã—Ö –±–∞—Ñ—Ñ–æ–≤)
    /// </summary>
    public void AddDamageReduction(float percent)
    {
        damageReduction += percent;
        damageReduction = Mathf.Clamp(damageReduction, 0f, 100f); // –ú–∞–∫—Å–∏–º—É–º 100%
        Debug.Log($"[HealthSystem] üõ°Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: {(percent > 0 ? "+" : "")}{percent}% (–∏—Ç–æ–≥–æ: {damageReduction}%)");
    }

    /// <summary>
    /// –£–±—Ä–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ (–æ–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –±–∞—Ñ—Ñ–∞)
    /// </summary>
    public void RemoveDamageReduction(float percent)
    {
        damageReduction -= percent;
        damageReduction = Mathf.Max(damageReduction, 0f); // –ú–∏–Ω–∏–º—É–º 0%
        Debug.Log($"[HealthSystem] üõ°Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞: -{percent}% (–∏—Ç–æ–≥–æ: {damageReduction}%)");
    }

    private void OnDestroy()
    {
        if (characterStats != null)
        {
            characterStats.OnStatsChanged -= UpdateHealthFromStats;
        }
    }

    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    [ContextMenu("Test: Take 20 Damage")]
    private void TestTakeDamage()
    {
        TakeDamage(20f);
    }

    [ContextMenu("Test: Heal 30 HP")]
    private void TestHeal()
    {
        Heal(30f);
    }
}
