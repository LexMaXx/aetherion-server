using UnityEngine;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –∫–ª–∏–∫ –º—ã—à–∫–æ–π –¥–ª—è –∞—Ç–∞–∫–∏
/// –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
/// </summary>
public class PlayerAttack : MonoBehaviour
{
    [Header("Attack Settings")]
    [SerializeField] private float attackCooldown = 1.0f; // –ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
    [SerializeField] private float attackRange = 3.0f; // –î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
    [SerializeField] private float attackDamage = 25f; // –£—Ä–æ–Ω –∞—Ç–∞–∫–∏
    [SerializeField] private float optimalAttackDistance = 1.8f; // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —É–¥–∞—Ä–∞
    [SerializeField] private float attackRotationOffset = 45f; // –ü–æ–≤–æ—Ä–æ—Ç –≤–æ –≤—Ä–µ–º—è –∞—Ç–∞–∫–∏ (–≥—Ä–∞–¥—É—Å—ã)

    [Header("Projectile Settings")]
    [SerializeField] private GameObject projectilePrefab; // –ü—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞ (—Å—Ç—Ä–µ–ª–∞, —à–∞—Ä, –æ—Å–∫–æ–ª–∫–∏)
    [SerializeField] private bool isRangedAttack = false; // –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞? (–ª—É—á–Ω–∏–∫, –º–∞–≥, —Ä–∞–∑–±–æ–π–Ω–∏–∫)
    [SerializeField] private float projectileSpeed = 20f; // –°–∫–æ—Ä–æ—Å—Ç—å —Å–Ω–∞—Ä—è–¥–∞
    [SerializeField] private Transform weaponTipTransform; // –¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ —Å–Ω–∞—Ä—è–¥–æ–≤ (–∫–æ–Ω—á–∏–∫ –æ—Ä—É–∂–∏—è)
    [SerializeField] private float manaCostPerShot = 10f; // –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–Ω—ã –∑–∞ –≤—ã—Å—Ç—Ä–µ–ª (–¥–ª—è –º–∞–≥–æ–≤ –∏ —Ä–∞–∑–±–æ–π–Ω–∏–∫–æ–≤)

    [Header("Animation Settings")]
    [SerializeField] private float attackAnimationSpeed = 1.0f; // –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏ (1.0 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ, 3.0 = –≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)
    [SerializeField][Range(0f, 1f)] private float attackHitTiming = 0.8f; // –ú–æ–º–µ–Ω—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞/—É–¥–∞—Ä–∞ (0.0 = –Ω–∞—á–∞–ª–æ, 0.5 = —Å–µ—Ä–µ–¥–∏–Ω–∞, 1.0 = –∫–æ–Ω–µ—Ü)

    private Animator animator;
    private CharacterController characterController;
    private MixamoPlayerController playerController;
    private TargetSystem targetSystem;
    private ActionPointsSystem actionPointsSystem;
    private ClassWeaponManager weaponManager;
    private CharacterStats characterStats; // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SPECIAL (Strength/Intelligence/Luck)
    private ManaSystem manaSystem; // –°–∏—Å—Ç–µ–º–∞ –º–∞–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫
    private float lastAttackTime = 0f;
    private bool isAttacking = false;
    private Vector3 positionBeforeAttack;
    private Quaternion rotationBeforeAttack;

    // –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å –∞—Ç–∞–∫–∏ (–¥–ª—è Animation Event)
    private Enemy currentAttackTarget = null;

    // Rotation lock –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∫ –≤—Ä–∞–≥—É
    private Quaternion lockedRotation;
    private bool isRotationLocked = false;

    // –•–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–∞–∫–∏ –≤ –∞–Ω–∏–º–∞—Ç–æ—Ä–µ
    private int attackStateHash;
    private const string ATTACK_STATE_NAME = "WarriorAttack"; // –ò–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–∞–∫–∏

    void Start()
    {
        Debug.Log($"[PlayerAttack] ========== START –≤—ã–∑–≤–∞–Ω –¥–ª—è {gameObject.name} ==========");

        animator = GetComponent<Animator>();
        characterController = GetComponent<CharacterController>();
        playerController = GetComponent<MixamoPlayerController>();
        targetSystem = GetComponent<TargetSystem>();
        actionPointsSystem = GetComponent<ActionPointsSystem>();
        weaponManager = GetComponent<ClassWeaponManager>();
        characterStats = GetComponent<CharacterStats>();
        manaSystem = GetComponent<ManaSystem>();

        if (characterStats != null)
        {
            Debug.Log($"[PlayerAttack] ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–ö–ª–∞—Å—Å: {characterStats.ClassName})");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞—Ç–∞–∫–∏
            if (isRangedAttack)
            {
                bool isMagicalAttack = (characterStats.ClassName == "Mage" || characterStats.ClassName == "Rogue");
                if (isMagicalAttack && manaSystem != null)
                {
                    string classType = characterStats.ClassName == "Mage" ? "–ú–∞–≥" : "–ù–µ–∫—Ä–æ–º–∞–Ω—Ç (Rogue)";
                    Debug.Log($"[PlayerAttack] üîÆ –ú–ê–ì–ò–ß–ï–°–ö–ê–Ø –¥–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞ ({classType}) - —Ç—Ä–∞—Ç–∏—Ç {manaCostPerShot} –º–∞–Ω—ã –∑–∞ –≤—ã—Å—Ç—Ä–µ–ª");
                }
                else
                {
                    Debug.Log($"[PlayerAttack] üèπ –§–ò–ó–ò–ß–ï–°–ö–ê–Ø –¥–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞ (–õ—É—á–Ω–∏–∫) - –ù–ï —Ç—Ä–∞—Ç–∏—Ç –º–∞–Ω—É (—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª—ã)");
                }
            }
            else
            {
                Debug.Log($"[PlayerAttack] ‚öîÔ∏è –ë–õ–ò–ñ–ù–Ø–Ø –∞—Ç–∞–∫–∞ - –ù–ï —Ç—Ä–∞—Ç–∏—Ç –º–∞–Ω—É");
            }
        }

        if (animator == null)
        {
            Debug.LogError("[PlayerAttack] Animator –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            enabled = false;
            return;
        }

        if (targetSystem == null)
        {
            Debug.LogWarning("[PlayerAttack] TargetSystem –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TargetSystem.");
        }

        if (actionPointsSystem == null)
        {
            Debug.LogWarning("[PlayerAttack] ActionPointsSystem –Ω–µ –Ω–∞–π–¥–µ–Ω! –ê—Ç–∞–∫–∏ –±—É–¥—É—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π AP.");
        }

        if (weaponManager == null)
        {
            Debug.LogWarning("[PlayerAttack] ClassWeaponManager –Ω–µ –Ω–∞–π–¥–µ–Ω! –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –æ—Ä—É–∂–∏—è –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–∞–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        attackStateHash = Animator.StringToHash("Base Layer.WarriorAttack");

        // –ê–í–¢–û–ù–ê–°–¢–†–û–ô–ö–ê –¥–∏—Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        Debug.Log($"[PlayerAttack] –í—ã–∑—ã–≤–∞–µ–º ConfigureClassSettings()...");
        ConfigureClassSettings();

        // –ê–í–¢–û–ü–û–ò–°–ö —Ç–æ—á–∫–∏ –æ—Ä—É–∂–∏—è –¥–ª—è —Å–ø–∞–≤–Ω–∞ —Å–Ω–∞—Ä—è–¥–æ–≤
        Debug.Log($"[PlayerAttack] –í—ã–∑—ã–≤–∞–µ–º FindWeaponTip()...");
        FindWeaponTip();

        // –ü–†–ò–ú–ï–ù–Ø–ï–ú —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ Animator
        Debug.Log($"[PlayerAttack] –í—ã–∑—ã–≤–∞–µ–º ApplyAnimationSpeed()...");
        ApplyAnimationSpeed();

        Debug.Log($"[PlayerAttack] ========== START –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {gameObject.name} ==========");
    }

    /// <summary>
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞—Ç–∞–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    /// </summary>
    private void ConfigureClassSettings()
    {
        Debug.Log($"[PlayerAttack] ConfigureClassSettings –≤—ã–∑–≤–∞–Ω –¥–ª—è {gameObject.name}");

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ScriptableObject
        CharacterAttackSettings settingsAsset = Resources.Load<CharacterAttackSettings>("CharacterAttackSettings");

        if (settingsAsset == null)
        {
            Debug.LogWarning($"[PlayerAttack] ‚ö†Ô∏è CharacterAttackSettings.asset –ù–ï –ù–ê–ô–î–ï–ù –≤ Resources!");
            Debug.LogWarning($"[PlayerAttack] –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: Tools ‚Üí Create Attack Settings Asset");
            Debug.LogWarning($"[PlayerAttack] –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –≤ Assets/Resources/CharacterAttackSettings.asset");
        }
        else
        {
            Debug.Log($"[PlayerAttack] ‚úÖ CharacterAttackSettings.asset –∑–∞–≥—Ä—É–∂–µ–Ω");

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            string className = PlayerPrefs.GetString("SelectedCharacterClass", "");
            Debug.Log($"[PlayerAttack] PlayerPrefs SelectedCharacterClass = '{className}'");

            if (!string.IsNullOrEmpty(className))
            {
                ClassAttackConfig config = settingsAsset.GetConfigForClass(className);
                Debug.Log($"[PlayerAttack] üîç Config –∏–∑ asset: Speed={config.attackAnimationSpeed}, Timing={config.attackHitTiming}, Damage={config.attackDamage}");
                ApplyConfig(config);
                Debug.Log($"[PlayerAttack] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ScriptableObject –¥–ª—è {className}");
                return;
            }
            else
            {
                Debug.LogWarning($"[PlayerAttack] ‚ö†Ô∏è SelectedCharacterClass –ø—É—Å—Ç –≤ PlayerPrefs!");
            }
        }

        // Fallback: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ (–µ—Å–ª–∏ ScriptableObject –Ω–µ –Ω–∞–π–¥–µ–Ω)
        Debug.Log($"[PlayerAttack] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞");
        string objectName = gameObject.name.ToLower();

        if (objectName.Contains("warrior"))
        {
            // –í–æ–∏–Ω: –±–ª–∏–∂–Ω–∏–π –±–æ–π, –º–µ—á
            attackRange = 3.0f;
            optimalAttackDistance = 1.8f;
            attackRotationOffset = 45f;
            attackDamage = 30f;
            Debug.Log("[PlayerAttack] ‚öîÔ∏è Warrior: Range=3m, Damage=30");
        }
        else if (objectName.Contains("archer"))
        {
            // –õ—É—á–Ω–∏–∫: –¥–∞–ª—å–Ω–∏–π –±–æ–π, –ª—É–∫
            attackRange = 50f;
            optimalAttackDistance = 10f;
            attackRotationOffset = 0f;
            attackDamage = 35f;
            isRangedAttack = true;
            projectileSpeed = 30f;
            LoadProjectilePrefab("ArrowProjectile");
            Debug.Log("[PlayerAttack] üèπ Archer: Range=50m, Damage=35");
        }
        else if (objectName.Contains("mage"))
        {
            // –ú–∞–≥: —Å—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, –º–∞–≥–∏—è
            attackRange = 20f;
            optimalAttackDistance = 5f;
            attackRotationOffset = 0f;
            attackDamage = 40f;
            isRangedAttack = true;
            projectileSpeed = 20f;
            attackAnimationSpeed = 3.0f; // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ!
            LoadProjectilePrefab("FireballProjectile");
            Debug.Log("[PlayerAttack] üîÆ Mage: Range=20m, Damage=40, AnimSpeed=3x");
        }
        else if (objectName.Contains("rogue"))
        {
            // –†–∞–∑–±–æ–π–Ω–∏–∫: —Å—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è, –ø–æ—Ö–∏—â–µ–Ω–∏–µ –¥—É—à–∏
            attackRange = 20f;
            optimalAttackDistance = 5f;
            attackRotationOffset = 0f; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ -30f, —Ç–µ–ø–µ—Ä—å 0f (—Å–º–æ—Ç—Ä–∏—Ç –ø—Ä—è–º–æ –Ω–∞ —Ü–µ–ª—å)
            attackDamage = 50f; // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω –∑–∞ –ø–æ—Ö–∏—â–µ–Ω–∏–µ –¥—É—à–∏
            isRangedAttack = true;
            projectileSpeed = 15f;
            LoadProjectilePrefab("SoulShardsProjectile");
            Debug.Log("[PlayerAttack] üíÄ Rogue: Range=20m, Damage=50");
        }
        else if (objectName.Contains("paladin"))
        {
            // –ü–∞–ª–∞–¥–∏–Ω: –±–ª–∏–∂–Ω–∏–π –±–æ–π, –º–µ—á
            attackRange = 3.0f;
            optimalAttackDistance = 1.8f;
            attackRotationOffset = 45f;
            attackDamage = 25f;
            Debug.Log("[PlayerAttack] üõ°Ô∏è Paladin: Range=3m, Damage=25");
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ ScriptableObject
    /// </summary>
    private void ApplyConfig(ClassAttackConfig config)
    {
        attackAnimationSpeed = config.attackAnimationSpeed;
        attackHitTiming = config.attackHitTiming;
        attackDamage = config.attackDamage;
        attackRange = config.attackRange;
        attackCooldown = config.attackCooldown;
        isRangedAttack = config.isRangedAttack;
        projectileSpeed = config.projectileSpeed;
        attackRotationOffset = config.attackRotationOffset;

        if (isRangedAttack && !string.IsNullOrEmpty(config.projectilePrefabName))
        {
            LoadProjectilePrefab(config.projectilePrefabName);
        }

        Debug.Log($"[PlayerAttack] Config applied: Speed={attackAnimationSpeed}x, Damage={attackDamage}, Range={attackRange}");
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞ –∏–∑ Resources –∏–ª–∏ Assets
    /// </summary>
    private void LoadProjectilePrefab(string prefabName)
    {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Resources
        projectilePrefab = Resources.Load<GameObject>($"Projectiles/{prefabName}");

        if (projectilePrefab == null)
        {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ Resources, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ Assets —á–µ—Ä–µ–∑ AssetDatabase (—Ç–æ–ª—å–∫–æ –≤ Editor)
#if UNITY_EDITOR
            string[] guids = UnityEditor.AssetDatabase.FindAssets($"{prefabName} t:Prefab");
            if (guids.Length > 0)
            {
                string path = UnityEditor.AssetDatabase.GUIDToAssetPath(guids[0]);
                projectilePrefab = UnityEditor.AssetDatabase.LoadAssetAtPath<GameObject>(path);
                Debug.Log($"[PlayerAttack] ‚úÖ –ü—Ä–µ—Ñ–∞–± –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Assets: {path}");
            }
            else
            {
                Debug.LogWarning($"[PlayerAttack] ‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± {prefabName} –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ—Ñ–∞–±—ã —á–µ—Ä–µ–∑ Tools ‚Üí Projectiles");
            }
#else
            Debug.LogWarning($"[PlayerAttack] ‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± {prefabName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/Projectiles/");
#endif
        }
        else
        {
            Debug.Log($"[PlayerAttack] ‚úÖ –ü—Ä–µ—Ñ–∞–± –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Resources: {prefabName}");
        }
    }

    /// <summary>
    /// –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –æ—Ä—É–∂–∏—è (–∫–æ–Ω—á–∏–∫ –ª—É–∫–∞/–ø–æ—Å–æ—Ö–∞) –¥–ª—è —Å–ø–∞–≤–Ω–∞ —Å–Ω–∞—Ä—è–¥–æ–≤
    /// </summary>
    private void FindWeaponTip()
    {
        // –ï—Å–ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (weaponTipTransform != null)
        {
            Debug.Log($"[PlayerAttack] ‚úÖ –¢–æ—á–∫–∞ –æ—Ä—É–∂–∏—è —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: {weaponTipTransform.name}");
            return;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø–æ –∏–º–µ–Ω–∏
        // –û–±—â–∏–µ –∏–º–µ–Ω–∞ –¥–ª—è —Ç–æ—á–µ–∫ –æ—Ä—É–∂–∏—è –≤ Mixamo –º–æ–¥–µ–ª—è—Ö:
        string[] weaponTipNames = new string[]
        {
            "WeaponTip",           // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –≤—Ä—É—á–Ω—É—é
            "Weapon_Tip",
            "RightHandIndex3",     // –ö–æ–Ω—á–∏–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞ –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏
            "mixamorig:RightHandIndex3",
            "RightHandIndex4",     // –°–∞–º—ã–π –∫–æ–Ω—á–∏–∫ –ø–∞–ª—å—Ü–∞
            "mixamorig:RightHandIndex4",
            "RightHand",           // –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
            "mixamorig:RightHand"
        };

        Transform[] allTransforms = GetComponentsInChildren<Transform>();
        foreach (string tipName in weaponTipNames)
        {
            foreach (Transform t in allTransforms)
            {
                if (t.name.Contains(tipName))
                {
                    weaponTipTransform = t;
                    Debug.Log($"[PlayerAttack] ‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫: –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –æ—Ä—É–∂–∏—è '{t.name}'");
                    return;
                }
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ + —Å–º–µ—â–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥
        Debug.LogWarning("[PlayerAttack] ‚ö†Ô∏è –¢–æ—á–∫–∞ –æ—Ä—É–∂–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –°–Ω–∞—Ä—è–¥—ã –±—É–¥—É—Ç –ª–µ—Ç–µ—Ç—å –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –°–æ–∑–¥–∞–π—Ç–µ GameObject 'WeaponTip' –Ω–∞ –∫–æ–Ω—á–∏–∫–µ –æ—Ä—É–∂–∏—è.");
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∫ Animator
    /// </summary>
    private void ApplyAnimationSpeed()
    {
        if (animator == null)
        {
            Debug.LogError($"[PlayerAttack] ‚ùå Animator is NULL for {gameObject.name}!");
            return;
        }

        Debug.Log($"[PlayerAttack] üéØ ApplyAnimationSpeed called for {gameObject.name}: speed={attackAnimationSpeed}x");

        // –†–ï–®–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º animator.speed –Ω–∞–ø—Ä—è–º—É—é (–ü–†–û–°–¢–û–ï, –†–ê–ë–û–¢–ê–ï–¢ –í–°–ï–ì–î–ê)
        // –í–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –Ω–æ –¥–ª—è –∞—Ç–∞–∫–∏ —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ
        animator.speed = attackAnimationSpeed;
        Debug.Log($"‚úÖ [PlayerAttack] Animator.speed —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {animator.speed}x");

        // –†–ï–®–ï–ù–ò–ï 2: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä AttackSpeed
        if (animator.parameters != null)
        {
            bool hasAttackSpeedParam = false;
            foreach (var param in animator.parameters)
            {
                if (param.name == "AttackSpeed")
                {
                    hasAttackSpeedParam = true;
                    animator.SetFloat("AttackSpeed", attackAnimationSpeed);
                    Debug.Log($"‚úÖ [PlayerAttack] –ü–∞—Ä–∞–º–µ—Ç—Ä AttackSpeed —Ç–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {attackAnimationSpeed}x");
                    break;
                }
            }

            if (!hasAttackSpeedParam)
            {
                Debug.LogWarning($"‚ö† [PlayerAttack] –ü–∞—Ä–∞–º–µ—Ç—Ä 'AttackSpeed' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ Animator –¥–ª—è {gameObject.name}");
                Debug.LogWarning("   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è animator.speed –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ");
            }
        }
    }


    void Update()
    {
        // –ë–õ–û–ö–ò–†–û–í–ö–ê ROTATION: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∫ –≤—Ä–∞–≥—É
        if (isRotationLocked)
        {
            transform.rotation = lockedRotation;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏
        CheckAttackState();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ª–µ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏
        if (Input.GetMouseButtonDown(0))
        {
            TryAttack();
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏
    /// </summary>
    private void CheckAttackState()
    {
        if (animator == null)
            return;

        // –ï—Å–ª–∏ –Ω–µ –∞—Ç–∞–∫—É–µ–º - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if (!isAttacking)
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Base Layer (0)
        AnimatorStateInfo stateInfo = animator.GetCurrentAnimatorStateInfo(0);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ç–∞–∫–∏
        bool isPlayingAttack = stateInfo.IsTag("Attack") ||
                              stateInfo.IsName("Attack") ||
                              stateInfo.IsName("WarriorAttack") ||
                              stateInfo.IsName("MageAttack") ||
                              stateInfo.IsName("ArcherAttack") ||
                              stateInfo.IsName("RogueAttack");

        // –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê: 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        float timeSinceAttack = Time.time - lastAttackTime;
        float minAttackDuration = 1.0f; // –í–°–ï–ì–î–ê 1 —Å–µ–∫—É–Ω–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏

        // –ü—Ä–æ—à–ª–∞ 1 —Å–µ–∫—É–Ω–¥–∞ —Å –Ω–∞—á–∞–ª–∞ –∞—Ç–∞–∫–∏?
        if (timeSinceAttack >= minAttackDuration)
        {
            isAttacking = false;

            // –í–ö–õ–Æ–ß–ê–ï–ú –û–ë–†–ê–¢–ù–û CharacterController - –ø–æ–∑–≤–æ–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            if (characterController != null && !characterController.enabled)
            {
                characterController.enabled = true;
                Debug.Log("[PlayerAttack] ‚úÖ CharacterController –í–ö–õ–Æ–ß–ï–ù - –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è");
            }

            // –†–ê–ó–ë–õ–û–ö–ò–†–£–ï–ú rotation - –º–æ–∂–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è
            isRotationLocked = false;
            Debug.Log("[PlayerAttack] üîì Rotation —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");

            // –û–¢–ö–õ–Æ–ß–ê–ï–ú –≠–§–§–ï–ö–¢ –°–í–ï–ß–ï–ù–ò–Ø (–∞—É—Ä–∞ –∏—Å—á–µ–∑–∞–µ—Ç)
            if (weaponManager != null)
            {
                weaponManager.DeactivateWeaponGlow();
            }

            Debug.Log($"[PlayerAttack] ‚è±Ô∏è –ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ—Å–ª–µ {timeSinceAttack:F2}s (–º–∏–Ω–∏–º—É–º {minAttackDuration}s) - –¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å
    /// </summary>
    private void TryAttack()
    {
        // –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–∏
        if (targetSystem == null || !targetSystem.HasTarget())
        {
            Debug.Log("[PlayerAttack] –ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏");
            return;
        }

        Enemy target = targetSystem.GetCurrentTarget();
        if (target == null || !target.IsAlive())
        {
            Debug.Log("[PlayerAttack] –¶–µ–ª—å –º–µ—Ä—Ç–≤–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        // –ü–†–û–í–ï–†–Ø–ï–ú –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ —Ü–µ–ª–∏
        float distanceToTarget = Vector3.Distance(transform.position, target.transform.position);
        if (distanceToTarget > attackRange)
        {
            Debug.Log($"[PlayerAttack] –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ: {distanceToTarget:F1}m (–º–∞–∫—Å: {attackRange}m)");
            return;
        }

        // –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞–ª–∏—á–∏–µ –æ—á–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è
        if (actionPointsSystem != null && !actionPointsSystem.HasEnoughPointsForAttack())
        {
            Debug.Log($"[PlayerAttack] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞—Ç–∞–∫–∏! –ù—É–∂–Ω–æ {actionPointsSystem.GetAttackCost()}, –¥–æ—Å—Ç—É–ø–Ω–æ {actionPointsSystem.GetCurrentPoints()}");
            return;
        }

        // –ü–†–û–í–ï–†–Ø–ï–ú –Ω–∞–ª–∏—á–∏–µ –º–∞–Ω—ã –¥–ª—è –ú–ê–ì–ò–ß–ï–°–ö–ò–• –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫ (Mage –∏ Rogue/–ù–µ–∫—Ä–æ–º–∞–Ω—Ç)
        // –õ—É—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä–µ–ª–∞–º–∏ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç –º–∞–Ω—ã
        bool isMagicalAttack = isRangedAttack && characterStats != null &&
                               (characterStats.ClassName == "Mage" || characterStats.ClassName == "Rogue");
        if (isMagicalAttack && manaSystem != null)
        {
            if (manaSystem.CurrentMana < manaCostPerShot)
            {
                Debug.Log($"[PlayerAttack] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã –¥–ª—è –º–∞–≥–∏—á–µ—Å–∫–æ–π –∞—Ç–∞–∫–∏! –ù—É–∂–Ω–æ {manaCostPerShot}, –¥–æ—Å—Ç—É–ø–Ω–æ {manaSystem.CurrentMana:F0}");
                return;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if (Time.time - lastAttackTime < attackCooldown)
        {
            Debug.Log("[PlayerAttack] –ö—É–ª–¥–∞—É–Ω –∞—Ç–∞–∫–∏ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –∞—Ç–∞–∫—É–µ–º —Å–µ–π—á–∞—Å
        if (isAttacking)
        {
            Debug.Log("[PlayerAttack] –£–∂–µ –∞—Ç–∞–∫—É–µ–º");
            return;
        }

        // –¢–†–ê–¢–ò–ú –æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –∞—Ç–∞–∫–æ–π
        if (actionPointsSystem != null)
        {
            if (!actionPointsSystem.TrySpendActionPoints(actionPointsSystem.GetAttackCost()))
            {
                Debug.LogWarning("[PlayerAttack] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è!");
                return;
            }
        }

        // –¢–†–ê–¢–ò–ú –º–∞–Ω—É –¥–ª—è –ú–ê–ì–ò–ß–ï–°–ö–ò–• –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ isMagicalAttack)
        if (isMagicalAttack && manaSystem != null)
        {
            if (!manaSystem.SpendMana(manaCostPerShot))
            {
                Debug.LogWarning("[PlayerAttack] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–∞–Ω—É!");
                return;
            }
            Debug.Log($"[PlayerAttack] üíß –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {manaCostPerShot} –º–∞–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: {manaSystem.CurrentMana:F0}/{manaSystem.MaxMana:F0}");
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
        PerformAttack(target);
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ç–∞–∫—É
    /// </summary>
    private void PerformAttack(Enemy target)
    {
        // 0. –ê–ö–¢–ò–í–ò–†–£–ï–ú –≠–§–§–ï–ö–¢ –°–í–ï–ß–ï–ù–ò–Ø –û–†–£–ñ–ò–Ø (Lineage 2 style - —Å–∏–Ω—è—è –∞—É—Ä–∞)
        if (weaponManager != null)
        {
            weaponManager.ActivateWeaponGlow();
        }

        // 1. –ü–û–í–û–†–ê–ß–ò–í–ê–ï–ú –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ —Ü–µ–ª–∏ (–°–ù–ê–ß–ê–õ–ê –ø–æ–≤–æ—Ä–æ—Ç!)
        Vector3 directionToTarget = (target.transform.position - transform.position).normalized;
        directionToTarget.y = 0; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é

        if (directionToTarget.magnitude > 0.01f) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä
        {
            Quaternion targetRotation = Quaternion.LookRotation(directionToTarget);

            // –î–û–ë–ê–í–õ–Ø–ï–ú –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –±—å–µ—Ç –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)
            targetRotation *= Quaternion.Euler(0, attackRotationOffset, 0);

            transform.rotation = targetRotation;

            // –ë–õ–û–ö–ò–†–£–ï–ú rotation –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
            lockedRotation = targetRotation;
            isRotationLocked = true;

            Debug.Log($"[PlayerAttack] üîí –ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–≤–µ—Ä–Ω—É—Ç –∫ —Ü–µ–ª–∏: {target.GetEnemyName()} (—Å–º–µ—â–µ–Ω–∏–µ {attackRotationOffset}¬∞) - rotation –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
        }

        // 2. –û–¢–ö–õ–Æ–ß–ê–ï–ú CharacterController —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
        if (characterController != null)
        {
            characterController.enabled = false;
            Debug.Log("[PlayerAttack] CharacterController –í–´–ö–õ–Æ–ß–ï–ù - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        // 3. –°–û–•–†–ê–ù–Ø–ï–ú —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏
        currentAttackTarget = target;
        Debug.Log($"[PlayerAttack] –ê—Ç–∞–∫–∞ –Ω–∞ {target.GetEnemyName()}! –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");

        // 4. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏
        if (animator != null)
        {
            animator.SetTrigger("Attack");
            // animator.speed —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ApplyAnimationSpeed() –≤ Start()
            Debug.Log($"[PlayerAttack] –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ (animator.speed = {animator.speed}x)");
        }

        // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        StartCoroutine(WaitForAttackAnimationEnd());

        // 6. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏
        lastAttackTime = Time.time;

        // 7. –§–ª–∞–≥ —á—Ç–æ –∞—Ç–∞–∫—É–µ–º (–±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ CheckAttackState)
        isAttacking = true;
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞: –∂–¥—ë—Ç 1 —Å–µ–∫—É–Ω–¥—É –∏ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω/—Å–æ–∑–¥–∞—ë—Ç —Å–Ω–∞—Ä—è–¥
    /// </summary>
    private System.Collections.IEnumerator WaitForAttackAnimationEnd()
    {
        // –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï: –ñ–¥—ë–º —Ä–æ–≤–Ω–æ 1 —Å–µ–∫—É–Ω–¥—É
        float waitTime = 1.0f;

        Debug.Log($"[PlayerAttack] ‚è±Ô∏è –ñ–¥—ë–º {waitTime}s –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞/—É—Ä–æ–Ω–∞...");

        yield return new WaitForSeconds(waitTime);

        Debug.Log($"[PlayerAttack] ‚úÖ –ü—Ä–æ—à–ª–∞ {waitTime}s - —Å–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥/—É—Ä–æ–Ω");

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥
        PerformDamageOrSpawnProjectile();
    }

    /// <summary>
    /// –ù–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∞—Ä—è–¥ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Ü–µ –∞–Ω–∏–º–∞—Ü–∏–∏)
    /// </summary>
    private void PerformDamageOrSpawnProjectile()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∂–∏–≤–∞
        if (currentAttackTarget == null || !currentAttackTarget.IsAlive())
        {
            Debug.LogWarning("[PlayerAttack] ‚ö†Ô∏è –¶–µ–ª—å —É–º–µ—Ä–ª–∞ –∏–ª–∏ –∏—Å—á–µ–∑–ª–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ —É–¥–∞—Ä–∞!");
            currentAttackTarget = null;
            return;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (Strength/Intelligence/Luck)
        float finalDamage = CalculateFinalDamage();

        // –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞ - —Å–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥
        if (isRangedAttack && projectilePrefab != null)
        {
            SpawnProjectile(currentAttackTarget, finalDamage);
            Debug.Log($"[PlayerAttack] üéØ –°–Ω–∞—Ä—è–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è {currentAttackTarget.GetEnemyName()}");
        }
        // –ë–ª–∏–∂–Ω—è—è –∞—Ç–∞–∫–∞ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Å—Ä–∞–∑—É
        else
        {
            // –í–ê–ñ–ù–û: –í –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –ù–ï –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω NetworkPlayer –ª–æ–∫–∞–ª—å–Ω–æ!
            // –°–µ—Ä–≤–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —É—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–±—ã—Ç–∏–µ enemy_damaged_by_server
            NetworkPlayer networkTarget = currentAttackTarget.GetComponent<NetworkPlayer>();
            if (networkTarget == null)
            {
                // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π NPC –≤—Ä–∞–≥ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
                currentAttackTarget.TakeDamage(finalDamage);
                Debug.Log($"[PlayerAttack] ‚öîÔ∏è –£—Ä–æ–Ω {finalDamage:F0} –Ω–∞–Ω–µ—Å—ë–Ω NPC {currentAttackTarget.GetEnemyName()}");
            }
            else
            {
                // –≠—Ç–æ NetworkPlayer - —É—Ä–æ–Ω –Ω–∞–Ω–µ—Å—ë—Ç —Å–µ—Ä–≤–µ—Ä
                Debug.Log($"[PlayerAttack] üåê –ê—Ç–∞–∫–∞ –Ω–∞ NetworkPlayer {networkTarget.username} - –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        // –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        NetworkCombatSync combatSync = GetComponent<NetworkCombatSync>();
        if (combatSync != null)
        {
            string attackType = isRangedAttack ? "ranged" : "melee";
            combatSync.SendAttack(currentAttackTarget.gameObject, finalDamage, attackType);
        }

        // –û—á–∏—â–∞–µ–º —Ü–µ–ª—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        currentAttackTarget = null;
    }

    /// <summary>
    /// –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ —Å —É—á–µ—Ç–æ–º SPECIAL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    /// </summary>
    private float CalculateFinalDamage()
    {
        float baseDamage = attackDamage;
        float finalDamage = baseDamage;

        if (characterStats != null)
        {
            // –§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω (–±–ª–∏–∂–Ω–∏–π –±–æ–π) - Strength
            if (!isRangedAttack)
            {
                finalDamage = characterStats.CalculatePhysicalDamage(baseDamage);
            }
            // –ú–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω (–¥–∞–ª—å–Ω–∏–π –±–æ–π) - Intelligence
            else
            {
                finalDamage = characterStats.CalculateMagicalDamage(baseDamage);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ (Luck)
            bool isCrit = characterStats.RollCriticalHit();
            if (isCrit)
            {
                finalDamage = characterStats.ApplyCriticalDamage(finalDamage);
                Debug.Log($"[PlayerAttack] ‚òÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –£—Ä–æ–Ω x{characterStats.Formulas.critDamageMultiplier}");
            }
        }

        return finalDamage;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–Ω–∞—Ä—è–¥ (—Å—Ç—Ä–µ–ª–∞, –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä, –æ—Å–∫–æ–ª–∫–∏ –¥—É—à–∏)
    /// –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Animation Event OnAttackHit()
    /// </summary>
    private void SpawnProjectile(Enemy target, float damage)
    {
        // –¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ —Å–Ω–∞—Ä—è–¥–∞
        Vector3 spawnPosition;

        if (weaponTipTransform != null)
        {
            // –í–ê–†–ò–ê–ù–¢ 1: –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ –æ—Ä—É–∂–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            spawnPosition = weaponTipTransform.position;
            Debug.Log($"[PlayerAttack] üéØ –°–ø–∞–≤–Ω –æ—Ç –æ—Ä—É–∂–∏—è: {weaponTipTransform.name} at {spawnPosition}");
        }
        else
        {
            // –í–ê–†–ò–ê–ù–¢ 2: –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–∫–∏ –æ—Ä—É–∂–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ + —Å–º–µ—â–µ–Ω–∏–µ
            spawnPosition = transform.position + transform.forward * 0.5f + Vector3.up * 1.2f;
            Debug.Log($"[PlayerAttack] üéØ –°–ø–∞–≤–Ω –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–µ—Ç WeaponTip): {spawnPosition}");
        }

        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ (–∫ —Ü–µ–Ω—Ç—Ä—É –≤—Ä–∞–≥–∞)
        Vector3 targetPosition = target.transform.position + Vector3.up * 1.0f; // –¶–µ–Ω—Ç—Ä –≤—Ä–∞–≥–∞
        Vector3 direction = (targetPosition - spawnPosition).normalized;

        // –°–æ–∑–¥–∞–µ–º —Å–Ω–∞—Ä—è–¥
        GameObject projectileObj = Instantiate(projectilePrefab, spawnPosition, Quaternion.identity);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–Ω–∞—Ä—è–¥
        Projectile projectile = projectileObj.GetComponent<Projectile>();
        if (projectile != null)
        {
            // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º this.gameObject –∫–∞–∫ owner —á—Ç–æ–±—ã —Å–Ω–∞—Ä—è–¥ –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ —Å–≤–æ–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            projectile.Initialize(target.transform, damage, direction, this.gameObject);
            Debug.Log($"[PlayerAttack] ‚úÖ –°–Ω–∞—Ä—è–¥ —Å–æ–∑–¥–∞–Ω: {projectilePrefab.name} ‚Üí {target.GetEnemyName()} (–£—Ä–æ–Ω: {damage:F0})");
        }
        else
        {
            Debug.LogError("[PlayerAttack] ‚ùå –£ –ø—Ä–µ—Ñ–∞–±–∞ —Å–Ω–∞—Ä—è–¥–∞ –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Projectile!");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞—Ç–∞–∫—É–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–µ–π—á–∞—Å
    /// </summary>
    public bool IsAttacking()
    {
        return isAttacking;
    }

    /// <summary>
    /// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–∏–∑–º–æ –¥–ª—è –¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
    /// </summary>
    private void OnDrawGizmosSelected()
    {
        // –ö—Ä–∞—Å–Ω–∞—è —Å—Ñ–µ—Ä–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, attackRange);

        // –ó–µ–ª–µ–Ω–∞—è —Å—Ñ–µ—Ä–∞ - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —É–¥–∞—Ä–∞
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, optimalAttackDistance);

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–Ω–∏—é
        if (targetSystem != null && targetSystem.HasTarget())
        {
            Enemy target = targetSystem.GetCurrentTarget();
            if (target != null)
            {
                float distance = Vector3.Distance(transform.position, target.transform.position);

                // –¶–≤–µ—Ç –ª–∏–Ω–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                if (distance <= optimalAttackDistance)
                {
                    Gizmos.color = Color.green; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ
                }
                else if (distance <= attackRange)
                {
                    Gizmos.color = Color.yellow; // –í —Ä–∞–¥–∏—É—Å–µ, –Ω–æ –¥–∞–ª–µ–∫–æ
                }
                else
                {
                    Gizmos.color = Color.red; // –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
                }

                Gizmos.DrawLine(transform.position, target.transform.position);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
#if UNITY_EDITOR
                UnityEditor.Handles.Label(
                    (transform.position + target.transform.position) / 2f,
                    $"{distance:F2}m"
                );
#endif
            }
        }
    }

    // ============================================================
    // ANIMATION EVENT METHODS
    // ============================================================

    /// <summary>
    /// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Animation Event –≤ –º–æ–º–µ–Ω—Ç —É–¥–∞—Ä–∞/–≤—ã—Å—Ç—Ä–µ–ª–∞
    /// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–∞–∫ Event –≤ –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏!
    /// </summary>
    public void OnAttackHit()
    {
        Debug.Log("[PlayerAttack] üí• Animation Event: OnAttackHit –≤—ã–∑–≤–∞–Ω!");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∂–∏–≤–∞
        if (currentAttackTarget == null || !currentAttackTarget.IsAlive())
        {
            Debug.LogWarning("[PlayerAttack] ‚ö†Ô∏è –¶–µ–ª—å —É–º–µ—Ä–ª–∞ –∏–ª–∏ –∏—Å—á–µ–∑–ª–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ —É–¥–∞—Ä–∞!");
            currentAttackTarget = null;
            return;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (Strength/Intelligence/Luck)
        float finalDamage = CalculateFinalDamage();

        // –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞ - —Å–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥
        if (isRangedAttack && projectilePrefab != null)
        {
            SpawnProjectile(currentAttackTarget, finalDamage);
            Debug.Log($"[PlayerAttack] üéØ –°–Ω–∞—Ä—è–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è {currentAttackTarget.GetEnemyName()}");
        }
        // –ë–ª–∏–∂–Ω—è—è –∞—Ç–∞–∫–∞ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω —Å—Ä–∞–∑—É
        else
        {
            // –í–ê–ñ–ù–û: –í –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ –ù–ï –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω NetworkPlayer –ª–æ–∫–∞–ª—å–Ω–æ!
            // –°–µ—Ä–≤–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —É—Ä–æ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–±—ã—Ç–∏–µ enemy_damaged_by_server
            NetworkPlayer networkTarget = currentAttackTarget.GetComponent<NetworkPlayer>();
            if (networkTarget == null)
            {
                // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π NPC –≤—Ä–∞–≥ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
                currentAttackTarget.TakeDamage(finalDamage);
                Debug.Log($"[PlayerAttack] ‚öîÔ∏è –£—Ä–æ–Ω {finalDamage:F0} –Ω–∞–Ω–µ—Å—ë–Ω NPC {currentAttackTarget.GetEnemyName()}");
            }
            else
            {
                // –≠—Ç–æ NetworkPlayer - —É—Ä–æ–Ω –Ω–∞–Ω–µ—Å—ë—Ç —Å–µ—Ä–≤–µ—Ä
                Debug.Log($"[PlayerAttack] üåê –ê—Ç–∞–∫–∞ –Ω–∞ NetworkPlayer {networkTarget.username} - –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            }
        }

        // –ú–£–õ–¨–¢–ò–ü–õ–ï–ï–†: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç–∞–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        NetworkCombatSync combatSync = GetComponent<NetworkCombatSync>();
        if (combatSync != null)
        {
            string attackType = isRangedAttack ? "ranged" : "melee";
            combatSync.SendAttack(currentAttackTarget.gameObject, finalDamage, attackType);
        }

        // –û—á–∏—â–∞–µ–º —Ü–µ–ª—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        currentAttackTarget = null;
    }

    /// <summary>
    /// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏
    /// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ OnAttackEnd –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ö–û–ù–¶–ï –∞–Ω–∏–º–∞—Ü–∏–∏
    /// </summary>
    public void OnAttackEnd()
    {
        Debug.Log("[PlayerAttack] Animation Event: OnAttackEnd –≤—ã–∑–≤–∞–Ω!");
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ç–∞–∫–∏
    }
}
