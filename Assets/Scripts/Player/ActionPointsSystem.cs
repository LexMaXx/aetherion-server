using UnityEngine;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è (Action Points)
/// - –ú–∞–∫—Å–∏–º—É–º 10 –æ—á–∫–æ–≤
/// - –ê—Ç–∞–∫–∞ —Å—Ç–æ–∏—Ç 4 –æ—á–∫–∞
/// - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
/// - –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ ~10 —Å–µ–∫—É–Ω–¥
/// </summary>
public class ActionPointsSystem : MonoBehaviour
{
    [Header("Action Points Settings")]
    [SerializeField] private int maxActionPoints = 10;
    [SerializeField] private int attackCost = 4;
    [SerializeField] private float regenerationTime = 10f; // –í—Ä–µ–º—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)

    private int currentActionPoints;
    private float currentActionPointsFloat; // –î—Ä–æ–±–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    private float regenerationRate; // –û—á–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    private float regenerationTimer = 0f;
    private bool isRegenerating = false;

    // –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    private MixamoPlayerController playerController;
    private ActionPointsUI actionPointsUI;
    private CharacterStats characterStats; // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SPECIAL (Agility)

    // –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ (–¥–ª—è UI)
    public delegate void ActionPointsChangedHandler(int current, int max);
    public event ActionPointsChangedHandler OnActionPointsChanged;

    void Start()
    {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats (Agility ‚Üí AP)
        characterStats = GetComponent<CharacterStats>();
        if (characterStats != null)
        {
            characterStats.OnStatsChanged += UpdateAPFromStats;
            UpdateAPFromStats();
            Debug.Log("[ActionPoints] ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç CharacterStats - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            currentActionPoints = maxActionPoints;
            currentActionPointsFloat = maxActionPoints;
            regenerationRate = maxActionPoints / regenerationTime;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏
        playerController = GetComponent<MixamoPlayerController>();
        if (playerController == null)
        {
            Debug.LogWarning("[ActionPoints] MixamoPlayerController –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        }

        // –ù–∞—Ö–æ–¥–∏–º UI
        actionPointsUI = FindFirstObjectByType<ActionPointsUI>();
        if (actionPointsUI != null)
        {
            actionPointsUI.Initialize(this);
        }

        Debug.Log($"[ActionPoints] –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {currentActionPoints}/{maxActionPoints} AP");
        Debug.Log($"[ActionPoints] –°–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {regenerationRate:F2} AP/—Å–µ–∫");

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        OnActionPointsChanged?.Invoke(currentActionPoints, maxActionPoints);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å AP –Ω–∞ –æ—Å–Ω–æ–≤–µ Agility
    /// </summary>
    private void UpdateAPFromStats()
    {
        if (characterStats == null) return;

        maxActionPoints = Mathf.RoundToInt(characterStats.MaxActionPoints);
        regenerationRate = characterStats.ActionPointsRegen;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AP –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        currentActionPoints = Mathf.Min(currentActionPoints, maxActionPoints);
        currentActionPointsFloat = currentActionPoints;

        OnActionPointsChanged?.Invoke(currentActionPoints, maxActionPoints);
        Debug.Log($"[ActionPoints] –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Stats: Max={maxActionPoints} AP, Regen={regenerationRate:F2} AP/—Å–µ–∫ (Agility: {characterStats.agility})");
    }

    private void OnDestroy()
    {
        if (characterStats != null)
        {
            characterStats.OnStatsChanged -= UpdateAPFromStats;
        }
    }

    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ –º–µ—Å—Ç–µ
        bool isStanding = IsPlayerStanding();

        // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
        if (isStanding && currentActionPoints < maxActionPoints)
        {
            if (!isRegenerating)
            {
                isRegenerating = true;
                regenerationTimer = 0f;
                Debug.Log("[ActionPoints] üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è AP (–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–æ–∏—Ç)");
            }

            regenerationTimer += Time.deltaTime;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∫ float —Å—á—ë—Ç—á–∏–∫—É
            currentActionPointsFloat += regenerationRate * Time.deltaTime;
            currentActionPointsFloat = Mathf.Min(currentActionPointsFloat, maxActionPoints);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Å—á—ë—Ç—á–∏–∫
            int oldPoints = currentActionPoints;
            currentActionPoints = Mathf.FloorToInt(currentActionPointsFloat);

            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—á–∫–æ–≤
            if (currentActionPoints != oldPoints)
            {
                Debug.Log($"[ActionPoints] ‚¨ÜÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {currentActionPoints}/{maxActionPoints} AP (float: {currentActionPointsFloat:F2})");
                OnActionPointsChanged?.Invoke(currentActionPoints, maxActionPoints);
            }

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if (currentActionPoints >= maxActionPoints)
            {
                currentActionPoints = maxActionPoints;
                currentActionPointsFloat = maxActionPoints;
                isRegenerating = false;
                Debug.Log("[ActionPoints] ‚úÖ AP –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
            }
        }
        else if (!isStanding && isRegenerating)
        {
            // –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—á–∞–ª –±–µ–≥–∞—Ç—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            isRegenerating = false;
            Debug.Log("[ActionPoints] ‚è∏Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–µ—Ä—Å–æ–Ω–∞–∂ –±–µ–≥–∞–µ—Ç)");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ –º–µ—Å—Ç–µ
    /// </summary>
    private bool IsPlayerStanding()
    {
        if (playerController == null)
            return true; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å—Ç–æ–∏—Ç

        // –ü–†–û–í–ï–†–ö–ê –í–í–û–î–ê: –°–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à–∏ –¥–≤–∏–∂–µ–Ω–∏—è - –æ–Ω —Å—Ç–æ–∏—Ç
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");
        bool hasMovementInput = Mathf.Abs(horizontal) > 0.01f || Mathf.Abs(vertical) > 0.01f;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–≤–æ–¥ - –ø–µ—Ä—Å–æ–Ω–∞–∂ –±–µ–∂–∏—Ç
        if (hasMovementInput)
        {
            return false;
        }

        // –ù–µ—Ç –≤–≤–æ–¥–∞ - –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–æ–∏—Ç
        return true;
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –æ—á–∫–∏ –Ω–∞ –∞—Ç–∞–∫—É
    /// </summary>
    public bool TrySpendActionPoints(int cost)
    {
        if (currentActionPoints >= cost)
        {
            currentActionPoints -= cost;
            currentActionPointsFloat = currentActionPoints; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º float —Å—á—ë—Ç—á–∏–∫
            Debug.Log($"[ActionPoints] üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {cost} AP. –û—Å—Ç–∞–ª–æ—Å—å: {currentActionPoints}/{maxActionPoints}");

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ç—Ä–∞—Ç–µ
            isRegenerating = false;
            regenerationTimer = 0f;

            OnActionPointsChanged?.Invoke(currentActionPoints, maxActionPoints);
            return true;
        }
        else
        {
            Debug.Log($"[ActionPoints] ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ AP! –ù—É–∂–Ω–æ {cost}, –¥–æ—Å—Ç—É–ø–Ω–æ {currentActionPoints}");
            return false;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤ –¥–ª—è –∞—Ç–∞–∫–∏
    /// </summary>
    public bool HasEnoughPointsForAttack()
    {
        return currentActionPoints >= attackCost;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
    /// </summary>
    public int GetCurrentPoints()
    {
        return currentActionPoints;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
    /// </summary>
    public int GetMaxPoints()
    {
        return maxActionPoints;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ç–∞–∫–∏
    /// </summary>
    public int GetAttackCost()
    {
        return attackCost;
    }

    /// <summary>
    /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ–π—á–∞—Å
    /// </summary>
    public bool IsRegenerating()
    {
        return isRegenerating;
    }
}
