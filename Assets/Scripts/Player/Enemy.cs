using UnityEngine;

/// <summary>
/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—Ä–∞–≥–∞ - –º–∞—Ä–∫–∏—Ä—É–µ—Ç GameObject –∫–∞–∫ –≤—Ä–∞–≥–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
/// </summary>
public class Enemy : MonoBehaviour
{
    [Header("Enemy Info")]
    [SerializeField] private string enemyName = "Enemy";
    [SerializeField] private float maxHealth = 100f;

    [Header("Hit Effect")]
    [SerializeField] private GameObject hitEffectPrefab;

    private float currentHealth;
    private bool isDead = false;

    // –°–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
    public delegate void DeathHandler(Enemy enemy);
    public event DeathHandler OnDeath;

    void Start()
    {
        currentHealth = maxHealth;

        // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å —Ç–µ–≥ Enemy
        if (!gameObject.CompareTag("Enemy"))
        {
            Debug.LogWarning($"[Enemy] GameObject {gameObject.name} –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–≥ 'Enemy'. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥ –≤ Unity Editor!");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º Hit Effect –∏–∑ Resources –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ Inspector
        if (hitEffectPrefab == null)
        {
            hitEffectPrefab = Resources.Load<GameObject>("Effects/HitEffect");
            if (hitEffectPrefab == null)
            {
                Debug.LogWarning($"[Enemy] Hit Effect prefab –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ HitEffect –≤ Assets/Resources/Effects/");
            }
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
        FogOfWar fogOfWar = FindObjectOfType<FogOfWar>();
        if (fogOfWar != null)
        {
            fogOfWar.RegisterEnemy(this);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–Ω
    /// </summary>
    public void TakeDamage(float damage)
    {
        if (isDead)
            return;

        currentHealth -= damage;
        Debug.Log($"[Enemy] {enemyName} –ø–æ–ª—É—á–∏–ª {damage} —É—Ä–æ–Ω–∞. HP: {currentHealth}/{maxHealth}");

        // –°–ü–ê–í–ù –≠–§–§–ï–ö–¢–ê –ü–û–ü–ê–î–ê–ù–ò–Ø
        SpawnHitEffect();

        if (currentHealth <= 0)
        {
            Die();
        }
    }

    /// <summary>
    /// –°–ø–∞–≤–Ω –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    /// </summary>
    private void SpawnHitEffect()
    {
        if (hitEffectPrefab == null)
            return;

        // –ü–æ–∑–∏—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ - —Ü–µ–Ω—Ç—Ä –º–æ–¥–µ–ª–∏ –≤—Ä–∞–≥–∞
        Vector3 hitPosition = transform.position + Vector3.up * 1.0f; // –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ü–µ–Ω—Ç—Ä–∞

        // –°–ø–∞–≤–Ω–∏–º —ç—Ñ—Ñ–µ–∫—Ç
        GameObject effect = Instantiate(hitEffectPrefab, hitPosition, Quaternion.identity);

        Debug.Log($"[Enemy] üí• –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ {hitPosition}");
    }

    /// <summary>
    /// –°–º–µ—Ä—Ç—å –≤—Ä–∞–≥–∞
    /// </summary>
    private void Die()
    {
        if (isDead)
            return;

        isDead = true;
        Debug.Log($"[Enemy] {enemyName} —É–º–µ—Ä!");

        // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ—Ä—Ç–∏
        OnDeath?.Invoke(this);

        // TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ—Ä—Ç–∏
        // TODO: –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–º–µ—Ä—Ç–∏

        // –í—Ä–µ–º–µ–Ω–Ω–æ: —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        Destroy(gameObject, 2f);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∂–∏–≤ –ª–∏ –≤—Ä–∞–≥
    /// </summary>
    public bool IsAlive()
    {
        return !isDead;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –≤—Ä–∞–≥–∞
    /// </summary>
    public string GetEnemyName()
    {
        return enemyName;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public float GetCurrentHealth()
    {
        return currentHealth;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    /// </summary>
    public float GetMaxHealth()
    {
        return maxHealth;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è (0-1)
    /// </summary>
    public float GetHealthPercent()
    {
        return currentHealth / maxHealth;
    }

    /// <summary>
    /// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    /// </summary>
    private void OnDrawGizmos()
    {
        // –ö—Ä–∞—Å–Ω–∞—è —Å—Ñ–µ—Ä–∞ –Ω–∞–¥ –≤—Ä–∞–≥–æ–º
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position + Vector3.up * 2f, 0.3f);
    }
}
