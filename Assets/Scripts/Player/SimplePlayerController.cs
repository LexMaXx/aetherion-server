using UnityEngine;

/// <summary>
/// –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–∏–ª–ª–æ–≤ –≤ SkillTestScene
/// </summary>
public class SimplePlayerController : MonoBehaviour
{
    [Header("Movement")]
    [SerializeField] private float moveSpeed = 5f;
    [SerializeField] private float rotationSpeed = 10f;
    private float speedModifier = 0f; // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–º–æ–∂–µ—Ç –±—ã—Ç—å + –∏–ª–∏ -)

    [Header("Components")]
    private CharacterController characterController;
    private SkillExecutor skillExecutor;
    private EffectManager effectManager;
    private Animator animator;

    [Header("Target")]
    private Transform currentTarget;
    private GameObject[] enemies;

    void Start()
    {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        characterController = GetComponent<CharacterController>();
        skillExecutor = GetComponent<SkillExecutor>();
        effectManager = GetComponent<EffectManager>();
        animator = GetComponent<Animator>();

        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Å—Ü–µ–Ω–µ
        enemies = GameObject.FindGameObjectsWithTag("Enemy");

        Debug.Log($"[SimplePlayerController] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞–≥–æ–≤: {enemies.Length}");
        Debug.Log("[SimplePlayerController] üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:");
        Debug.Log("  WASD - –î–≤–∏–∂–µ–Ω–∏–µ");
        Debug.Log("  –õ–ö–ú - –í—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞");
        Debug.Log("  1/2/3 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª—ã");
    }

    void Update()
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è (—Å—Ç–∞–Ω, —Å–æ–Ω –∏ —Ç.–¥.)
        if (effectManager != null && effectManager.IsUnderCrowdControl())
        {
            Debug.Log("[SimplePlayerController] ‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω CC —ç—Ñ—Ñ–µ–∫—Ç–æ–º!");
            return;
        }

        // –î–≤–∏–∂–µ–Ω–∏–µ
        HandleMovement();

        // –í—ã–±–æ—Ä —Ü–µ–ª–∏
        HandleTargeting();

        // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–æ–≤
        HandleSkills();

        // Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (Input.GetKeyDown(KeyCode.H))
        {
            PrintHelp();
        }
    }

    void HandleMovement()
    {
        if (characterController == null) return;
        if (effectManager != null && !effectManager.CanMove())
        {
            return; // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (Root, Stun, etc.)
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥
        float horizontal = Input.GetAxis("Horizontal"); // A/D
        float vertical = Input.GetAxis("Vertical");     // W/S

        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        Vector3 moveDirection = new Vector3(horizontal, 0f, vertical).normalized;

        if (moveDirection.magnitude >= 0.1f)
        {
            // –ü–æ–≤–æ—Ä–æ—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É –¥–≤–∏–∂–µ–Ω–∏—è
            Quaternion targetRotation = Quaternion.LookRotation(moveDirection);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);

            // –î–≤–∏–∂–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–∫–æ—Ä–æ—Å—Ç–∏
            float currentSpeed = moveSpeed * (1f + speedModifier / 100f);
            Vector3 move = moveDirection * currentSpeed * Time.deltaTime;
            move.y = -9.81f * Time.deltaTime; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
            if (characterController.enabled) characterController.Move(move);

            // –ê–Ω–∏–º–∞—Ü–∏—è –±–µ–≥–∞
            if (animator != null && animator.runtimeAnimatorController != null)
            {
                animator.SetBool("IsMoving", true);
            }
        }
        else
        {
            // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è –∫–æ–≥–¥–∞ —Å—Ç–æ–∏–º
            Vector3 gravity = new Vector3(0, -9.81f * Time.deltaTime, 0);
            if (characterController.enabled) characterController.Move(gravity);

            if (animator != null && animator.runtimeAnimatorController != null)
            {
                animator.SetBool("IsMoving", false);
            }
        }
    }

    void HandleTargeting()
    {
        // –õ–ö–ú - –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
        if (Input.GetMouseButtonDown(0))
        {
            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
            GameObject closestEnemy = null;
            float closestDistance = float.MaxValue;

            foreach (GameObject enemy in enemies)
            {
                if (enemy == null) continue;

                float distance = Vector3.Distance(transform.position, enemy.transform.position);
                if (distance < closestDistance)
                {
                    closestDistance = distance;
                    closestEnemy = enemy;
                }
            }

            if (closestEnemy != null)
            {
                currentTarget = closestEnemy.transform;
                Debug.Log($"[SimplePlayerController] üéØ –¶–µ–ª—å: {closestEnemy.name} (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {closestDistance:F1}–º)");

                // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –∫ —Ü–µ–ª–∏
                Vector3 direction = (currentTarget.position - transform.position).normalized;
                direction.y = 0;
                if (direction != Vector3.zero)
                {
                    transform.rotation = Quaternion.LookRotation(direction);
                }
            }
            else
            {
                Debug.LogWarning("[SimplePlayerController] ‚ùå –í—Ä–∞–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
            }
        }
    }

    void HandleSkills()
    {
        if (skillExecutor == null) return;
        if (effectManager != null && !effectManager.CanUseSkills())
        {
            Debug.Log("[SimplePlayerController] ‚õî –ù–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª—ã (Silence, Stun, etc.)");
            return;
        }

        // –ö–ª–∞–≤–∏—à–∏ 1/2/3/4/5 –¥–ª—è —Å–∫–∏–ª–ª–æ–≤
        if (Input.GetKeyDown(KeyCode.Alpha1))
        {
            UseSkill(0);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha2))
        {
            UseSkill(1);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha3))
        {
            UseSkill(2);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha4))
        {
            UseSkill(3);
        }
        else if (Input.GetKeyDown(KeyCode.Alpha5))
        {
            UseSkill(4);
        }
    }

    void UseSkill(int slotIndex)
    {
        if (skillExecutor == null) return;

        Debug.Log($"[SimplePlayerController] üî• –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª –≤ —Å–ª–æ—Ç–µ {slotIndex}");

        // –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–ª–ª –∏–∑ —Å–ª–æ—Ç–∞
        SkillConfig skill = skillExecutor.GetEquippedSkill(slotIndex);

        if (skill == null)
        {
            Debug.LogWarning($"[SimplePlayerController] ‚ùå –°–ª–æ—Ç {slotIndex} –ø—É—Å—Ç!");
            return;
        }

        // Ground Target —Å–∫–∏–ª–ª—ã (Teleport, Meteor) - –∫–ª–∏–∫ –ü–ö–ú –Ω–∞ –∑–µ–º–ª—é
        if (skill.targetType == SkillTargetType.Ground)
        {
            Debug.Log($"[SimplePlayerController] üìç Ground target —Å–∫–∏–ª–ª. –ù–∞–∂–º–∏—Ç–µ –ü–ö–ú –Ω–∞ –∑–µ–º–ª—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏.");

            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ç–µ–ª–µ–ø–æ—Ä—Ç –Ω–∞ 5 –º–µ—Ç—Ä–æ–≤ –≤–ø–µ—Ä—ë–¥
            Vector3 groundTarget = transform.position + transform.forward * 5f;
            bool success = skillExecutor.UseSkill(slotIndex, null, groundTarget);

            if (!success)
            {
                Debug.LogWarning($"[SimplePlayerController] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª {slotIndex}");
            }
            return;
        }

        // –î–ª—è —Å–∫–∏–ª–ª–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Ü–µ–ª—å (AOE –≤–æ–∫—Ä—É–≥ —Å–µ–±—è), –ø–µ—Ä–µ–¥–∞—ë–º null
        Transform targetToUse = skill.requiresTarget ? currentTarget : null;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∏–ª–ª
        bool success2 = skillExecutor.UseSkill(slotIndex, targetToUse, null);

        if (!success2)
        {
            Debug.LogWarning($"[SimplePlayerController] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª {slotIndex}");

            if (skill.requiresTarget && currentTarget == null)
            {
                Debug.LogWarning("  ‚Üí –¶–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞! –ù–∞–∂–º–∏—Ç–µ –õ–ö–ú —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Ä–∞–≥–∞");
            }
        }
    }

    void PrintHelp()
    {
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log("üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –í –¢–ï–°–¢–û–í–û–ô –°–¶–ï–ù–ï:");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log("  WASD - –î–≤–∏–∂–µ–Ω–∏–µ");
        Debug.Log("  –õ–ö–ú - –í—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞");
        Debug.Log("  1 - Fireball (—Ç—Ä–µ–±—É–µ—Ç —Ü–µ–ª—å)");
        Debug.Log("  2 - Ice Nova (AOE –≤–æ–∫—Ä—É–≥ —Å–µ–±—è)");
        Debug.Log("  3 - Lightning Storm (AOE + Chain Lightning)");
        Debug.Log("  4 - Teleport (—Ç–µ–ª–µ–ø–æ—Ä—Ç –≤–ø–µ—Ä—ë–¥ –Ω–∞ 5–º)");
        Debug.Log("  5 - Meteor (ground target, cast 2 —Å–µ–∫)");
        Debug.Log("  H - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        Debug.Log($"üìä –°–¢–ê–¢–£–°:");
        Debug.Log($"  –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: {(currentTarget != null ? currentTarget.name : "–ù–ï–¢")}");
        Debug.Log($"  –í—Ä–∞–≥–æ–≤ –≤ —Å—Ü–µ–Ω–µ: {enemies.Length}");
        Debug.Log($"  SkillExecutor: {(skillExecutor != null ? "‚úÖ" : "‚ùå")}");
        Debug.Log($"  EffectManager: {(effectManager != null ? "‚úÖ" : "‚ùå")}");
        Debug.Log("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –≠–§–§–ï–ö–¢–û–í
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    /// </summary>
    public void AddSpeedModifier(float percentModifier)
    {
        speedModifier += percentModifier;
        Debug.Log($"[SimplePlayerController] üèÉ –°–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: {(percentModifier > 0 ? "+" : "")}{percentModifier}% (–∏—Ç–æ–≥–æ: {speedModifier}%)");
    }

    /// <summary>
    /// –£–±—Ä–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏
    /// </summary>
    public void RemoveSpeedModifier(float percentModifier)
    {
        speedModifier -= percentModifier;
        Debug.Log($"[SimplePlayerController] üèÉ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–Ω—è—Ç: {percentModifier}% (–∏—Ç–æ–≥–æ: {speedModifier}%)");
    }

    /// <summary>
    /// –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
    /// </summary>
    public void ResetSpeedModifiers()
    {
        speedModifier = 0f;
        Debug.Log("[SimplePlayerController] üèÉ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω—ã");
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–ª–∏
    void OnDrawGizmos()
    {
        if (currentTarget != null)
        {
            Gizmos.color = Color.red;
            Gizmos.DrawLine(transform.position + Vector3.up, currentTarget.position + Vector3.up);
            Gizmos.DrawWireSphere(currentTarget.position + Vector3.up, 1f);
        }
    }
}
