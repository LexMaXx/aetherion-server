using UnityEngine;
using System;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ –º–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/// –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å CharacterStats (Wisdom ‚Üí MaxMP –∏ Regen)
/// </summary>
public class ManaSystem : MonoBehaviour
{
    [Header("Mana Settings")]
    [SerializeField] private float currentMana;
    [SerializeField] private float maxMana = 100f;
    [SerializeField] private float manaRegenRate = 0.1f; // MP/—Å–µ–∫ (–ó–ê–ú–ï–î–õ–ï–ù–û –≤ 10 —Ä–∞–∑)

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats
    private CharacterStats characterStats;

    // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    private bool isRegenerating = false;

    // –°–æ–±—ã—Ç–∏—è
    public event Action<float, float> OnManaChanged; // (current, max)

    // –ì–µ—Ç—Ç–µ—Ä—ã
    public float CurrentMana => currentMana;
    public float MaxMana => maxMana;
    public float ManaPercent => maxMana > 0 ? currentMana / maxMana : 0f;

    void Start()
    {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats (Wisdom ‚Üí MP –∏ Regen)
        characterStats = GetComponent<CharacterStats>();
        if (characterStats != null)
        {
            characterStats.OnStatsChanged += UpdateManaFromStats;
            UpdateManaFromStats();
            Debug.Log("[ManaSystem] ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CharacterStats –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç CharacterStats - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            currentMana = maxMana;
        }

        OnManaChanged?.Invoke(currentMana, maxMana);
    }

    void Update()
    {
        // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è MP —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ
        bool isStanding = IsPlayerStanding();

        if (isStanding && currentMana < maxMana)
        {
            if (!isRegenerating)
            {
                isRegenerating = true;
                Debug.Log("[ManaSystem] üîÑ –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è MP (–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–æ–∏—Ç)");
            }

            currentMana += manaRegenRate * Time.deltaTime;
            currentMana = Mathf.Min(currentMana, maxMana);
            OnManaChanged?.Invoke(currentMana, maxMana);

            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if (currentMana >= maxMana)
            {
                currentMana = maxMana;
                if (isRegenerating)
                {
                    isRegenerating = false;
                    Debug.Log("[ManaSystem] ‚úÖ MP –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
                }
            }
        }
        else if (!isStanding && isRegenerating)
        {
            // –û—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏
            isRegenerating = false;
            Debug.Log("[ManaSystem] ‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è MP (–ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è)");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—Ç–æ–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –º–µ—Å—Ç–µ
    /// </summary>
    private bool IsPlayerStanding()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –¥–≤–∏–∂–µ–Ω–∏—è - —Å–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π –º–µ—Ç–æ–¥
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");
        bool hasMovementInput = Mathf.Abs(horizontal) > 0.01f || Mathf.Abs(vertical) > 0.01f;

        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–≤–æ–¥ - –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è
        return !hasMovementInput;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å Mana –Ω–∞ –æ—Å–Ω–æ–≤–µ Wisdom
    /// </summary>
    private void UpdateManaFromStats()
    {
        if (characterStats == null) return;

        float oldMaxMana = maxMana;
        maxMana = characterStats.MaxMana;
        manaRegenRate = characterStats.ManaRegen;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MP –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        if (oldMaxMana > 0)
        {
            float manaPercent = currentMana / oldMaxMana;
            currentMana = maxMana * manaPercent;
        }
        else
        {
            currentMana = maxMana;
        }

        OnManaChanged?.Invoke(currentMana, maxMana);
        Debug.Log($"[ManaSystem] –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ Stats: {currentMana:F0}/{maxMana:F0} MP, Regen: {manaRegenRate:F1} MP/—Å–µ–∫ (Wisdom: {characterStats.wisdom})");
    }

    /// <summary>
    /// –ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–∞–Ω—É
    /// </summary>
    public bool SpendMana(float amount)
    {
        if (currentMana < amount)
        {
            Debug.LogWarning($"[ManaSystem] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã! –ù—É–∂–Ω–æ: {amount:F0}, –ï—Å—Ç—å: {currentMana:F0}");
            return false;
        }

        currentMana -= amount;
        Debug.Log($"[ManaSystem] -{amount:F0} MP. –û—Å—Ç–∞–ª–æ—Å—å: {currentMana:F0}/{maxMana:F0}");
        OnManaChanged?.Invoke(currentMana, maxMana);
        return true;
    }

    /// <summary>
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–Ω—É
    /// </summary>
    public void RestoreMana(float amount)
    {
        currentMana += amount;
        currentMana = Mathf.Min(currentMana, maxMana);

        Debug.Log($"[ManaSystem] +{amount:F0} MP. –¢–µ–∫—É—â–∞—è: {currentMana:F0}/{maxMana:F0}");
        OnManaChanged?.Invoke(currentMana, maxMana);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–∞–Ω—ã
    /// </summary>
    public bool HasEnoughMana(float amount)
    {
        return currentMana >= amount;
    }

    private void OnDestroy()
    {
        if (characterStats != null)
        {
            characterStats.OnStatsChanged -= UpdateManaFromStats;
        }
    }

    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    [ContextMenu("Test: Spend 20 Mana")]
    private void TestSpendMana()
    {
        SpendMana(20f);
    }

    [ContextMenu("Test: Restore 30 Mana")]
    private void TestRestoreMana()
    {
        RestoreMana(30f);
    }
}
