using UnityEngine;
using System;
using System.Collections.Generic;
using SocketIOClient;
using System.Text.Json;

/// <summary>
/// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
///
/// –ö–õ–Æ–ß–ï–í–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
/// - Delta Compression: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
/// - Adaptive Update Rate: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
/// - Batching: –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç
/// - Priority System: –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
/// - Dead Reckoning: –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
/// </summary>
public class OptimizedWebSocketClient : MonoBehaviour
{
    public static OptimizedWebSocketClient Instance { get; private set; }

    [Header("Server Settings")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";

    [Header("Network Optimization")]
    [Tooltip("–ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–∏ (–ì—Ü)")]
    [SerializeField] private float positionUpdateRate = 20f; // 20 Hz = 50ms

    [Tooltip("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –Ω–µ–ø–æ–¥–≤–∏–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–ì—Ü)")]
    [SerializeField] private float idleUpdateRate = 2f; // 2 Hz = 500ms

    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")]
    [SerializeField] private float minPositionDelta = 0.01f; // 1 —Å–º

    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏")]
    [SerializeField] private float minRotationDelta = 1f; // 1 –≥—Ä–∞–¥—É—Å

    [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")]
    [SerializeField] private int maxBatchSize = 10;

    [Tooltip("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –±–∞—Ç—á–∞ (–º—Å)")]
    [SerializeField] private float batchDelay = 50f; // 50ms

    // Socket.IO –∫–ª–∏–µ–Ω—Ç
    private SocketIO socket;

    // Connection state
    private bool isConnected = false;
    private string sessionId = "";
    private string authToken = "";
    private string currentRoomId = "";

    // Delta compression - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private Vector3 lastSentPosition;
    private Quaternion lastSentRotation;
    private string lastSentAnimation = "";
    private float lastPositionUpdateTime = 0f;

    // Velocity tracking –¥–ª—è Dead Reckoning
    private Vector3 lastVelocity = Vector3.zero;
    private float lastAngularVelocity = 0f;

    // Batching
    private List<object> pendingUpdates = new List<object>();
    private float lastBatchSendTime = 0f;

    // Statistics
    private int packetsSent = 0;
    private int bytesSaved = 0;
    private float averagePing = 0f;

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Update()
    {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
        if (pendingUpdates.Count > 0 && Time.time - lastBatchSendTime > batchDelay / 1000f)
        {
            FlushBatch();
        }
    }

    void OnDestroy()
    {
        Disconnect();
    }

    // ===== CONNECTION =====

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected || socket != null)
        {
            Debug.LogWarning("[OptimizedWS] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
            onComplete?.Invoke(false);
            return;
        }

        authToken = token;

        try
        {
            var uri = new Uri(serverUrl);
            socket = new SocketIO(uri, new SocketIOOptions
            {
                Transport = SocketIOClient.Transport.TransportProtocol.WebSocket,
                Reconnection = true,
                ReconnectionAttempts = 5,
                ReconnectionDelay = 1000,
                ExtraHeaders = new Dictionary<string, string>
                {
                    { "Authorization", $"Bearer {token}" }
                }
            });

            // –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            socket.OnConnected += (sender, e) =>
            {
                isConnected = true;
                sessionId = socket.Id;
                Debug.Log($"[OptimizedWS] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Socket ID: {sessionId}");

                // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞
                StartPingMonitoring();

                onComplete?.Invoke(true);
            };

            socket.OnDisconnected += (sender, e) =>
            {
                isConnected = false;
                Debug.Log("[OptimizedWS] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ");
            };

            socket.OnError += (sender, e) =>
            {
                Debug.LogError($"[OptimizedWS] ‚ùå –û—à–∏–±–∫–∞: {e}");
            };

            socket.OnReconnectAttempt += (sender, e) =>
            {
                Debug.Log($"[OptimizedWS] üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ #{e}");
            };

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            Debug.Log($"[OptimizedWS] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");
            socket.ConnectAsync().ContinueWith(task =>
            {
                if (task.IsFaulted)
                {
                    Debug.LogError($"[OptimizedWS] ‚ùå –û—à–∏–±–∫–∞: {task.Exception?.Message}");
                    onComplete?.Invoke(false);
                }
            });
        }
        catch (Exception ex)
        {
            Debug.LogError($"[OptimizedWS] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {ex.Message}");
            onComplete?.Invoke(false);
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
    /// </summary>
    public void Disconnect()
    {
        if (socket != null)
        {
            FlushBatch(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
            socket.DisconnectAsync();
            socket.Dispose();
            socket = null;
        }

        isConnected = false;
        sessionId = "";
        currentRoomId = "";
        Debug.Log("[OptimizedWS] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    // ===== EVENTS =====

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
    /// </summary>
    public void EmitEvent(string eventName, object data, bool highPriority = false)
    {
        if (!isConnected || socket == null)
        {
            Debug.LogWarning($"[OptimizedWS] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –ø—Ä–æ–ø—É—â–µ–Ω–æ");
            return;
        }

        try
        {
            if (highPriority)
            {
                // –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                socket.EmitAsync(eventName, data);
                packetsSent++;
            }
            else
            {
                // –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á
                AddToBatch(new { eventName, data });
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[OptimizedWS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{eventName}': {ex.Message}");
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void On(string eventName, Action<JsonElement> callback)
    {
        if (socket == null)
        {
            Debug.LogError("[OptimizedWS] Socket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        socket.On(eventName, response =>
        {
            try
            {
                var data = response.GetValue<JsonElement>();
                callback?.Invoke(data);
            }
            catch (Exception ex)
            {
                Debug.LogError($"[OptimizedWS] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{eventName}': {ex.Message}");
            }
        });
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public void Off(string eventName)
    {
        socket?.Off(eventName);
    }

    // ===== BATCHING =====

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞—Ç—á
    /// </summary>
    private void AddToBatch(object update)
    {
        pendingUpdates.Add(update);

        // –ï—Å–ª–∏ –±–∞—Ç—á –ø–æ–ª–æ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        if (pendingUpdates.Count >= maxBatchSize)
        {
            FlushBatch();
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞—Ç—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    private void FlushBatch()
    {
        if (pendingUpdates.Count == 0) return;

        try
        {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ–¥–Ω–∏–º –ø–∞–∫–µ—Ç–æ–º
            socket.EmitAsync("batch_update", new { updates = pendingUpdates });

            packetsSent++;
            lastBatchSendTime = Time.time;

            // –û—á–∏—â–∞–µ–º –±–∞—Ç—á
            pendingUpdates.Clear();
        }
        catch (Exception ex)
        {
            Debug.LogError($"[OptimizedWS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞: {ex.Message}");
        }
    }

    // ===== OPTIMIZED GAME EVENTS =====

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É (–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[OptimizedWS] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;

        var data = new
        {
            roomId = roomId,
            characterClass = characterClass
        };

        Debug.Log($"[OptimizedWS] üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId}");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç
        On("room_state", (response) =>
        {
            Debug.Log("[OptimizedWS] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã");
            onComplete?.Invoke(true);
        });

        On("error", (response) =>
        {
            Debug.LogError($"[OptimizedWS] ‚ùå –û—à–∏–±–∫–∞: {response}");
            onComplete?.Invoke(false);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        EmitEvent("join_room", data, highPriority: true);
    }

    /// <summary>
    /// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å Delta Compression
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, string animationState, Vector3 velocity)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId))
            return;

        float currentTime = Time.time;

        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        bool isMoving = velocity.sqrMagnitude > 0.01f;
        float updateInterval = isMoving ? (1f / positionUpdateRate) : (1f / idleUpdateRate);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (currentTime - lastPositionUpdateTime < updateInterval)
            return;

        // Delta Compression - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        float positionDelta = Vector3.Distance(position, lastSentPosition);
        float rotationDelta = Quaternion.Angle(rotation, lastSentRotation);
        bool animationChanged = animationState != lastSentAnimation;

        if (positionDelta < minPositionDelta &&
            rotationDelta < minRotationDelta &&
            !animationChanged)
        {
            bytesSaved++; // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏
            return;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è Dead Reckoning
        float deltaTime = currentTime - lastPositionUpdateTime;
        if (deltaTime > 0)
        {
            lastVelocity = (position - lastSentPosition) / deltaTime;
            lastAngularVelocity = rotationDelta / deltaTime;
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        var data = new
        {
            // –ü–æ–∑–∏—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
            x = positionDelta >= minPositionDelta ? position.x : (float?)null,
            y = positionDelta >= minPositionDelta ? position.y : (float?)null,
            z = positionDelta >= minPositionDelta ? position.z : (float?)null,

            // –†–æ—Ç–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
            rotY = rotationDelta >= minRotationDelta ? rotation.eulerAngles.y : (float?)null,

            // –ê–Ω–∏–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å)
            anim = animationChanged ? animationState : null,

            // Velocity –¥–ª—è Dead Reckoning –Ω–∞ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö
            vx = isMoving ? velocity.x : (float?)null,
            vy = isMoving ? velocity.y : (float?)null,
            vz = isMoving ? velocity.z : (float?)null,

            // Timestamp –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            t = currentTime
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –∏–¥—ë—Ç –≤ –±–∞—Ç—á)
        EmitEvent("update_position", data, highPriority: false);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        lastSentPosition = position;
        lastSentRotation = rotation;
        lastSentAnimation = animationState;
        lastPositionUpdateTime = currentTime;
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É (–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    /// </summary>
    public void SendAttack(string targetSocketId, float damage, string attackType)
    {
        if (!isConnected) return;

        var data = new
        {
            targetSocketId = targetSocketId,
            damage = damage,
            attackType = attackType,
            timestamp = Time.time
        };

        EmitEvent("player_attack", data, highPriority: true);
        Debug.Log($"[OptimizedWS] ‚öîÔ∏è –ê—Ç–∞–∫–∞: {damage} —É—Ä–æ–Ω–∞");
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª (–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    /// </summary>
    public void SendSkill(int skillId, string targetSocketId, Vector3 targetPosition)
    {
        if (!isConnected) return;

        var data = new
        {
            skillId = skillId,
            targetSocketId = targetSocketId,
            targetX = targetPosition.x,
            targetY = targetPosition.y,
            targetZ = targetPosition.z,
            timestamp = Time.time
        };

        EmitEvent("player_skill", data, highPriority: true);
        Debug.Log($"[OptimizedWS] üîÆ –°–∫–∏–ª–ª {skillId}");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ (–°–†–ï–î–ù–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    /// </summary>
    public void UpdateHealth(int currentHP, int maxHP, int currentMP, int maxMP)
    {
        if (!isConnected) return;

        var data = new
        {
            currentHP = currentHP,
            maxHP = maxHP,
            currentMP = currentMP,
            maxMP = maxMP
        };

        // –°—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á–µ
        EmitEvent("update_health", data, highPriority: false);
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω (–í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢)
    /// </summary>
    public void RequestRespawn()
    {
        if (!isConnected) return;

        EmitEvent("player_respawn", new { }, highPriority: true);
        Debug.Log("[OptimizedWS] üíÄ –ó–∞–ø—Ä–æ—Å —Ä–µ—Å–ø–∞–≤–Ω–∞");
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
    /// </summary>
    public void StartListening()
    {
        Debug.Log("[OptimizedWS] üì° Listening started");
    }

    // ===== PING MONITORING =====

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∏–Ω–≥–∞
    /// </summary>
    private void StartPingMonitoring()
    {
        InvokeRepeating(nameof(MeasurePing), 1f, 5f); // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    }

    /// <summary>
    /// –ò–∑–º–µ—Ä–∏—Ç—å –ø–∏–Ω–≥
    /// </summary>
    private void MeasurePing()
    {
        if (!isConnected) return;

        float sendTime = Time.time;

        socket.EmitAsync("ping", new { sendTime = sendTime });

        On("pong", (response) =>
        {
            float receiveTime = Time.time;
            averagePing = (receiveTime - sendTime) * 1000f; // –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞
            AdaptUpdateRate();
        });
    }

    /// <summary>
    /// –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∏–Ω–≥–∞
    /// </summary>
    private void AdaptUpdateRate()
    {
        if (averagePing < 50f)
        {
            // –û—Ç–ª–∏—á–Ω—ã–π –ø–∏–Ω–≥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
            positionUpdateRate = 30f;
        }
        else if (averagePing < 100f)
        {
            // –•–æ—Ä–æ—à–∏–π –ø–∏–Ω–≥ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
            positionUpdateRate = 20f;
        }
        else if (averagePing < 200f)
        {
            // –°—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–≥ - —Å–Ω–∏–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É
            positionUpdateRate = 15f;
        }
        else
        {
            // –ü–ª–æ—Ö–æ–π –ø–∏–Ω–≥ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
            positionUpdateRate = 10f;
        }
    }

    // ===== STATISTICS =====

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–∏
    /// </summary>
    public NetworkStats GetNetworkStats()
    {
        return new NetworkStats
        {
            packetsSent = packetsSent,
            bytesSaved = bytesSaved,
            averagePing = averagePing,
            updateRate = positionUpdateRate,
            pendingBatchSize = pendingUpdates.Count
        };
    }

    /// <summary>
    /// –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
    /// </summary>
    public void LogStats()
    {
        var stats = GetNetworkStats();
        Debug.Log($"[OptimizedWS] üìä Stats:\n" +
                  $"  Packets Sent: {stats.packetsSent}\n" +
                  $"  Bytes Saved: {stats.bytesSaved}\n" +
                  $"  Avg Ping: {stats.averagePing:F1}ms\n" +
                  $"  Update Rate: {stats.updateRate}Hz\n" +
                  $"  Pending Batch: {stats.pendingBatchSize}");
    }

    // Properties
    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string SessionId => sessionId;
    public float AveragePing => averagePing;
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
/// </summary>
[Serializable]
public struct NetworkStats
{
    public int packetsSent;
    public int bytesSaved;
    public float averagePing;
    public float updateRate;
    public int pendingBatchSize;
}
