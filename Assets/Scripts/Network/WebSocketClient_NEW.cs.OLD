using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine.Networking;

/// <summary>
/// WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è Socket.io —Å–µ—Ä–≤–µ—Ä–∞ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π WebSocket –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–º–µ—Å—Ç–æ HTTP polling
/// </summary>
public class WebSocketClient_NEW : MonoBehaviour
{
    public static WebSocketClient_NEW Instance { get; private set; }

    [Header("Server Settings")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private float heartbeatInterval = 25f;
    [SerializeField] private float reconnectDelay = 5f;

    // Connection state
    private bool isConnected = false;
    private bool isConnecting = false;
    private string sessionId = "";
    private string authToken = "";
    private string currentRoomId = "";

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    // WebSocket —á–µ—Ä–µ–∑ Socket.IO
    private WebSocket websocket;
    private bool useWebSocket = false; // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void OnDestroy()
    {
        Disconnect();
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected || isConnecting)
        {
            Debug.LogWarning("[WebSocket] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è");
            onComplete?.Invoke(false);
            return;
        }

        authToken = token;
        StartCoroutine(ConnectCoroutine(onComplete));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    private IEnumerator ConnectCoroutine(Action<bool> onComplete)
    {
        isConnecting = true;
        Debug.Log($"[WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è session ID
        string handshakeUrl = $"{serverUrl}/socket.io/?EIO=4&transport=polling";
        UnityWebRequest request = UnityWebRequest.Get(handshakeUrl);
        request.SetRequestHeader("Authorization", $"Bearer {authToken}");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            string response = request.downloadHandler.text;
            Debug.Log($"[WebSocket] Handshake response: {response}");

            // Parse session ID
            int sidStart = response.IndexOf("\"sid\":\"") + 7;
            int sidEnd = response.IndexOf("\"", sidStart);

            if (sidStart > 6 && sidEnd > sidStart)
            {
                sessionId = response.Substring(sidStart, sidEnd - sidStart);
                isConnected = true;
                isConnecting = false;

                Debug.Log($"[WebSocket] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Session ID: {sessionId}");
                onComplete?.Invoke(true);
            }
            else
            {
                Debug.LogError("[WebSocket] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å session ID");
                isConnecting = false;
                onComplete?.Invoke(false);
            }
        }
        else
        {
            Debug.LogError($"[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {request.error}");
            isConnecting = false;
            onComplete?.Invoke(false);
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (!isConnected) return;

        Debug.Log("[WebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...");
        isConnected = false;
        sessionId = "";
        currentRoomId = "";
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–ë–ï–ó –æ—Ç–ø—Ä–∞–≤–∫–∏, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    /// </summary>
    public void EmitEvent(string eventName, string jsonData)
    {
        if (!isConnected)
        {
            Debug.LogWarning($"[WebSocket] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        // –í–†–ï–ú–ï–ù–ù–û: –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        Debug.Log($"[WebSocket] üì§ –°–æ–±—ã—Ç–∏–µ '{eventName}' (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏—è)");
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (!eventCallbacks.ContainsKey(eventName))
        {
            eventCallbacks[eventName] = callback;
            Debug.Log($"[WebSocket] üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
        }
        else
        {
            eventCallbacks[eventName] += callback;
        }
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public void Off(string eventName, Action<string> callback = null)
    {
        if (eventCallbacks.ContainsKey(eventName))
        {
            if (callback != null)
            {
                eventCallbacks[eventName] -= callback;
            }
            else
            {
                eventCallbacks.Remove(eventName);
            }
        }
    }

    // ===== GAME-SPECIFIC EVENTS =====

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[WebSocket] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;
        Debug.Log($"[WebSocket] üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} (–∫–ª–∞—Å—Å: {characterClass})");

        // –í–†–ï–ú–ï–ù–ù–û: –°—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
        StartCoroutine(SimulateJoinRoom(onComplete));
    }

    private IEnumerator SimulateJoinRoom(Action<bool> onComplete)
    {
        yield return new WaitForSeconds(1f);
        Debug.Log("[WebSocket] ‚úÖ –í–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É (—Å–∏–º—É–ª—è—Ü–∏—è)");
        onComplete?.Invoke(true);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, string animationState)
    {
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º WebSocket
        // Debug.Log($"[WebSocket] Position update (disabled): {position}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É (–û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    /// </summary>
    public void SendAttack(string targetSocketId, float damage, string attackType)
    {
        if (!isConnected) return;
        Debug.Log($"[WebSocket] ‚öîÔ∏è –ê—Ç–∞–∫–∞ (disabled): {damage} —É—Ä–æ–Ω–∞");
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª (–û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    /// </summary>
    public void SendSkill(int skillId, string targetSocketId, Vector3 targetPosition)
    {
        if (!isConnected) return;
        Debug.Log($"[WebSocket] üîÆ –°–∫–∏–ª–ª {skillId} (disabled)");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ/–º–∞–Ω—É (–û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    /// </summary>
    public void UpdateHealth(int currentHP, int maxHP, int currentMP, int maxMP)
    {
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        // Debug.Log($"[WebSocket] Health update (disabled): {currentHP}/{maxHP} HP");
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void RequestRespawn()
    {
        if (!isConnected) return;
        Debug.Log("[WebSocket] üíÄ –ó–∞–ø—Ä–æ—Å —Ä–µ—Å–ø–∞–≤–Ω–∞");
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
    /// </summary>
    public void StartListening()
    {
        Debug.Log("[WebSocket] üì° Listening started (no-op –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)");
    }

    // Properties
    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string SessionId => sessionId;
}

// Temporary WebSocket class (–∑–∞–≥–ª—É—à–∫–∞)
public class WebSocket
{
    public WebSocket(string url) { }
    public void Connect() { }
    public void Close() { }
    public void Send(string data) { }
}
