using UnityEngine;
using System;
using System.Collections.Generic;
using SocketIOClient;
using System.Text.Json;

/// <summary>
/// Socket.IO –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é Socket.IO –±–∏–±–ª–∏–æ—Ç–µ–∫—É
/// </summary>
public class SocketIOManager : MonoBehaviour
{
    public static SocketIOManager Instance { get; private set; }

    [Header("Server Settings")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";

    // Socket.IO –∫–ª–∏–µ–Ω—Ç
    private SocketIO socket;

    // Connection state
    private bool isConnected = false;
    private string sessionId = "";
    private string authToken = "";
    private string currentRoomId = "";

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void OnDestroy()
    {
        Disconnect();
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected || socket != null)
        {
            Debug.LogWarning("[SocketIO] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è");
            onComplete?.Invoke(false);
            return;
        }

        authToken = token;

        try
        {
            // –°–æ–∑–¥–∞—ë–º Socket.IO –∫–ª–∏–µ–Ω—Ç
            var uri = new Uri(serverUrl);
            socket = new SocketIO(uri, new SocketIOOptions
            {
                Transport = SocketIOClient.Transport.TransportProtocol.WebSocket,
                ExtraHeaders = new Dictionary<string, string>
                {
                    { "Authorization", $"Bearer {token}" }
                }
            });

            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            socket.OnConnected += (sender, e) =>
            {
                isConnected = true;
                sessionId = socket.Id;
                Debug.Log($"[SocketIO] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Socket ID: {sessionId}");
                onComplete?.Invoke(true);
            };

            socket.OnDisconnected += (sender, e) =>
            {
                isConnected = false;
                Debug.Log("[SocketIO] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
            };

            socket.OnError += (sender, e) =>
            {
                Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞: {e}");
            };

            socket.OnReconnectAttempt += (sender, e) =>
            {
                Debug.Log($"[SocketIO] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{e}");
            };

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            Debug.Log($"[SocketIO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");
            socket.ConnectAsync().ContinueWith(task =>
            {
                if (task.IsFaulted)
                {
                    Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {task.Exception?.Message}");
                    onComplete?.Invoke(false);
                }
            });
        }
        catch (Exception ex)
        {
            Debug.LogError($"[SocketIO] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {ex.Message}");
            onComplete?.Invoke(false);
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (socket != null)
        {
            socket.DisconnectAsync();
            socket.Dispose();
            socket = null;
        }

        isConnected = false;
        sessionId = "";
        currentRoomId = "";
        Debug.Log("[SocketIO] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    public void EmitEvent(string eventName, object data)
    {
        if (!isConnected || socket == null)
        {
            Debug.LogWarning($"[SocketIO] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        try
        {
            socket.EmitAsync(eventName, data);
            Debug.Log($"[SocketIO] ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eventName}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{eventName}': {ex.Message}");
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void On(string eventName, Action<JsonElement> callback)
    {
        if (socket == null)
        {
            Debug.LogError("[SocketIO] Socket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        socket.On(eventName, response =>
        {
            try
            {
                var data = response.GetValue<JsonElement>();
                Debug.Log($"[SocketIO] üì® –ü–æ–ª—É—á–µ–Ω–æ: {eventName}");
                callback?.Invoke(data);
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{eventName}': {ex.Message}");
            }
        });

        Debug.Log($"[SocketIO] üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public void Off(string eventName)
    {
        if (socket != null)
        {
            socket.Off(eventName);
            Debug.Log($"[SocketIO] ‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: {eventName}");
        }
    }

    // ===== GAME-SPECIFIC EVENTS =====

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[SocketIO] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;

        var data = new
        {
            roomId = roomId,
            characterClass = characterClass
        };

        Debug.Log($"[SocketIO] üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} (–∫–ª–∞—Å—Å: {characterClass})");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        On("room_state", (response) =>
        {
            Debug.Log($"[SocketIO] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã!");
            onComplete?.Invoke(true);
        });

        On("error", (response) =>
        {
            var error = response.ToString();
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É: {error}");
            onComplete?.Invoke(false);
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        EmitEvent("join_room", data);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, string animationState)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId))
        {
            return;
        }

        var data = new
        {
            x = position.x,
            y = position.y,
            z = position.z,
            rotationY = rotation.eulerAngles.y,
            animationState = animationState
        };

        EmitEvent("update_position", data);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É
    /// </summary>
    public void SendAttack(string targetSocketId, float damage, string attackType)
    {
        if (!isConnected) return;

        var data = new
        {
            targetSocketId = targetSocketId,
            damage = damage,
            attackType = attackType
        };

        EmitEvent("player_attack", data);
        Debug.Log($"[SocketIO] ‚öîÔ∏è –ê—Ç–∞–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {damage} —É—Ä–æ–Ω–∞");
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª
    /// </summary>
    public void SendSkill(int skillId, string targetSocketId, Vector3 targetPosition)
    {
        if (!isConnected) return;

        var data = new
        {
            skillId = skillId,
            targetSocketId = targetSocketId,
            targetX = targetPosition.x,
            targetY = targetPosition.y,
            targetZ = targetPosition.z
        };

        EmitEvent("player_skill", data);
        Debug.Log($"[SocketIO] üîÆ –°–∫–∏–ª–ª {skillId} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ/–º–∞–Ω—É
    /// </summary>
    public void UpdateHealth(int currentHP, int maxHP, int currentMP, int maxMP)
    {
        if (!isConnected) return;

        var data = new
        {
            currentHP = currentHP,
            maxHP = maxHP,
            currentMP = currentMP,
            maxMP = maxMP
        };

        EmitEvent("update_health", data);
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void RequestRespawn()
    {
        if (!isConnected) return;
        EmitEvent("player_respawn", new { });
        Debug.Log("[SocketIO] üíÄ –ó–∞–ø—Ä–æ—Å —Ä–µ—Å–ø–∞–≤–Ω–∞");
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
    /// </summary>
    public void StartListening()
    {
        Debug.Log("[SocketIO] üì° Listening started");
    }

    // Properties
    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string SessionId => sessionId;
}
