using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using Newtonsoft.Json;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Å–µ—Ç–µ–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
/// </summary>
public class NetworkSyncManager : MonoBehaviour
{
    public static NetworkSyncManager Instance { get; private set; }

    [Header("Settings")]
    [SerializeField] private float positionSyncInterval = 0.1f; // 10 Hz
    [SerializeField] private bool syncEnabled = true;

    [Header("Spawn Points")]
    [SerializeField] private Transform[] spawnPoints;

    [Header("Character Prefabs")]
    [SerializeField] private GameObject warriorPrefab;
    [SerializeField] private GameObject magePrefab;
    [SerializeField] private GameObject archerPrefab;
    [SerializeField] private GameObject roguePrefab;
    [SerializeField] private GameObject paladinPrefab;

    [Header("UI")]
    [SerializeField] private GameObject nameplatePrefab;

    // Network players
    private Dictionary<string, NetworkPlayer> networkPlayers = new Dictionary<string, NetworkPlayer>();

    // Local player reference
    private GameObject localPlayer;
    private string localPlayerClass;
    private float lastPositionSync = 0f;

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Start()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ä–µ–∂–∏–º–µ
        string roomId = PlayerPrefs.GetString("CurrentRoomId", "");
        if (string.IsNullOrEmpty(roomId))
        {
            Debug.Log("[NetworkSync] –ù–µ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ, –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é");
            enabled = false;
            return;
        }

        // Subscribe to WebSocket events FIRST
        SubscribeToNetworkEvents();

        // –í–ê–ñ–ù–û: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –ü–û–°–õ–ï –ø–æ–¥–ø–∏—Å–∫–∏
        // –ü–æ—Ç–æ–º—É —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ room_players –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—à–ª–æ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ ArenaScene
        Debug.Log("[NetworkSync] üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ...");
        if (SocketIOManager.Instance != null)
        {
            SocketIOManager.Instance.RequestRoomPlayers();
        }
    }


    void Update()
    {
        if (!syncEnabled) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (SocketIOManager.Instance == null || !SocketIOManager.Instance.IsConnected)
        {
            return;
        }

        // Send local player position to server
        if (Time.time - lastPositionSync > positionSyncInterval)
        {
            SyncLocalPlayerPosition();
            lastPositionSync = Time.time;
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    private void SubscribeToNetworkEvents()
    {
        if (SocketIOManager.Instance == null)
        {
            Debug.LogError("[NetworkSync] SocketIOManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // Room players list (when we join)
        SocketIOManager.Instance.On("room_players", OnRoomPlayers);

        // Player joined room
        SocketIOManager.Instance.On("player_joined", OnPlayerJoined);

        // Player left room
        SocketIOManager.Instance.On("player_left", OnPlayerLeft);

        // Player moved (position/rotation update)
        SocketIOManager.Instance.On("player_moved", OnPlayerMoved);

        // Player animation changed
        SocketIOManager.Instance.On("player_animation_changed", OnAnimationChanged);

        // Player attacked
        SocketIOManager.Instance.On("player_attacked", OnPlayerAttacked);

        // Player health changed
        SocketIOManager.Instance.On("player_health_changed", OnHealthChanged);

        // Player died
        SocketIOManager.Instance.On("player_died", OnPlayerDied);

        // Player respawned
        SocketIOManager.Instance.On("player_respawned", OnPlayerRespawned);

        // Enemy events
        SocketIOManager.Instance.On("enemy_health_changed", OnEnemyHealthChanged);
        SocketIOManager.Instance.On("enemy_died", OnEnemyDied);
        SocketIOManager.Instance.On("enemy_respawned", OnEnemyRespawned);

        Debug.Log("[NetworkSync] ‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void SetLocalPlayer(GameObject player, string characterClass)
    {
        localPlayer = player;
        localPlayerClass = characterClass;
        Debug.Log($"[NetworkSync] –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {characterClass}");
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SyncLocalPlayerPosition()
    {
        if (localPlayer == null || SocketIOManager.Instance == null || !SocketIOManager.Instance.IsConnected)
            return;

        // Get velocity (–¥–ª—è Dead Reckoning –≤ –±—É–¥—É—â–µ–º)
        Vector3 velocity = Vector3.zero;
        bool isGrounded = true;

        var rigidbody = localPlayer.GetComponent<Rigidbody>();
        if (rigidbody != null)
        {
            velocity = rigidbody.linearVelocity;
        }
        else
        {
            var controller = localPlayer.GetComponent<CharacterController>();
            if (controller != null)
            {
                velocity = controller.velocity;
                isGrounded = controller.isGrounded;
            }
        }

        // Send to server
        SocketIOManager.Instance.UpdatePosition(
            localPlayer.transform.position,
            localPlayer.transform.rotation,
            velocity,
            isGrounded
        );
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private string GetLocalPlayerAnimationState()
    {
        var animator = localPlayer.GetComponent<Animator>();
        if (animator == null) return "Idle";

        // Check if parameters exist before trying to get them
        if (HasParameter(animator, "isDead") && animator.GetBool("isDead")) return "Dead";
        if (HasParameter(animator, "isAttacking") && animator.GetBool("isAttacking")) return "Attacking";
        if (HasParameter(animator, "isRunning") && animator.GetBool("isRunning")) return "Running";
        if (HasParameter(animator, "isWalking") && animator.GetBool("isWalking")) return "Walking";

        return "Idle";
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Animator
    /// </summary>
    private bool HasParameter(Animator animator, string paramName)
    {
        foreach (AnimatorControllerParameter param in animator.parameters)
        {
            if (param.name == paramName) return true;
        }
        return false;
    }

    // ===== NETWORK EVENT HANDLERS =====

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ (–∫–æ–≥–¥–∞ –º—ã –≤—Ö–æ–¥–∏–º)
    /// </summary>
    private void OnRoomPlayers(string jsonData)
    {
        Debug.Log($"[NetworkSync] üì¶ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ. JSON: {jsonData}");

        try
        {
            var data = JsonConvert.DeserializeObject<RoomPlayersResponse>(jsonData);

            if (data == null || data.players == null)
            {
                Debug.LogError("[NetworkSync] ‚ùå Failed to parse RoomPlayersResponse");
                return;
            }

            Debug.Log($"[NetworkSync] –í –∫–æ–º–Ω–∞—Ç–µ {data.players.Length} –∏–≥—Ä–æ–∫–æ–≤");
            Debug.Log($"[NetworkSync] –ú–æ–π socketId: {data.yourSocketId}");

            // Spawn all existing players
            foreach (var playerData in data.players)
            {
                Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫: {playerData.username} (socketId: {playerData.socketId}, class: {playerData.characterClass})");

                // Skip ourselves
                if (playerData.socketId == data.yourSocketId)
                {
                    Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –º—ã —Å–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                    continue;
                }

                // Spawn if not already exists
                if (!networkPlayers.ContainsKey(playerData.socketId))
                {
                    Debug.Log($"[NetworkSync] üé≠ Spawning network player: {playerData.username}");
                    Vector3 pos = new Vector3(playerData.position.x, playerData.position.y, playerData.position.z);
                    SpawnNetworkPlayer(playerData.socketId, playerData.username, playerData.characterClass, pos);
                }
            }

            Debug.Log($"[NetworkSync] üìä –í—Å–µ–≥–æ —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {networkPlayers.Count}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå Error in OnRoomPlayers: {ex.Message}\n{ex.StackTrace}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerJoined(string jsonData)
    {
        var data = JsonConvert.DeserializeObject<PlayerJoinedEvent>(jsonData);
        Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {data.username} ({data.characterClass})");

        // Don't create network player for ourselves
        // SocketIOManager doesn't have SessionId, so we compare with our socket ID from room_players
        // For now, skip this check - room_players already filters us out

        // Spawn network player
        Vector3 pos = new Vector3(data.position.x, data.position.y, data.position.z);
        SpawnNetworkPlayer(data.socketId, data.username, data.characterClass, pos);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerLeft(string jsonData)
    {
        var data = JsonConvert.DeserializeObject<PlayerLeftEvent>(jsonData);
        Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {data.username} ({data.socketId})");

        RemoveNetworkPlayer(data.socketId);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    /// </summary>
    private void OnPlayerMoved(string jsonData)
    {
        try
        {
            // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π JSON
            Debug.Log($"[NetworkSync] üîç RAW JSON for player_moved: {jsonData}");

            var data = JsonConvert.DeserializeObject<PlayerMovedEvent>(jsonData);

            // –û–¢–õ–ê–î–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if (data == null)
            {
                Debug.LogError($"[NetworkSync] ‚ùå PlayerMovedEvent is null after deserialization!");
                return;
            }

            Debug.Log($"[NetworkSync] üîç Deserialized: socketId='{data.socketId}', position=({data.position?.x}, {data.position?.y}, {data.position?.z})");

            if (string.IsNullOrEmpty(data.socketId))
            {
                Debug.LogError($"[NetworkSync] ‚ùå socketId is null or empty after deserialization!");
                Debug.LogError($"[NetworkSync] üîç Full PlayerMovedEvent object: socketId='{data.socketId}', timestamp={data.timestamp}");
                return;
            }

            // Skip our own updates - server should not send us our own position
            // but check anyway

            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                Vector3 pos = new Vector3(data.position.x, data.position.y, data.position.z);
                Quaternion rot = Quaternion.Euler(data.rotation.x, data.rotation.y, data.rotation.z);

                player.UpdatePosition(pos, rot);
                Debug.Log($"[NetworkSync] ‚úÖ Updated position for {data.socketId}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Network player {data.socketId} not found in dictionary. Available: {string.Join(", ", networkPlayers.Keys)}");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå Error in OnPlayerMoved: {ex.Message}\n{ex.StackTrace}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    /// </summary>
    private void OnAnimationChanged(string jsonData)
    {
        var data = JsonUtility.FromJson<AnimationChangedEvent>(jsonData);

        // Skip our own updates - server should not send us our own animation

        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            player.UpdateAnimation(data.animation);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—Ç–∞–∫—É –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerAttacked(string jsonData)
    {
        var data = JsonUtility.FromJson<PlayerAttackedEvent>(jsonData);
        Debug.Log($"[NetworkSync] ‚öîÔ∏è –ê—Ç–∞–∫–∞: {data.socketId}, —Ç–∏–ø: {data.attackType}, —Ü–µ–ª—å: {data.targetType} {data.targetId}");

        // Play attack animation on attacker (if it's a network player)
        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer attacker))
        {
            attacker.PlayAttackAnimation(data.attackType);
        }

        // If target is a player and it's us, apply damage
        // Note: We need to track our socket ID from room_players event
        // For now, server handles damage logic
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnHealthChanged(string jsonData)
    {
        var data = JsonUtility.FromJson<HealthChangedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üíî –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ {data.socketId}: {data.currentHealth}/{data.maxHealth}");

        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            player.ShowDamage(data.damage);
            // TODO: Update health bar
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerDied(string jsonData)
    {
        var data = JsonUtility.FromJson<PlayerDiedEvent>(jsonData);
        Debug.Log($"[NetworkSync] ‚ò†Ô∏è –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±: {data.socketId}, –£–±–∏–π—Ü–∞: {data.killerId}");

        // Check if it's a network player
        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            // Play death animation
            player.UpdateAnimation("Dead");
        }
        // If not in networkPlayers, it might be us - handle in HealthSystem
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerRespawned(string jsonData)
    {
        var data = JsonUtility.FromJson<PlayerRespawnedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üîÑ –ò–≥—Ä–æ–∫ –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è: {data.socketId}");

        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            Vector3 spawnPos = new Vector3(data.position.x, data.position.y, data.position.z);
            player.OnRespawn(spawnPos);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤—Ä–∞–≥–∞
    /// </summary>
    private void OnEnemyHealthChanged(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyHealthChangedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üê∫ –í—Ä–∞–≥ {data.enemyId} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω: {data.damage}, –∑–¥–æ—Ä–æ–≤—å–µ: {data.currentHealth}");

        // TODO: Find enemy by ID and update its health
        // This will be implemented when we have enemy manager
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å –≤—Ä–∞–≥–∞
    /// </summary>
    private void OnEnemyDied(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyDiedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üíÄ –í—Ä–∞–≥ {data.enemyId} —É–±–∏—Ç –∏–≥—Ä–æ–∫–æ–º {data.killerUsername}");

        // TODO: Find enemy by ID and play death animation
        // This will be implemented when we have enemy manager
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å–ø–∞–≤–Ω –≤—Ä–∞–≥–∞
    /// </summary>
    private void OnEnemyRespawned(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyRespawnedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üîÑ –í—Ä–∞–≥ {data.enemyId} ({data.enemyType}) –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è");

        // TODO: Respawn enemy at position
        // This will be implemented when we have enemy manager
    }


    // ===== NETWORK PLAYER MANAGEMENT =====

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SpawnNetworkPlayer(string socketId, string username, string characterClass, Vector3 position)
    {
        GameObject prefab = GetCharacterPrefab(characterClass);
        if (prefab == null)
        {
            Debug.LogError($"[NetworkSync] –ü—Ä–µ—Ñ–∞–± –¥–ª—è –∫–ª–∞—Å—Å–∞ {characterClass} –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        GameObject playerObj = Instantiate(prefab, position, Quaternion.identity);
        playerObj.name = $"NetworkPlayer_{username}";
        playerObj.layer = LayerMask.NameToLayer("Character");

        // –í–ê–ñ–ù–û: –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ—Ñ–∞–±–∞
        Transform modelTransform = playerObj.transform.Find("Model") ?? playerObj.transform;

        // –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        var playerController = modelTransform.GetComponent<PlayerController>();
        if (playerController != null)
        {
            playerController.enabled = false;
            Debug.Log($"[NetworkSync] –û—Ç–∫–ª—é—á–µ–Ω PlayerController –¥–ª—è {username}");
        }

        var cameraController = playerObj.GetComponentInChildren<Camera>();
        if (cameraController != null)
        {
            cameraController.gameObject.SetActive(false);
            Debug.Log($"[NetworkSync] –û—Ç–∫–ª—é—á–µ–Ω–∞ –∫–∞–º–µ—Ä–∞ –¥–ª—è {username}");
        }

        // –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ä—É–∂–∏–µ –∏–∑ WeaponDatabase
        SetupNetworkPlayerWeapon(modelTransform, characterClass);

        // Add NetworkPlayer component
        NetworkPlayer networkPlayer = playerObj.AddComponent<NetworkPlayer>();
        networkPlayer.socketId = socketId;
        networkPlayer.username = username;
        networkPlayer.characterClass = characterClass;

        // Set nameplate prefab
        if (nameplatePrefab != null)
        {
            // Assign via reflection or make it public
            var field = typeof(NetworkPlayer).GetField("nameplatePrefab", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            field?.SetValue(networkPlayer, nameplatePrefab);
        }

        networkPlayers[socketId] = networkPlayer;

        Debug.Log($"[NetworkSync] ‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫: {username} ({characterClass}) —Å –æ—Ä—É–∂–∏–µ–º");
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ä—É–∂–∏–µ –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SetupNetworkPlayerWeapon(Transform modelTransform, string characterClass)
    {
        // –ù–∞–π—Ç–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å ClassWeaponManager
        var weaponManager = modelTransform.GetComponent<ClassWeaponManager>();
        if (weaponManager == null)
        {
            weaponManager = modelTransform.gameObject.AddComponent<ClassWeaponManager>();
            Debug.Log($"[NetworkSync] –î–æ–±–∞–≤–ª–µ–Ω ClassWeaponManager –¥–ª—è {characterClass}");
        }

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å WeaponDatabase
        var weaponDatabase = Resources.Load<WeaponDatabase>("WeaponDatabase");
        if (weaponDatabase != null)
        {
            // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ
            var characterClassEnum = (CharacterClass)System.Enum.Parse(typeof(CharacterClass), characterClass);

            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏–ª–∏ –¥–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º
            var method = typeof(ClassWeaponManager).GetMethod("AttachWeaponForClass", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (method != null)
            {
                method.Invoke(weaponManager, null);
                Debug.Log($"[NetworkSync] ‚úÖ –û—Ä—É–∂–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –¥–ª—è {characterClass}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ AttachWeaponForClass");
            }
        }
        else
        {
            Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è WeaponDatabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Resources");
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void RemoveNetworkPlayer(string socketId)
    {
        if (networkPlayers.TryGetValue(socketId, out NetworkPlayer player))
        {
            Destroy(player.gameObject);
            networkPlayers.Remove(socketId);
            Debug.Log($"[NetworkSync] –£–¥–∞–ª–µ–Ω —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫: {socketId}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∫–ª–∞—Å—Å—É
    /// </summary>
    private GameObject GetCharacterPrefab(string characterClass)
    {
        switch (characterClass)
        {
            case "Warrior": return warriorPrefab;
            case "Mage": return magePrefab;
            case "Archer": return archerPrefab;
            case "Rogue": return roguePrefab;
            case "Paladin": return paladinPrefab;
            default:
                Debug.LogWarning($"[NetworkSync] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å: {characterClass}");
                return warriorPrefab; // Fallback
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É—Ä–æ–Ω –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    /// </summary>
    private void ApplyDamageToLocalPlayer(float damage)
    {
        if (localPlayer == null) return;

        var healthSystem = localPlayer.GetComponent<HealthSystem>();
        if (healthSystem != null)
        {
            healthSystem.TakeDamage((int)damage);
            Debug.Log($"[NetworkSync] –ü–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω: {damage}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnLocalPlayerDied()
    {
        Debug.Log("[NetworkSync] –ú—ã –ø–æ–≥–∏–±–ª–∏!");

        // TODO: Show death screen, respawn button
        // For now, auto-respawn after 5 seconds
        Invoke(nameof(RequestRespawn), 5f);
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    private void RequestRespawn()
    {
        if (localPlayer != null && spawnPoints != null && spawnPoints.Length > 0)
        {
            // Choose random spawn point
            Transform spawnPoint = spawnPoints[UnityEngine.Random.Range(0, spawnPoints.Length)];
            Vector3 spawnPos = spawnPoint != null ? spawnPoint.position : Vector3.zero;

            // TODO: Add SendRespawn method to SocketIOManager
            // SocketIOManager.Instance.SendRespawn(spawnPos);
            Debug.LogWarning("[NetworkSync] SendRespawn not yet implemented in SocketIOManager");
        }
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã)
    /// </summary>
    public void ClearAllNetworkPlayers()
    {
        foreach (var player in networkPlayers.Values)
        {
            if (player != null)
            {
                Destroy(player.gameObject);
            }
        }
        networkPlayers.Clear();
        Debug.Log("[NetworkSync] –í—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
    }

    void OnDestroy()
    {
        // Note: SocketIOManager handles event cleanup internally
        // We don't need to manually unsubscribe
        Debug.Log("[NetworkSync] NetworkSyncManager destroyed");
    }
}

// ===== EVENT DATA CLASSES (matching multiplayer.js server) =====

/// <summary>
/// Response when joining a room (room_players event)
/// </summary>
[Serializable]
public class RoomPlayersResponse
{
    public RoomPlayerInfo[] players;
    public string yourSocketId;
}

[Serializable]
public class RoomPlayerInfo
{
    public string socketId;
    public string username;
    public string characterClass;
    public Vector3Data position;
    public Vector3Data rotation;
    public string animation;
    public float health;
    public float maxHealth;
}

/// <summary>
/// Player joined event
/// </summary>
[Serializable]
public class PlayerJoinedEvent
{
    public string socketId;
    public string username;
    public string characterClass;
    public Vector3Data position;
    public Vector3Data rotation;
}

/// <summary>
/// Player left event
/// </summary>
[Serializable]
public class PlayerLeftEvent
{
    public string socketId;
    public string username;
}

/// <summary>
/// Player moved event
/// </summary>
[Serializable]
public class PlayerMovedEvent
{
    public string socketId;
    public Vector3Data position;
    public Vector3Data rotation;
    public Vector3Data velocity;
    public bool isGrounded;
    public long timestamp;
}

/// <summary>
/// Animation changed event
/// </summary>
[Serializable]
public class AnimationChangedEvent
{
    public string socketId;
    public string animation;
    public float speed;
    public long timestamp;
}

/// <summary>
/// Player attacked event
/// </summary>
[Serializable]
public class PlayerAttackedEvent
{
    public string socketId;
    public string attackType;
    public string targetType;
    public string targetId;
    public float damage;
    public Vector3Data position;
    public Vector3Data direction;
    public int skillId;
    public long timestamp;
}

/// <summary>
/// Player health changed event
/// </summary>
[Serializable]
public class HealthChangedEvent
{
    public string socketId;
    public float damage;
    public float currentHealth;
    public float maxHealth;
    public string attackerId;
    public long timestamp;
}

/// <summary>
/// Player died event
/// </summary>
[Serializable]
public class PlayerDiedEvent
{
    public string socketId;
    public string killerId;
    public long timestamp;
}

/// <summary>
/// Player respawned event
/// </summary>
[Serializable]
public class PlayerRespawnedEvent
{
    public string socketId;
    public Vector3Data position;
    public float health;
    public long timestamp;
}

/// <summary>
/// Enemy health changed event
/// </summary>
[Serializable]
public class EnemyHealthChangedEvent
{
    public string enemyId;
    public float damage;
    public float currentHealth;
    public string attackerId;
    public long timestamp;
}

/// <summary>
/// Enemy died event
/// </summary>
[Serializable]
public class EnemyDiedEvent
{
    public string enemyId;
    public string killerId;
    public string killerUsername;
    public Vector3Data position;
    public long timestamp;
}

/// <summary>
/// Enemy respawned event
/// </summary>
[Serializable]
public class EnemyRespawnedEvent
{
    public string enemyId;
    public string enemyType;
    public Vector3Data position;
    public float health;
    public long timestamp;
}

/// <summary>
/// Vector3 serializable for JSON
/// </summary>
[Serializable]
public class Vector3Data
{
    public float x;
    public float y;
    public float z;
}
