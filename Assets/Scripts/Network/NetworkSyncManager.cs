using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using Newtonsoft.Json;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Å–µ—Ç–µ–≤—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
/// </summary>
public class NetworkSyncManager : MonoBehaviour
{
    public static NetworkSyncManager Instance { get; private set; }

    [Header("Settings")]
    [Tooltip("–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π (—Å–µ–∫—É–Ω–¥—ã). 0.0167 = 60Hz, 0.033 = 30Hz, 0.05 = 20Hz")]
    [SerializeField] private float positionSyncInterval = 0.05f; // 20 Hz - –û–ü–¢–ò–ú–ê–õ–¨–ù–û –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏/—Ç—Ä–∞—Ñ–∏–∫–∞ (–±—ã–ª–æ 60Hz = 0.0167)
    [SerializeField] private bool syncEnabled = true;

    [Header("Spawn Points")]
    [SerializeField] private Transform[] spawnPoints;

    [Header("Character Prefabs")]
    [SerializeField] private GameObject warriorPrefab;
    [SerializeField] private GameObject magePrefab;
    [SerializeField] private GameObject archerPrefab;
    [SerializeField] private GameObject roguePrefab;
    [SerializeField] private GameObject paladinPrefab;

    [Header("UI")]
    [SerializeField] private GameObject nameplatePrefab;

    // Network players
    private Dictionary<string, NetworkPlayer> networkPlayers = new Dictionary<string, NetworkPlayer>();

    // Player data cache (–¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞—Å–ø–∞–≤–Ω–∏–ª–∏—Å—å)
    private Dictionary<string, RoomPlayerInfo> pendingPlayers = new Dictionary<string, RoomPlayerInfo>();

    // Local player reference
    private GameObject localPlayer;
    private string localPlayerClass;
    private string localPlayerSocketId; // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ù–∞—à socketId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–Ω–∞
    private float lastPositionSync = 0f;
    private string lastAnimationState = "Idle";
    private Vector3 lastSentPosition = Vector3.zero; // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    private Quaternion lastSentRotation = Quaternion.identity; // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–∏
    private const float positionThreshold = 0.01f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (1—Å–º)
    private const float rotationThreshold = 1f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (1 –≥—Ä–∞–¥—É—Å)

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Start()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ä–µ–∂–∏–º–µ
        string roomId = PlayerPrefs.GetString("CurrentRoomId", "");
        if (string.IsNullOrEmpty(roomId))
        {
            Debug.Log("[NetworkSync] –ù–µ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ, –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é");
            enabled = false;
            return;
        }

        // Subscribe to WebSocket events FIRST
        SubscribeToNetworkEvents();

        // –í–ê–ñ–ù–û: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –ü–û–°–õ–ï –ø–æ–¥–ø–∏—Å–∫–∏
        // –ü–æ—Ç–æ–º—É —á—Ç–æ –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ room_players –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—à–ª–æ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ ArenaScene
        Debug.Log("[NetworkSync] üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ...");
        if (SocketIOManager.Instance != null)
        {
            SocketIOManager.Instance.RequestRoomPlayers();
        }
    }


    void Update()
    {
        if (!syncEnabled)
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (SocketIOManager.Instance == null || !SocketIOManager.Instance.IsConnected)
            return;

        // Send local player position to server
        if (Time.time - lastPositionSync > positionSyncInterval)
        {
            SyncLocalPlayerPosition();
            SyncLocalPlayerAnimation();  // –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            lastPositionSync = Time.time;
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    private void SubscribeToNetworkEvents()
    {
        if (SocketIOManager.Instance == null)
        {
            Debug.LogError("[NetworkSync] SocketIOManager –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // Room players list (when we join)
        SocketIOManager.Instance.On("room_players", OnRoomPlayers);
        SocketIOManager.Instance.On("player_joined", OnPlayerJoined);
        SocketIOManager.Instance.On("player_left", OnPlayerLeft);
        SocketIOManager.Instance.On("player_moved", OnPlayerMoved);
        SocketIOManager.Instance.On("player_animation_changed", OnAnimationChanged); // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–µ–ø–µ—Ä—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º!
        SocketIOManager.Instance.On("player_attacked", OnPlayerAttacked);
        SocketIOManager.Instance.On("player_used_skill", OnPlayerSkillUsed); // –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–∫–∏–ª–ª–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ player_skill_used)
        SocketIOManager.Instance.On("projectile_spawned", OnProjectileSpawned); // –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–Ω–∞—Ä—è–¥–æ–≤ (Fireball, Lightning –∏ —Ç.–¥.)
        SocketIOManager.Instance.On("visual_effect_spawned", OnVisualEffectSpawned); // –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–≤–∑—Ä—ã–≤—ã, –∞—É—Ä—ã, –≥–æ—Ä–µ–Ω–∏–µ –∏ —Ç.–¥.)
        SocketIOManager.Instance.On("player_transformed", OnPlayerTransformed); // –ù–û–í–û–ï: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        SocketIOManager.Instance.On("player_transformation_ended", OnPlayerTransformationEnded); // –ù–û–í–û–ï: –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        SocketIOManager.Instance.On("player_health_changed", OnHealthChanged);
        SocketIOManager.Instance.On("player_died", OnPlayerDied);
        SocketIOManager.Instance.On("player_respawned", OnPlayerRespawned);

        // Enemy events
        SocketIOManager.Instance.On("enemy_health_changed", OnEnemyHealthChanged);
        SocketIOManager.Instance.On("enemy_damaged_by_server", OnEnemyDamagedByServer);
        SocketIOManager.Instance.On("enemy_died", OnEnemyDied);
        SocketIOManager.Instance.On("enemy_respawned", OnEnemyRespawned);

        // LOBBY SYSTEM EVENTS (10-second wait + countdown)
        SocketIOManager.Instance.On("lobby_created", OnLobbyCreated);
        SocketIOManager.Instance.On("game_countdown", OnGameCountdown);
        SocketIOManager.Instance.On("game_start", OnGameStart);

        Debug.Log("[NetworkSync] ‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void SetLocalPlayer(GameObject player, string characterClass)
    {
        localPlayer = player;
        localPlayerClass = characterClass;
        Debug.Log($"[NetworkSync] ‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {characterClass}");
        Debug.Log($"[NetworkSync] üîç localPlayer: {(localPlayer != null ? localPlayer.name : "NULL")}");
        Debug.Log($"[NetworkSync] üîç SocketIOManager.Instance: {(SocketIOManager.Instance != null ? "EXISTS" : "NULL")}");
        Debug.Log($"[NetworkSync] üîç SocketIOManager.IsConnected: {(SocketIOManager.Instance != null ? SocketIOManager.Instance.IsConnected.ToString() : "N/A")}");
        Debug.Log($"[NetworkSync] üîç syncEnabled: {syncEnabled}");
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¢–û–õ–¨–ö–û –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏/—Ä–æ—Ç–∞—Ü–∏–∏
    /// </summary>
    private void SyncLocalPlayerPosition()
    {
        if (localPlayer == null || SocketIOManager.Instance == null || !SocketIOManager.Instance.IsConnected)
            return;

        // Get velocity –∏ –ø–æ–∑–∏—Ü–∏—é
        Vector3 velocity = Vector3.zero;
        bool isGrounded = true;
        Vector3 position = localPlayer.transform.position;
        Quaternion rotation = localPlayer.transform.rotation;

        var controller = localPlayer.GetComponent<CharacterController>();
        if (controller != null)
        {
            velocity = controller.velocity;
            isGrounded = controller.isGrounded;
        }
        else
        {
            var rigidbody = localPlayer.GetComponent<Rigidbody>();
            if (rigidbody != null)
            {
                velocity = rigidbody.linearVelocity;
            }
        }

        // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –ø–æ–∑–∏—Ü–∏—è/—Ä–æ—Ç–∞—Ü–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ
        float positionDelta = Vector3.Distance(position, lastSentPosition);
        float rotationDelta = Quaternion.Angle(rotation, lastSentRotation);
        bool isMoving = velocity.sqrMagnitude > 0.01f; // –ò–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è?

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏:
        // 1. –ò–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è (velocity > 0)
        // 2. –ò–õ–ò –ø–æ–∑–∏—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ –ø–æ—Ä–æ–≥ (0.01m = 1—Å–º)
        // 3. –ò–õ–ò —Ä–æ—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ –ø–æ—Ä–æ–≥ (1 –≥—Ä–∞–¥—É—Å)
        if (isMoving || positionDelta > positionThreshold || rotationDelta > rotationThreshold)
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            lastSentPosition = position;
            lastSentRotation = rotation;

            // Send to server
            SocketIOManager.Instance.UpdatePosition(position, rotation, velocity, isGrounded);

            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 20-—é –æ—Ç–ø—Ä–∞–≤–∫—É (1 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏ 20Hz)
            if (Time.frameCount % 20 == 0)
            {
                Debug.Log($"[NetworkSync] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏: pos=({position.x:F1}, {position.y:F1}, {position.z:F1}), vel=({velocity.x:F1}, {velocity.y:F1}, {velocity.z:F1}), rot={rotation.eulerAngles.y:F0}¬∞");
            }
        }
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (—ç–∫–æ–Ω–æ–º–∏–º —Ç—Ä–∞—Ñ–∏–∫)
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SyncLocalPlayerAnimation()
    {
        if (localPlayer == null)
        {
            Debug.LogWarning("[NetworkSync] ‚ö†Ô∏è SyncLocalPlayerAnimation: localPlayer == NULL!");
            return;
        }

        if (SocketIOManager.Instance == null)
        {
            Debug.LogWarning("[NetworkSync] ‚ö†Ô∏è SyncLocalPlayerAnimation: SocketIOManager.Instance == NULL!");
            return;
        }

        if (!SocketIOManager.Instance.IsConnected)
        {
            // –ù–µ —Å–ø–∞–º–∏–º –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            return;
        }

        string currentState = GetLocalPlayerAnimationState();

        // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –æ–Ω–∞ –ò–ó–ú–ï–ù–ò–õ–ê–°–¨!
        if (currentState != lastAnimationState)
        {
            Debug.Log($"[NetworkSync] üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {lastAnimationState} ‚Üí {currentState}");
            lastAnimationState = currentState;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            SocketIOManager.Instance.UpdateAnimation(currentState);
        }
        // –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (—ç–∫–æ–Ω–æ–º–∏–º —Ç—Ä–∞—Ñ–∏–∫)
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private string GetLocalPlayerAnimationState()
    {
        if (localPlayer == null) return "Idle";

        // –í–ê–ñ–ù–û: Animator –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Å–∞–º–æ–º –æ–±—ä–µ–∫—Ç–µ –∏–ª–∏ –≤ –¥–æ—á–µ—Ä–Ω–µ–º Model
        var animator = localPlayer.GetComponent<Animator>();
        if (animator == null)
        {
            animator = localPlayer.GetComponentInChildren<Animator>();
        }

        if (animator == null)
        {
            Debug.LogWarning("[NetworkSync] ‚ö†Ô∏è Animator –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞!");
            return "Idle";
        }

        // –í–ê–ñ–ù–û: PlayerController –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Blend Tree —Å MoveX/MoveY/IsMoving
        // –ê –Ω–µ –ø—Ä–æ—Å—Ç—ã–µ bool –ø–∞—Ä–∞–º–µ—Ç—Ä—ã isWalking/isRunning

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞—Ç–∞–∫—É (—Ç—Ä–∏–≥–≥–µ—Ä)
        if (HasParameter(animator, "isAttacking") && animator.GetBool("isAttacking"))
            return "Attacking";

        if (HasParameter(animator, "isDead") && animator.GetBool("isDead"))
            return "Dead";

        // PlayerController –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IsMoving (bool) –∏ MoveY (float)
        bool isMoving = HasParameter(animator, "IsMoving") && animator.GetBool("IsMoving");

        if (isMoving)
        {
            // MoveY –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å: 0.5 = Walking, 1.0 = Running
            if (HasParameter(animator, "MoveY"))
            {
                float moveY = animator.GetFloat("MoveY");

                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                if (Time.frameCount % 60 == 0)
                {
                    Debug.Log($"[NetworkSync] üé≠ Animator parameters: IsMoving={isMoving}, MoveY={moveY:F2}");
                }

                // MoveY > 0.7 = Running, –∏–Ω–∞—á–µ Walking
                return moveY > 0.7f ? "Running" : "Walking";
            }
            else
            {
                // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç MoveY, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ Walking
                return "Walking";
            }
        }

        return "Idle";
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Animator
    /// </summary>
    private bool HasParameter(Animator animator, string paramName)
    {
        foreach (AnimatorControllerParameter param in animator.parameters)
        {
            if (param.name == paramName) return true;
        }
        return false;
    }

    // ===== NETWORK EVENT HANDLERS =====

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ (–∫–æ–≥–¥–∞ –º—ã –≤—Ö–æ–¥–∏–º)
    /// </summary>
    private void OnRoomPlayers(string jsonData)
    {
        Debug.Log($"[NetworkSync] üì¶ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ. JSON: {jsonData}");

        try
        {
            var data = JsonConvert.DeserializeObject<RoomPlayersResponse>(jsonData);

            if (data == null || data.players == null)
            {
                Debug.LogError("[NetworkSync] ‚ùå Failed to parse RoomPlayersResponse");
                return;
            }

            Debug.Log($"[NetworkSync] –í –∫–æ–º–Ω–∞—Ç–µ {data.players.Length} –∏–≥—Ä–æ–∫–æ–≤");
            Debug.Log($"[NetworkSync] –ú–æ–π socketId: {data.yourSocketId}");
            Debug.Log($"[NetworkSync] üéØ –ú–æ–π spawnIndex –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.yourSpawnIndex}");

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—à socketId –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            localPlayerSocketId = data.yourSocketId;

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –≤ ArenaManager
            if (ArenaManager.Instance != null)
            {
                ArenaManager.Instance.SetSpawnIndex(data.yourSpawnIndex);
                Debug.Log($"[NetworkSync] ‚úÖ –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ArenaManager: {data.yourSpawnIndex}");
            }
            else
            {
                Debug.LogWarning("[NetworkSync] ‚ö†Ô∏è ArenaManager.Instance == null! –ù–µ –º–æ–≥—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å spawnIndex");
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –†–ï–ê–õ–¨–ù–û –ª–∏ –∏–≥—Ä–∞ –£–ñ–ï –ù–ê–ß–ê–õ–ê–°–¨!
            // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å = 2+ –∏–≥—Ä–æ–∫–æ–≤ –ò countdown –£–ñ–ï –ø—Ä–æ—à–µ–ª (gameStarted == true –≤ ArenaManager)
            // –ò–≥—Ä–∞ –ù–ï –Ω–∞—á–∞–ª–∞—Å—å = –ª–æ–±–±–∏ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –∂–¥–µ–º –∏–≥—Ä–æ–∫–æ–≤
            bool gameAlreadyStarted = data.players.Length >= 2 &&
                                     ArenaManager.Instance != null &&
                                     ArenaManager.Instance.IsGameStarted();

            if (gameAlreadyStarted)
            {
                Debug.Log($"[NetworkSync] üéÆ –ò–≥—Ä–∞ –£–ñ–ï –ò–î–ï–¢ ({data.players.Length} –∏–≥—Ä–æ–∫–æ–≤)! –°–ø–∞–≤–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å—Ä–∞–∑—É (JOIN EXISTING GAME)");

                // –í–ê–ñ–ù–û: –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ –∫–æ—Ä—É—Ç–∏–Ω—É, —á—Ç–æ–±—ã ArenaManager.Start() —É—Å–ø–µ–ª –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
                StartCoroutine(SpawnLocalPlayerDelayed());
            }
            else
            {
                Debug.Log($"[NetworkSync] ‚è≥ –ò–≥—Ä–∞ –µ—â—ë –ù–ï –Ω–∞—á–∞–ª–∞—Å—å (–ª–æ–±–±–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ), –ù–ï —Å–ø–∞–≤–Ω–∏–º —Å–µ–±—è, –∂–¥–µ–º game_start");
            }

            // Spawn all existing players
            foreach (var playerData in data.players)
            {
                Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫: {playerData.username} (socketId: {playerData.socketId}, class: {playerData.characterClass})");

                // Skip ourselves
                if (playerData.socketId == data.yourSocketId)
                {
                    Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –º—ã —Å–∞–º–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                    continue;
                }

                if (gameAlreadyStarted)
                {
                    // –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å - –°–ü–ê–í–ù–ò–ú –°–†–ê–ó–£!
                    Debug.Log($"[NetworkSync] üé¨ –°–ø–∞–≤–Ω–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ {playerData.username} —Å—Ä–∞–∑—É (–∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å)");

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º spawn point –ø–æ –∏–Ω–¥–µ–∫—Å—É
                    Vector3 spawnPos = Vector3.zero;
                    if (spawnPoints != null && playerData.spawnIndex >= 0 && playerData.spawnIndex < spawnPoints.Length)
                    {
                        spawnPos = spawnPoints[playerData.spawnIndex].position;
                    }
                    else
                    {
                        spawnPos = new Vector3(playerData.position.x, playerData.position.y, playerData.position.z);
                    }

                    SpawnNetworkPlayer(playerData.socketId, playerData.username, playerData.characterClass, spawnPos, playerData.stats);
                }
                else
                {
                    // –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å - –¥–æ–±–∞–≤–ª—è–µ–º –≤ pending (–∂–¥–µ–º game_start)
                    pendingPlayers[playerData.socketId] = playerData;
                    Debug.Log($"[NetworkSync] ‚è≥ –ò–≥—Ä–æ–∫ {playerData.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ pending, –∑–∞—Å–ø–∞–≤–Ω–∏—Ç—Å—è –ø—Ä–∏ game_start");
                }
            }

            Debug.Log($"[NetworkSync] üìä –í—Å–µ–≥–æ —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {networkPlayers.Count}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå Error in OnRoomPlayers: {ex.Message}\n{ex.StackTrace}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerJoined(string jsonData)
    {
        Debug.Log($"[NetworkSync] üì• RAW player_joined JSON: {jsonData}");

        var data = JsonConvert.DeserializeObject<PlayerJoinedEvent>(jsonData);
        Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {data.username} ({data.characterClass}), socketId={data.socketId}");

        // Don't create network player for ourselves
        // SocketIOManager doesn't have SessionId, so we compare with our socket ID from room_players
        // For now, skip this check - room_players already filters us out

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ù–ï —Å–ø–∞–≤–Ω–∏–º —Å—Ä–∞–∑—É - –∂–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ player_moved —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ pending (–∫–∞–∫ –≤ CS:GO/Dota)
        RoomPlayerInfo playerInfo = new RoomPlayerInfo
        {
            socketId = data.socketId,
            username = data.username,
            characterClass = data.characterClass,
            spawnIndex = data.spawnIndex,
            position = new Vector3Data { x = 0, y = 0, z = 0 }, // –ü–æ–∑–∏—Ü–∏—è –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
            stats = data.stats // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º SPECIAL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!
        };

        pendingPlayers[data.socketId] = playerInfo;
        Debug.Log($"[NetworkSync] ‚è≥ –ò–≥—Ä–æ–∫ {data.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ pending –ø–æ –∫–ª—é—á—É socketId={data.socketId} (STR={data.stats?.strength ?? 5}), –∂–¥–µ–º game_start...");

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–±–±–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ+ –∏–≥—Ä–æ–∫–∞, –ù–û –ù–ï –°–ü–ê–í–ù–ò–ú –ï–ì–û –°–†–ê–ó–£!
        // –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å lobby_created, –Ω–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª - –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–∏
        // –í–ê–ñ–ù–û: +1 –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–º—ã —Å–∞–º–∏), –∫–æ—Ç–æ—Ä—ã–π –ù–ï –≤ networkPlayers!
        int totalPlayers = networkPlayers.Count + pendingPlayers.Count + 1;
        Debug.Log($"[NetworkSync] üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: {totalPlayers} (network={networkPlayers.Count}, pending={pendingPlayers.Count}, local=1)");

        if (totalPlayers >= 2 && ArenaManager.Instance != null)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ª–æ–±–±–∏
            var lobbyUI = GameObject.Find("LobbyUI");
            if (lobbyUI == null)
            {
                Debug.Log($"[NetworkSync] üèÅ FALLBACK: –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–±–±–∏ –ª–æ–∫–∞–ª—å–Ω–æ (–≤—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {totalPlayers})");
                ArenaManager.Instance.OnLobbyStarted(20000); // 20 —Å–µ–∫—É–Ω–¥
            }
            else
            {
                Debug.Log($"[NetworkSync] ‚è≠Ô∏è LobbyUI —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ");
            }
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerLeft(string jsonData)
    {
        var data = JsonConvert.DeserializeObject<PlayerLeftEvent>(jsonData);
        Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {data.username} ({data.socketId})");

        RemoveNetworkPlayer(data.socketId);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    /// </summary>
    private void OnPlayerMoved(string jsonData)
    {
        try
        {
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï player_moved —Å–æ–±—ã—Ç–∏—è (–û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            // Debug.Log($"[NetworkSync] üì• RAW position data: {jsonData}");

            var data = JsonConvert.DeserializeObject<PlayerMovedEvent>(jsonData);

            if (data == null || string.IsNullOrEmpty(data.socketId))
                return;

            Vector3 pos = new Vector3(data.position.x, data.position.y, data.position.z);
            Quaternion rot = Quaternion.Euler(data.rotation.x, data.rotation.y, data.rotation.z);
            Vector3 vel = Vector3.zero;
            if (data.velocity != null)
            {
                vel = new Vector3(data.velocity.x, data.velocity.y, data.velocity.z);
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –°–ü–ê–í–ù–ò–ú pending –∏–≥—Ä–æ–∫–æ–≤ –ø–æ player_moved!
            // –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –∑–∞—Å–ø–∞–≤–Ω–∏—Ç—å—Å—è –¢–û–õ–¨–ö–û –ø–æ —Å–æ–±—ã—Ç–∏—é game_start (–ø–æ—Å–ª–µ –ª–æ–±–±–∏ –∏ countdown)
            // –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å–ø–∞–≤–Ω–∏–ª –ø—Ä–∏ –ø–µ—Ä–≤–æ–º player_moved - —ç—Ç–æ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!

            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                if (player == null || player.gameObject == null)
                {
                    networkPlayers.Remove(data.socketId);
                    return;
                }

                float timestamp = data.timestamp > 0 ? (data.timestamp / 1000f) : Time.time;
                player.UpdatePosition(pos, rot, vel, timestamp);
            }
            else
            {
                // –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –≤ pending - —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è player_moved –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ {data.socketId}");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå Error in OnPlayerMoved: {ex.Message}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    /// </summary>
    private void OnAnimationChanged(string jsonData)
    {
        try
        {
            Debug.Log($"[NetworkSync] üì• RAW animation data: {jsonData}");

            var data = JsonConvert.DeserializeObject<AnimationChangedEvent>(jsonData);

            if (data == null)
            {
                Debug.LogError($"[NetworkSync] ‚ùå Failed to deserialize animation data!");
                return;
            }

            Debug.Log($"[NetworkSync] üì• –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: socketId={data.socketId}, animation={data.animation}");

            // Skip our own updates - server should not send us our own animation

            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
                if (player == null || player.gameObject == null)
                {
                    Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Player {data.socketId} is destroyed (animation), removing from dictionary");
                    networkPlayers.Remove(data.socketId);
                    return;
                }

                player.UpdateAnimation(data.animation);
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞: {data.socketId}");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå Error in OnAnimationChanged: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—Ç–∞–∫—É –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerAttacked(string jsonData)
    {
        Debug.Log($"[NetworkSync] ‚öîÔ∏è RAW player_attacked JSON: {jsonData}");

        try
        {
            var data = JsonUtility.FromJson<PlayerAttackedEvent>(jsonData);
            Debug.Log($"[NetworkSync] ‚öîÔ∏è –ê—Ç–∞–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: socketId={data.socketId}, attackType={data.attackType}, targetType={data.targetType}, targetId={data.targetId}");

            // Play attack animation on attacker (if it's a network player)
            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer attacker))
            {
                Debug.Log($"[NetworkSync] ‚öîÔ∏è –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏ –¥–ª—è {attacker.username}, —Ç–∏–ø: {data.attackType}");
                attacker.PlayAttackAnimation(data.attackType);
                Debug.Log($"[NetworkSync] ‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {attacker.username}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ê—Ç–∞–∫—É—é—â–∏–π –∏–≥—Ä–æ–∫ {data.socketId} –ù–ï –ù–ê–ô–î–ï–ù –≤ networkPlayers! –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {networkPlayers.Count}");
                foreach (var kvp in networkPlayers)
                {
                    Debug.Log($"[NetworkSync]    - {kvp.Key}: {kvp.Value.username}");
                }
            }

            // If target is a player and it's us, apply damage
            // Note: We need to track our socket ID from room_players event
            // For now, server handles damage logic
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –û—à–∏–±–∫–∞ –≤ OnPlayerAttacked: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ –∏–≥—Ä–æ–∫–æ–º (–ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–û)
    /// –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∞–Ω–∏–º–∞—Ü–∏—è + —Å–Ω–∞—Ä—è–¥—ã)
    /// –£—Ä–æ–Ω/–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (player_damaged –∏ —Ç.–¥.)
    /// </summary>
    private void OnPlayerSkillUsed(string jsonData)
    {
        Debug.Log($"[NetworkSync] ‚ö° RAW player_used_skill JSON: {jsonData}");

        try
        {
            var data = JsonConvert.DeserializeObject<PlayerSkillUsedEvent>(jsonData);
            Debug.Log($"[NetworkSync] ‚ö° –°–∫–∏–ª–ª –ø–æ–ª—É—á–µ–Ω: socketId={data.socketId}, skillId={data.skillId}, animationTrigger={data.animationTrigger}");

            // Skip if it's our own skill (we already executed it locally)
            if (data.socketId == localPlayerSocketId)
            {
                Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∫–∏–ª–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                return;
            }

            // Find the network player who used the skill
            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                Debug.Log($"[NetworkSync] ‚ö° –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∫–∏–ª–ª–∞ {data.skillId} –¥–ª—è {player.username}");

                // Get the skill from SkillDatabase
                SkillDatabase db = SkillDatabase.Instance;
                if (db == null)
                {
                    Debug.LogError($"[NetworkSync] ‚ùå SkillDatabase.Instance == null!");
                    return;
                }

                SkillData skill = db.GetSkillById(data.skillId);
                if (skill == null)
                {
                    Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –°–∫–∏–ª–ª —Å ID {data.skillId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SkillDatabase");
                    return;
                }

                // 1. –ü–†–û–ò–ì–†–´–í–ê–ï–ú –ê–ù–ò–ú–ê–¶–ò–Æ –ö–ê–°–¢–ê
                Animator animator = player.GetComponentInChildren<Animator>();
                if (animator != null && !string.IsNullOrEmpty(data.animationTrigger))
                {
                    animator.SetTrigger(data.animationTrigger);
                    if (data.animationSpeed > 0)
                    {
                        animator.speed = data.animationSpeed;
                    }
                    Debug.Log($"[NetworkSync] üé¨ –ê–Ω–∏–º–∞—Ü–∏—è '{data.animationTrigger}' –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {player.username}");
                }

                // 2. –°–û–ó–î–ê–Å–ú –°–ù–ê–†–Ø–î (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (skill.projectilePrefab != null)
                {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
                    Vector3 targetPosition = data.targetPosition != null
                        ? new Vector3(data.targetPosition.x, data.targetPosition.y, data.targetPosition.z)
                        : player.transform.position + player.transform.forward * 10f;

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                    player.StartCoroutine(SpawnSkillProjectile(player, skill, targetPosition, data.castTime));
                }

                // 3. –í–ò–ó–£–ê–õ–¨–ù–´–ô –≠–§–§–ï–ö–¢ –ö–ê–°–¢–ê (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (skill.visualEffectPrefab != null)
                {
                    Instantiate(skill.visualEffectPrefab, player.transform.position, Quaternion.identity);
                    Debug.Log($"[NetworkSync] ‚ú® –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {skill.skillName}");
                }

                // 4. –ó–í–£–ö –ö–ê–°–¢–ê (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (skill.castSound != null)
                {
                    AudioSource.PlayClipAtPoint(skill.castSound, player.transform.position);
                }

                Debug.Log($"[NetworkSync] ‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∫–∏–ª–ª–∞ {skill.skillName} –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è {player.username}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Network player {data.socketId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–ª–ª–∞");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –û—à–∏–±–∫–∞ –≤ OnPlayerSkillUsed: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–Ω–∞—Ä—è–¥ –¥–ª—è —Å–∫–∏–ª–ª–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Å—Ç–∞)
    /// </summary>
    private System.Collections.IEnumerator SpawnSkillProjectile(NetworkPlayer player, SkillData skill, Vector3 targetPosition, float delay)
    {
        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–∞—Å—Ç–∞
        if (delay > 0f)
        {
            yield return new WaitForSeconds(delay);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â—ë –∂–∏–≤
        if (player == null || player.gameObject == null)
        {
            Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è NetworkPlayer —É–Ω–∏—á—Ç–æ–∂–µ–Ω –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞");
            yield break;
        }

        // –°–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
        Vector3 spawnPos = player.transform.position + Vector3.up * 1.5f + player.transform.forward * 0.5f;
        Vector3 direction = (targetPosition - spawnPos).normalized;

        GameObject projectileObj = Instantiate(skill.projectilePrefab, spawnPos, Quaternion.LookRotation(direction));

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥
        Projectile projectile = projectileObj.GetComponent<Projectile>();
        if (projectile != null)
        {
            // –í–ê–ñ–ù–û: –î–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–Ω–∞—Ä—è–¥ –ß–ò–°–¢–û –í–ò–ó–£–ê–õ–¨–ù–´–ô (—É—Ä–æ–Ω = 0, owner = NetworkPlayer)
            projectile.Initialize(null, 0f, direction, player.gameObject);
            Debug.Log($"[NetworkSync] üöÄ –°–Ω–∞—Ä—è–¥ {skill.projectilePrefab.name} —Å–æ–∑–¥–∞–Ω –¥–ª—è {player.username}");
        }
        else
        {
            Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –£ –ø—Ä–µ—Ñ–∞–±–∞ {skill.projectilePrefab.name} –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Projectile!");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞ (–ù–û–í–û–ï - –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Fireball, Lightning –∏ —Ç.–¥.)
    /// </summary>
    private void OnProjectileSpawned(string jsonData)
    {
        Debug.Log($"[NetworkSync] üöÄ RAW projectile_spawned JSON: {jsonData}");

        try
        {
            var data = JsonConvert.DeserializeObject<ProjectileSpawnedEvent>(jsonData);
            Debug.Log($"[NetworkSync] üöÄ –°–Ω–∞—Ä—è–¥ –ø–æ–ª—É—á–µ–Ω: socketId={data.socketId}, skillId={data.skillId}");

            // Skip if it's our own projectile (we already created it locally)
            if (data.socketId == localPlayerSocketId)
            {
                Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–Ω–∞—Ä—è–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                return;
            }

            // Find the network player who spawned the projectile
            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                Debug.Log($"[NetworkSync] üöÄ –°–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥ –¥–ª—è {player.username}");

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞
                GameObject projectilePrefab = null;
                string projectileName = "";

                if (data.skillId == 0)
                {
                    // skillId = 0 –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—ã—á–Ω—É—é –∞—Ç–∞–∫—É (–Ω–µ —Å–∫–∏–ª–ª)
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∞–± –ø–æ –∫–ª–∞—Å—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    string className = player.characterClass;
                    projectileName = GetProjectilePrefabNameByClass(className);

                    if (!string.IsNullOrEmpty(projectileName))
                    {
                        projectilePrefab = Resources.Load<GameObject>($"Projectiles/{projectileName}");
                        Debug.Log($"[NetworkSync] üì¶ –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞ {className}: –∑–∞–≥—Ä—É–∂–∞–µ–º {projectileName}");
                    }
                }
                else
                {
                    // –≠—Ç–æ —Å–∫–∏–ª–ª - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ SkillDatabase
                    SkillDatabase db = SkillDatabase.Instance;
                    if (db == null)
                    {
                        Debug.LogError($"[NetworkSync] ‚ùå SkillDatabase.Instance == null!");
                        return;
                    }

                    SkillData skill = db.GetSkillById(data.skillId);
                    if (skill == null)
                    {
                        Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –°–∫–∏–ª–ª —Å ID {data.skillId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SkillDatabase");
                        return;
                    }

                    projectilePrefab = skill.projectilePrefab;
                    projectileName = skill.skillName;
                }

                if (projectilePrefab == null)
                {
                    Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {projectileName}");
                    return;
                }

                // –°–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥ –≤ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                Vector3 spawnPos = new Vector3(data.spawnPosition.x, data.spawnPosition.y, data.spawnPosition.z);
                Vector3 direction = new Vector3(data.direction.x, data.direction.y, data.direction.z).normalized;

                GameObject projectileObj = Instantiate(projectilePrefab, spawnPos, Quaternion.LookRotation(direction));

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å targetSocketId)
                Transform target = null;
                if (!string.IsNullOrEmpty(data.targetSocketId))
                {
                    if (networkPlayers.TryGetValue(data.targetSocketId, out NetworkPlayer targetPlayer))
                    {
                        target = targetPlayer.transform;
                    }
                    else if (data.targetSocketId == localPlayerSocketId && localPlayer != null)
                    {
                        target = localPlayer.transform;
                    }
                }

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥ (–ø—Ä–æ–≤–µ—Ä—è–µ–º CelestialProjectile, ArrowProjectile, –∑–∞—Ç–µ–º Projectile)
                CelestialProjectile celestialProjectile = projectileObj.GetComponent<CelestialProjectile>();
                ArrowProjectile arrowProjectile = projectileObj.GetComponent<ArrowProjectile>();

                if (celestialProjectile != null)
                {
                    // –í–ê–ñ–ù–û: isVisualOnly = true –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Å–Ω–∞—Ä—è–¥–æ–≤
                    celestialProjectile.Initialize(target, 0f, direction, player.gameObject, null, isVisualOnly: true);
                    Debug.Log($"[NetworkSync] ‚úÖ CelestialProjectile —Å–æ–∑–¥–∞–Ω –¥–ª—è {player.username} (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)");
                }
                else if (arrowProjectile != null)
                {
                    // –í–ê–ñ–ù–û: isVisualOnly = true –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Å–Ω–∞—Ä—è–¥–æ–≤
                    arrowProjectile.Initialize(target, 0f, direction, player.gameObject, null, isVisualOnly: true);
                    Debug.Log($"[NetworkSync] ‚úÖ ArrowProjectile —Å–æ–∑–¥–∞–Ω –¥–ª—è {player.username} (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)");
                }
                else
                {
                    Projectile projectile = projectileObj.GetComponent<Projectile>();
                    if (projectile != null)
                    {
                        // –í–ê–ñ–ù–û: –î–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ —Å–Ω–∞—Ä—è–¥–∞ —É—Ä–æ–Ω = 0 (–≤–∏–∑—É–∞–ª—å–Ω—ã–π)
                        projectile.Initialize(target, 0f, direction, player.gameObject);
                        Debug.Log($"[NetworkSync] ‚úÖ –°–Ω–∞—Ä—è–¥ {projectilePrefab.name} —Å–æ–∑–¥–∞–Ω –¥–ª—è {player.username}");
                    }
                    else
                    {
                        Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –£ –ø—Ä–µ—Ñ–∞–±–∞ {projectilePrefab.name} –Ω–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Projectile, CelestialProjectile –∏–ª–∏ ArrowProjectile!");
                    }
                }
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Network player {data.socketId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –û—à–∏–±–∫–∞ –≤ OnProjectileSpawned: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–ù–û–í–û–ï - –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∑—Ä—ã–≤–æ–≤, –∞—É—Ä, –≥–æ—Ä–µ–Ω–∏—è –∏ —Ç.–¥.)
    /// </summary>
    private void OnVisualEffectSpawned(string jsonData)
    {
        Debug.Log($"[NetworkSync] ‚ú® RAW visual_effect_spawned JSON: {jsonData}");

        try
        {
            var data = JsonConvert.DeserializeObject<VisualEffectSpawnedEvent>(jsonData);
            Debug.Log($"[NetworkSync] ‚ú® –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω: type={data.effectType}, prefab={data.effectPrefabName}, targetSocketId={data.targetSocketId}");

            // Skip if it's our own effect (we already created it locally)
            if (data.socketId == localPlayerSocketId)
            {
                Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
            Vector3 effectPosition = new Vector3(data.position.x, data.position.y, data.position.z);
            Quaternion effectRotation = Quaternion.Euler(data.rotation.x, data.rotation.y, data.rotation.z);
            Transform effectParent = null;

            // –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É - –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if (!string.IsNullOrEmpty(data.targetSocketId))
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –º—ã –∏–ª–∏ —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫
                if (data.targetSocketId == localPlayerSocketId && localPlayer != null)
                {
                    effectParent = localPlayer.transform;
                    Debug.Log($"[NetworkSync] ‚ú® –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –õ–û–ö–ê–õ–¨–ù–û–ú–£ –∏–≥—Ä–æ–∫—É");
                }
                else if (networkPlayers.TryGetValue(data.targetSocketId, out NetworkPlayer targetPlayer))
                {
                    effectParent = targetPlayer.transform;
                    Debug.Log($"[NetworkSync] ‚ú® –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å–µ—Ç–µ–≤–æ–º—É –∏–≥—Ä–æ–∫—É {targetPlayer.username}");
                }
                else
                {
                    Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ {data.targetSocketId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞");
                }
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å prefab —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–∑ Resources
            GameObject effectPrefab = TryLoadEffectPrefab(data.effectPrefabName);
            if (effectPrefab == null)
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Prefab —ç—Ñ—Ñ–µ–∫—Ç–∞ '{data.effectPrefabName}' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                return;
            }

            // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç
            GameObject effectObj = null;
            if (effectParent != null)
            {
                // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∏–≥—Ä–æ–∫—É (–¥–ª—è –∞—É—Ä, –±–∞—Ñ—Ñ–æ–≤)
                effectObj = Instantiate(effectPrefab, effectParent.position, effectRotation, effectParent);
                Debug.Log($"[NetworkSync] ‚ú® –≠—Ñ—Ñ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –∫–∞–∫ child –æ–±—ä–µ–∫—Ç –∏–≥—Ä–æ–∫–∞");
            }
            else
            {
                // –°–æ–∑–¥–∞—ë–º –≤ –º–∏—Ä–µ (–¥–ª—è –≤–∑—Ä—ã–≤–æ–≤, hit effects)
                effectObj = Instantiate(effectPrefab, effectPosition, effectRotation);
                Debug.Log($"[NetworkSync] ‚ú® –≠—Ñ—Ñ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö");
            }

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —É–Ω–∏—á—Ç–æ–∂–∞–µ–º —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            if (data.duration > 0f)
            {
                Destroy(effectObj, data.duration);
                Debug.Log($"[NetworkSync] ‚è±Ô∏è –≠—Ñ—Ñ–µ–∫—Ç –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω —á–µ—Ä–µ–∑ {data.duration}—Å");
            }
            // –ò–Ω–∞—á–µ –ø—É—Å—Ç—å ParticleSystem —Å–∞–º —É–Ω–∏—á—Ç–æ–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            else
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ ParticleSystem –∏ –¥–æ–±–∞–≤–ª—è–µ–º AutoDestroy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                ParticleSystem ps = effectObj.GetComponent<ParticleSystem>();
                if (ps != null)
                {
                    float psLifetime = ps.main.duration + ps.main.startLifetime.constantMax;
                    Destroy(effectObj, psLifetime + 0.5f);
                    Debug.Log($"[NetworkSync] ‚è±Ô∏è –≠—Ñ—Ñ–µ–∫—Ç (ParticleSystem) –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω —á–µ—Ä–µ–∑ {psLifetime:F1}—Å");
                }
            }

            Debug.Log($"[NetworkSync] ‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {data.effectPrefabName}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –û—à–∏–±–∫–∞ –≤ OnVisualEffectSpawned: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å prefab —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏–∑ Resources
    /// –ò—â–µ—Ç –≤ –ø–∞–ø–∫–∞—Ö: Effects/, Prefabs/Effects/, VFX/, Particles/
    /// </summary>
    private GameObject TryLoadEffectPrefab(string prefabName)
    {
        // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        prefabName = prefabName.Replace(".prefab", "");

        // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
        string[] possiblePaths = new string[]
        {
            $"Effects/{prefabName}",
            $"Prefabs/Effects/{prefabName}",
            $"VFX/{prefabName}",
            $"Particles/{prefabName}",
            prefabName // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        };

        foreach (string path in possiblePaths)
        {
            GameObject prefab = Resources.Load<GameObject>(path);
            if (prefab != null)
            {
                Debug.Log($"[NetworkSync] ‚úÖ Prefab –Ω–∞–π–¥–µ–Ω: Resources/{path}");
                return prefab;
            }
        }

        Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Prefab '{prefabName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ –ø–∞–ø–æ–∫ Resources!");
        return null;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–ù–û–í–û–ï)
    /// </summary>
    private void OnPlayerTransformed(string jsonData)
    {
        Debug.Log($"[NetworkSync] üêª RAW player_transformed JSON: {jsonData}");

        try
        {
            var data = JsonUtility.FromJson<PlayerTransformedEvent>(jsonData);
            Debug.Log($"[NetworkSync] üêª –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: socketId={data.socketId}, skillId={data.skillId}");

            // Skip if it's our own transformation (we already did it locally)
            if (data.socketId == localPlayerSocketId)
            {
                Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –Ω–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                return;
            }

            // Find the network player who transformed
            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                Debug.Log($"[NetworkSync] üêª –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {player.username}");

                // Apply transformation –≤–∏–∑—É–∞–ª—å–Ω–æ –∫ —Å–µ—Ç–µ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
                player.ApplyTransformation(data.skillId);

                Debug.Log($"[NetworkSync] ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ {player.username}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Network player {data.socketId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –û—à–∏–±–∫–∞ –≤ OnPlayerTransformed: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞ (–ù–û–í–û–ï)
    /// </summary>
    private void OnPlayerTransformationEnded(string jsonData)
    {
        Debug.Log($"[NetworkSync] üîÑ RAW player_transformation_ended JSON: {jsonData}");

        try
        {
            var data = JsonUtility.FromJson<PlayerTransformationEndedEvent>(jsonData);
            Debug.Log($"[NetworkSync] üîÑ –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: socketId={data.socketId}");

            // Skip if it's our own transformation end
            if (data.socketId == localPlayerSocketId)
            {
                Debug.Log($"[NetworkSync] ‚è≠Ô∏è –≠—Ç–æ –Ω–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                return;
            }

            // Find the network player
            if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
            {
                Debug.Log($"[NetworkSync] üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {player.username}");

                // End transformation –≤–∏–∑—É–∞–ª—å–Ω–æ
                player.EndTransformation();

                Debug.Log($"[NetworkSync] ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {player.username}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Network player {data.socketId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –û—à–∏–±–∫–∞ –≤ OnPlayerTransformationEnded: {ex.Message}\nJSON: {jsonData}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–∞ (SERVER AUTHORITY)
    /// </summary>
    private void OnHealthChanged(string jsonData)
    {
        var data = JsonUtility.FromJson<HealthChangedEvent>(jsonData);
        string critText = data.isCritical ? " üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†!" : "";
        Debug.Log($"[NetworkSync] üíî –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ {data.socketId}: {data.currentHealth}/{data.maxHealth}{critText}");

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –ú–´ –∏–ª–∏ —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫
        if (data.socketId == localPlayerSocketId)
        {
            // –≠–¢–û –ú–´ –ü–û–õ–£–ß–ò–õ–ò –£–†–û–ù! –ü—Ä–∏–º–µ–Ω—è–µ–º —á–µ—Ä–µ–∑ HealthSystem
            Debug.Log($"[NetworkSync] üíî –ú–´ –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω {data.damage}! HP: {data.currentHealth}/{data.maxHealth}");
            ApplyDamageToLocalPlayer(data.damage);
        }
        else if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            // –≠—Ç–æ —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ HP
            player.UpdateHealth((int)data.currentHealth, (int)data.maxHealth, player.CurrentMP, player.MaxMP);
            player.ShowDamage(data.damage);

            Debug.Log($"[NetworkSync] ‚úÖ HP –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è {player.username}: {data.currentHealth}/{data.maxHealth}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerDied(string jsonData)
    {
        var data = JsonUtility.FromJson<PlayerDiedEvent>(jsonData);
        Debug.Log($"[NetworkSync] ‚ò†Ô∏è –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±: {data.socketId}, –£–±–∏–π—Ü–∞: {data.killerId}");

        // Check if it's a network player
        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            // Play death animation
            player.UpdateAnimation("Dead");
        }
        // If not in networkPlayers, it might be us - handle in HealthSystem
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerRespawned(string jsonData)
    {
        var data = JsonUtility.FromJson<PlayerRespawnedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üîÑ –ò–≥—Ä–æ–∫ –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è: {data.socketId}");

        if (networkPlayers.TryGetValue(data.socketId, out NetworkPlayer player))
        {
            Vector3 spawnPos = new Vector3(data.position.x, data.position.y, data.position.z);
            player.OnRespawn(spawnPos);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤—Ä–∞–≥–∞
    /// </summary>
    private void OnEnemyHealthChanged(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyHealthChangedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üê∫ –í—Ä–∞–≥ {data.enemyId} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω: {data.damage}, –∑–¥–æ—Ä–æ–≤—å–µ: {data.currentHealth}");

        // TODO: Find enemy by ID and update its health
        // This will be implemented when we have enemy manager
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Ä–æ–Ω –≤—Ä–∞–≥–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (SERVER AUTHORITY)
    /// –°–µ—Ä–≤–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–ª —É—Ä–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ SPECIAL —Å—Ç–∞—Ç–æ–≤ –∞—Ç–∞–∫—É—é—â–µ–≥–æ
    /// </summary>
    private void OnEnemyDamagedByServer(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyDamagedByServerEvent>(jsonData);
        Debug.Log($"[NetworkSync] üéØ –°–µ—Ä–≤–µ—Ä –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω –≤—Ä–∞–≥—É {data.enemyId}: {data.damage} —É—Ä–æ–Ω–∞{(data.isCritical ? " (–ö–†–ò–¢!)" : "")}");

        // –ù–∞–π—Ç–∏ –≤—Ä–∞–≥–∞ –ø–æ ID –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —É—Ä–æ–Ω
        GameObject[] enemies = GameObject.FindGameObjectsWithTag("Enemy");
        foreach (GameObject enemyObj in enemies)
        {
            Enemy enemy = enemyObj.GetComponent<Enemy>();
            if (enemy != null && enemy.GetEnemyId() == data.enemyId)
            {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω –∫ –≤—Ä–∞–≥—É
                enemy.TakeDamage(data.damage);
                Debug.Log($"[NetworkSync] ‚úÖ –ü—Ä–∏–º–µ–Ω—ë–Ω —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —É—Ä–æ–Ω –∫ {enemy.GetEnemyName()}: {data.damage}{(data.isCritical ? " –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô" : "")}");
                return;
            }
        }

        Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –í—Ä–∞–≥ {data.enemyId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —É—Ä–æ–Ω–∞");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å –≤—Ä–∞–≥–∞
    /// </summary>
    private void OnEnemyDied(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyDiedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üíÄ –í—Ä–∞–≥ {data.enemyId} —É–±–∏—Ç –∏–≥—Ä–æ–∫–æ–º {data.killerUsername}");

        // TODO: Find enemy by ID and play death animation
        // This will be implemented when we have enemy manager
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å–ø–∞–≤–Ω –≤—Ä–∞–≥–∞
    /// </summary>
    private void OnEnemyRespawned(string jsonData)
    {
        var data = JsonUtility.FromJson<EnemyRespawnedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üîÑ –í—Ä–∞–≥ {data.enemyId} ({data.enemyType}) –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è");

        // TODO: Respawn enemy at position
        // This will be implemented when we have enemy manager
    }

    // ===== LOBBY SYSTEM EVENT HANDLERS =====

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ (10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏–µ)
    /// </summary>
    private void OnLobbyCreated(string jsonData)
    {
        var data = JsonUtility.FromJson<LobbyCreatedEvent>(jsonData);
        Debug.Log($"[NetworkSync] üèÅ LOBBY CREATED! –û–∂–∏–¥–∞–Ω–∏–µ {data.waitTime}ms –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º");

        // –ù–ï –°–ü–ê–í–ù–ò–ú –∏–≥—Ä–æ–∫–∞ —Å–µ–π—á–∞—Å! –ñ–¥–µ–º game_start
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å UI —Å —Ç–∞–π–º–µ—Ä–æ–º —á–µ—Ä–µ–∑ ArenaManager
        if (ArenaManager.Instance != null)
        {
            ArenaManager.Instance.OnLobbyStarted(data.waitTime);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å countdown (3, 2, 1...)
    /// </summary>
    private void OnGameCountdown(string jsonData)
    {
        var data = JsonUtility.FromJson<GameCountdownEvent>(jsonData);
        Debug.Log($"[NetworkSync] ‚è±Ô∏è COUNTDOWN: {data.count}");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º countdown UI
        if (ArenaManager.Instance != null)
        {
            ArenaManager.Instance.OnCountdown(data.count);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã - –°–ü–ê–í–ù–ò–ú –í–°–ï–• –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û!
    /// </summary>
    private void OnGameStart(string jsonData)
    {
        Debug.Log($"[NetworkSync] üéÆ GAME START! JSON: {jsonData}");

        try
        {
            var data = JsonUtility.FromJson<GameStartEvent>(jsonData);

            Debug.Log($"[NetworkSync] üéÆ –ü–æ–ª—É—á–µ–Ω–æ {data.players.Length} –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞");

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ì–æ–≤–æ—Ä–∏–º ArenaManager –°–ü–ê–í–ù–ò–¢–¨ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –°–ï–ô–ß–ê–°!
            if (ArenaManager.Instance != null)
            {
                ArenaManager.Instance.OnGameStarted();
            }

            // –°–ø–∞–≤–Ω–∏–º –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ pending (–µ—Å–ª–∏ –µ—Å—Ç—å)
            foreach (var playerData in data.players)
            {
                Debug.Log($"[NetworkSync] –ò–≥—Ä–æ–∫ –≤ game_start: {playerData.username} (socketId: {playerData.socketId}, spawnIndex: {playerData.spawnIndex})");

                // Skip ourselves - –º—ã –∑–∞—Å–ø–∞–≤–Ω–∏–º—Å—è —á–µ—Ä–µ–∑ ArenaManager
                // (–º—ã –Ω–µ –∑–Ω–∞–µ–º —Å–≤–æ–π socketId –∑–¥–µ—Å—å, –Ω–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ - pending –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å)

                // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ pending - —Å–ø–∞–≤–Ω–∏–º –µ–≥–æ –°–ï–ô–ß–ê–° —Å —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
                if (pendingPlayers.TryGetValue(playerData.socketId, out RoomPlayerInfo playerInfo))
                {
                    Debug.Log($"[NetworkSync] üé¨ –°–ø–∞–≤–Ω–∏–º pending –∏–≥—Ä–æ–∫–∞ {playerInfo.username} –ø—Ä–∏ game_start");

                    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º spawn point –ø–æ –∏–Ω–¥–µ–∫—Å—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                    Vector3 spawnPos = Vector3.zero;
                    if (spawnPoints != null && playerData.spawnIndex >= 0 && playerData.spawnIndex < spawnPoints.Length)
                    {
                        spawnPos = spawnPoints[playerData.spawnIndex].position;
                        Debug.Log($"[NetworkSync] üìç Spawn position –¥–ª—è {playerInfo.username}: {spawnPos} (index {playerData.spawnIndex})");
                    }
                    else
                    {
                        Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π spawnIndex {playerData.spawnIndex} –¥–ª—è {playerInfo.username}, –∏—Å–ø–æ–ª—å–∑—É–µ–º (0,0,0)");
                    }

                    SpawnNetworkPlayer(playerData.socketId, playerInfo.username, playerInfo.characterClass, spawnPos, playerInfo.stats);
                    pendingPlayers.Remove(playerData.socketId); // –£–¥–∞–ª—è–µ–º –∏–∑ pending –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
                }
            }

            Debug.Log($"[NetworkSync] ‚úÖ Game started! –í—Å–µ–≥–æ —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {networkPlayers.Count}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"[NetworkSync] ‚ùå Error in OnGameStart: {ex.Message}\n{ex.StackTrace}");
        }
    }

    // ===== NETWORK PLAYER MANAGEMENT =====

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SpawnNetworkPlayer(string socketId, string username, string characterClass, Vector3 position, SpecialStatsData stats = null)
    {
        GameObject prefab = GetCharacterPrefab(characterClass);
        if (prefab == null)
        {
            Debug.LogError($"[NetworkSync] –ü—Ä–µ—Ñ–∞–± –¥–ª—è –∫–ª–∞—Å—Å–∞ {characterClass} –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        GameObject playerObj = Instantiate(prefab, position, Quaternion.identity);
        playerObj.name = $"NetworkPlayer_{username}";
        playerObj.layer = LayerMask.NameToLayer("Character");

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º SPECIAL stats –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞!
        if (stats != null)
        {
            CharacterStats characterStats = playerObj.GetComponent<CharacterStats>();
            if (characterStats != null)
            {
                characterStats.strength = stats.strength;
                characterStats.perception = stats.perception;
                characterStats.endurance = stats.endurance;
                characterStats.wisdom = stats.wisdom;
                characterStats.intelligence = stats.intelligence;
                characterStats.agility = stats.agility;
                characterStats.luck = stats.luck;

                characterStats.RecalculateStats(); // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏

                Debug.Log($"[NetworkSync] üìä SPECIAL stats –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–ª—è {username}: S:{stats.strength} P:{stats.perception} E:{stats.endurance} W:{stats.wisdom} I:{stats.intelligence} A:{stats.agility} L:{stats.luck}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è CharacterStats –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {username}!");
            }
        }
        else
        {
            Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è Stats == null –¥–ª—è {username}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏!");
        }

        // –í–ê–ñ–ù–û: –ù–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ—Ñ–∞–±–∞
        Transform modelTransform = playerObj.transform.Find("Model") ?? playerObj.transform;

        // –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        // –ò—â–µ–º PlayerController –Ω–∞ –í–°–ï–• —É—Ä–æ–≤–Ω—è—Ö (root, model, children)
        PlayerController[] allPlayerControllers = playerObj.GetComponentsInChildren<PlayerController>(true);
        foreach (var pc in allPlayerControllers)
        {
            pc.enabled = false;
            Debug.Log($"[NetworkSync] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω PlayerController –Ω–∞ {pc.gameObject.name} –¥–ª—è {username}");
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º PlayerAttack —á—Ç–æ–±—ã NetworkPlayer –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª –ª–æ–∫–∞–ª—å–Ω–æ
        PlayerAttack[] allPlayerAttacks = playerObj.GetComponentsInChildren<PlayerAttack>(true);
        foreach (var pa in allPlayerAttacks)
        {
            pa.enabled = false;
            Debug.Log($"[NetworkSync] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω PlayerAttack –Ω–∞ {pa.gameObject.name} –¥–ª—è {username}");
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º TargetSystem —á—Ç–æ–±—ã NetworkPlayer –Ω–µ —Ç–∞—Ä–≥–µ—Ç–∏–ª
        TargetSystem[] allTargetSystems = playerObj.GetComponentsInChildren<TargetSystem>(true);
        foreach (var ts in allTargetSystems)
        {
            ts.enabled = false;
            Debug.Log($"[NetworkSync] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω TargetSystem –Ω–∞ {ts.gameObject.name} –¥–ª—è {username}");
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ input –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        var cameraController = playerObj.GetComponentInChildren<Camera>();
        if (cameraController != null)
        {
            cameraController.gameObject.SetActive(false);
            Debug.Log($"[NetworkSync] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∞ –∫–∞–º–µ—Ä–∞ –¥–ª—è {username}");
        }

        // –û—Ç–∫–ª—é—á–∞–µ–º CharacterController (NetworkPlayer —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ NetworkTransform)
        CharacterController[] allCharControllers = playerObj.GetComponentsInChildren<CharacterController>(true);
        foreach (var cc in allCharControllers)
        {
            cc.enabled = false;
            Debug.Log($"[NetworkSync] ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω CharacterController –Ω–∞ {cc.gameObject.name} –¥–ª—è {username}");
        }

        // –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ä—É–∂–∏–µ –∏–∑ WeaponDatabase
        SetupNetworkPlayerWeapon(modelTransform, characterClass);

        // Add NetworkPlayer component
        NetworkPlayer networkPlayer = playerObj.AddComponent<NetworkPlayer>();
        networkPlayer.socketId = socketId;
        networkPlayer.username = username;
        networkPlayer.characterClass = characterClass;

        // Set nameplate prefab
        if (nameplatePrefab != null)
        {
            // Assign via reflection or make it public
            var field = typeof(NetworkPlayer).GetField("nameplatePrefab", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            field?.SetValue(networkPlayer, nameplatePrefab);
        }

        // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Enemy –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ –∏ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã
        SetupNetworkPlayerAsEnemy(playerObj, username);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π –≤—Ä–∞–≥–∞
        Nameplate nameplate = playerObj.AddComponent<Nameplate>();
        nameplate.Initialize(playerObj.transform, username, false); // false = –∫—Ä–∞—Å–Ω—ã–π (–≤—Ä–∞–≥)

        networkPlayers[socketId] = networkPlayer;

        Debug.Log($"[NetworkSync] ‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫: {username} ({characterClass}) - –≤—Ä–∞–≥ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ —Å –∫—Ä–∞—Å–Ω—ã–º –Ω–∏–∫–Ω–µ–π–º–æ–º");
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ä—É–∂–∏–µ –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SetupNetworkPlayerWeapon(Transform modelTransform, string characterClass)
    {
        // –ù–∞–π—Ç–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å ClassWeaponManager
        var weaponManager = modelTransform.GetComponent<ClassWeaponManager>();
        if (weaponManager == null)
        {
            weaponManager = modelTransform.gameObject.AddComponent<ClassWeaponManager>();
            Debug.Log($"[NetworkSync] –î–æ–±–∞–≤–ª–µ–Ω ClassWeaponManager –¥–ª—è {characterClass}");
        }

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª–æ–≥–æ–≤
        var characterClassEnum = (CharacterClass)System.Enum.Parse(typeof(CharacterClass), characterClass);
        weaponManager.SetCharacterClass(characterClassEnum);
        Debug.Log($"[NetworkSync] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª–∞—Å—Å {characterClass} –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞");

        // –ó–∞–≥—Ä—É–∑–∏—Ç—å WeaponDatabase
        var weaponDatabase = Resources.Load<WeaponDatabase>("WeaponDatabase");
        if (weaponDatabase != null)
        {
            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –∏–ª–∏ –¥–µ–ª–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º
            var method = typeof(ClassWeaponManager).GetMethod("AttachWeaponForClass", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (method != null)
            {
                method.Invoke(weaponManager, null);
                Debug.Log($"[NetworkSync] ‚úÖ –û—Ä—É–∂–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –¥–ª—è {characterClass}");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ AttachWeaponForClass");
            }
        }
        else
        {
            Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è WeaponDatabase –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Resources");
        }
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ Enemy (–¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ –∏ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã)
    /// </summary>
    private void SetupNetworkPlayerAsEnemy(GameObject playerObj, string username)
    {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Enemy
        Enemy enemyComponent = playerObj.AddComponent<Enemy>();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º reflection –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
        var enemyNameField = typeof(Enemy).GetField("enemyName", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        if (enemyNameField != null)
        {
            enemyNameField.SetValue(enemyComponent, username);
        }

        var maxHealthField = typeof(Enemy).GetField("maxHealth", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        if (maxHealthField != null)
        {
            maxHealthField.SetValue(enemyComponent, 10000f); // –û–ß–ï–ù–¨ –í–´–°–û–ö–û–ï HP - —Å–µ—Ç–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–µ
        }

        // –í–ê–ñ–ù–û: –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å currentHealth —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ HP
        var currentHealthField = typeof(Enemy).GetField("currentHealth", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
        if (currentHealthField != null)
        {
            currentHealthField.SetValue(enemyComponent, 10000f); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º currentHealth = maxHealth
            Debug.Log($"[NetworkSync] ‚úÖ currentHealth —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: 10000");
        }

        // –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤—ã–∑—ã–≤–∞–ª TakeDamage/Die
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ FogOfWar
        enemyComponent.enabled = false;
        Debug.Log($"[NetworkSync] ‚ö†Ô∏è Enemy –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –û–¢–ö–õ–Æ–ß–Å–ù (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞)");

        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ "Enemy" –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞
        if (!playerObj.CompareTag("Enemy"))
        {
            try
            {
                playerObj.tag = "Enemy";
                Debug.Log($"[NetworkSync] ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥ 'Enemy' –¥–ª—è {username}");
            }
            catch (UnityException ex)
            {
                Debug.LogError($"[NetworkSync] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ 'Enemy': {ex.Message}. –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–≥ 'Enemy' –≤ Project Settings ‚Üí Tags and Layers!");
            }
        }

        // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ FogOfWar —Å–∏—Å—Ç–µ–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (localPlayer != null)
        {
            FogOfWar fogOfWar = localPlayer.GetComponent<FogOfWar>();
            if (fogOfWar != null)
            {
                fogOfWar.RegisterEnemy(enemyComponent);
                Debug.Log($"[NetworkSync] ‚úÖ –°–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫ {username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ FogOfWar");
            }
        }

        Debug.Log($"[NetworkSync] ‚úÖ –°–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫ {username} –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ Enemy (–º–æ–∂–Ω–æ —Ç–∞—Ä–≥–µ—Ç–∏—Ç—å)");
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void RemoveNetworkPlayer(string socketId)
    {
        if (networkPlayers.TryGetValue(socketId, out NetworkPlayer player))
        {
            // –û—Ç—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑ FogOfWar –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            Enemy enemyComponent = player.GetComponent<Enemy>();
            if (enemyComponent != null && localPlayer != null)
            {
                FogOfWar fogOfWar = localPlayer.GetComponent<FogOfWar>();
                if (fogOfWar != null)
                {
                    fogOfWar.UnregisterEnemy(enemyComponent);
                }
            }

            Destroy(player.gameObject);
            networkPlayers.Remove(socketId);
            Debug.Log($"[NetworkSync] –£–¥–∞–ª–µ–Ω —Å–µ—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫: {socketId}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∫–ª–∞—Å—Å—É (–ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê –∏–∑ Resources/Characters/)
    /// </summary>
    private GameObject GetCharacterPrefab(string characterClass)
    {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∞–±—ã –∏–∑ Resources/Characters/ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –§–æ—Ä–º–∞—Ç: Resources/Characters/{ClassName}Model.prefab
        string prefabPath = $"Characters/{characterClass}Model";
        GameObject prefab = Resources.Load<GameObject>(prefabPath);

        if (prefab == null)
        {
            Debug.LogError($"[NetworkSync] ‚ùå –ü—Ä–µ—Ñ–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω: Resources/{prefabPath}.prefab");
            Debug.LogError($"[NetworkSync] –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–µ—Ñ–∞–± {characterClass}Model.prefab –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ Assets/Resources/Characters/");

            // Fallback –Ω–∞ Warrior –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            prefab = Resources.Load<GameObject>("Characters/WarriorModel");
            if (prefab != null)
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Warrior –∫–∞–∫ fallback –¥–ª—è –∫–ª–∞—Å—Å–∞ {characterClass}");
            }
        }
        else
        {
            Debug.Log($"[NetworkSync] ‚úÖ –ü—Ä–µ—Ñ–∞–± –∑–∞–≥—Ä—É–∂–µ–Ω: {prefabPath}");
        }

        return prefab;
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —É—Ä–æ–Ω –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
    /// </summary>
    private void ApplyDamageToLocalPlayer(float damage)
    {
        if (localPlayer == null) return;

        var healthSystem = localPlayer.GetComponent<HealthSystem>();
        if (healthSystem != null)
        {
            healthSystem.TakeDamage((int)damage);
            Debug.Log($"[NetworkSync] –ü–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω: {damage}");
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnLocalPlayerDied()
    {
        Debug.Log("[NetworkSync] –ú—ã –ø–æ–≥–∏–±–ª–∏!");

        // TODO: Show death screen, respawn button
        // For now, auto-respawn after 5 seconds
        Invoke(nameof(RequestRespawn), 5f);
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    private void RequestRespawn()
    {
        if (localPlayer != null && spawnPoints != null && spawnPoints.Length > 0)
        {
            // Choose random spawn point
            Transform spawnPoint = spawnPoints[UnityEngine.Random.Range(0, spawnPoints.Length)];
            Vector3 spawnPos = spawnPoint != null ? spawnPoint.position : Vector3.zero;

            // TODO: Add SendRespawn method to SocketIOManager
            // SocketIOManager.Instance.SendRespawn(spawnPos);
            Debug.LogWarning("[NetworkSync] SendRespawn not yet implemented in SocketIOManager");
        }
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã)
    /// </summary>
    public void ClearAllNetworkPlayers()
    {
        foreach (var player in networkPlayers.Values)
        {
            if (player != null)
            {
                Destroy(player.gameObject);
            }
        }
        networkPlayers.Clear();
        Debug.Log("[NetworkSync] –í—Å–µ —Å–µ—Ç–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã");
    }

    /// <summary>
    /// –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∞–≤–Ω –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–¥–∞—ë—Ç –≤—Ä–µ–º—è ArenaManager.Start() –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è)
    /// </summary>
    private System.Collections.IEnumerator SpawnLocalPlayerDelayed()
    {
        Debug.Log("[NetworkSync] ‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∞–≤–Ω —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã...");

        // –ñ–¥—ë–º 0.5 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã ArenaManager.Start() –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
        yield return new WaitForSeconds(0.5f);

        Debug.Log("[NetworkSync] ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —Å–ø–∞–≤–Ω–∏–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞");

        if (ArenaManager.Instance != null)
        {
            ArenaManager.Instance.OnGameStarted();
        }
        else
        {
            Debug.LogError("[NetworkSync] ‚ùå ArenaManager.Instance –í–°–Å–©–Å null –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏!");
        }
    }

    /// <summary>
    /// –ü–£–ë–õ–ò–ß–ù–´–ô –º–µ—Ç–æ–¥: –°–ø–∞–≤–Ω–∏—Ç—å –í–°–ï–• pending –∏–≥—Ä–æ–∫–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ ArenaManager –ø—Ä–∏ FALLBACK countdown)
    /// </summary>
    public void SpawnAllPendingPlayers()
    {
        Debug.Log($"[NetworkSync] üé¨ –°–ø–∞–≤–Ω–∏–º –í–°–ï pending –∏–≥—Ä–æ–∫–∏ ({pendingPlayers.Count} –∏–≥—Ä–æ–∫–æ–≤)...");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        var pendingPlayersCopy = new Dictionary<string, RoomPlayerInfo>(pendingPlayers);

        foreach (var kvp in pendingPlayersCopy)
        {
            string socketId = kvp.Key;
            RoomPlayerInfo playerInfo = kvp.Value;

            Debug.Log($"[NetworkSync] üé¨ –°–ø–∞–≤–Ω–∏–º pending –∏–≥—Ä–æ–∫–∞ {playerInfo.username} (spawnIndex={playerInfo.spawnIndex})");

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º spawn point –ø–æ –∏–Ω–¥–µ–∫—Å—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            Vector3 spawnPos = Vector3.zero;
            if (spawnPoints != null && playerInfo.spawnIndex >= 0 && playerInfo.spawnIndex < spawnPoints.Length)
            {
                spawnPos = spawnPoints[playerInfo.spawnIndex].position;
                Debug.Log($"[NetworkSync] üìç Spawn position –¥–ª—è {playerInfo.username}: {spawnPos} (index {playerInfo.spawnIndex})");
            }
            else
            {
                Debug.LogWarning($"[NetworkSync] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π spawnIndex {playerInfo.spawnIndex} –¥–ª—è {playerInfo.username}, –∏—Å–ø–æ–ª—å–∑—É–µ–º (0,0,0)");
            }

            SpawnNetworkPlayer(socketId, playerInfo.username, playerInfo.characterClass, spawnPos, playerInfo.stats);
            pendingPlayers.Remove(socketId); // –£–¥–∞–ª—è–µ–º –∏–∑ pending –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
        }

        Debug.Log($"[NetworkSync] ‚úÖ –í—Å–µ pending –∏–≥—Ä–æ–∫–∏ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {networkPlayers.Count}");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–µ—Ñ–∞–±–∞ —Å–Ω–∞—Ä—è–¥–∞ –ø–æ –∫–ª–∞—Å—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞—Ç–∞–∫)
    /// </summary>
    private string GetProjectilePrefabNameByClass(string className)
    {
        switch (className)
        {
            case "Archer":
                return "ArrowProjectile";
            case "Mage":
                return "CelestialBallProjectile";
            case "Rogue":
                return "SoulShardsProjectile";
            default:
                return null; // –í–æ–∏–Ω –∏ –ü–∞–ª–∞–¥–∏–Ω - –±–ª–∏–∂–Ω–∏–π –±–æ–π, —Å–Ω–∞—Ä—è–¥–æ–≤ –Ω–µ—Ç
        }
    }

    void OnDestroy()
    {
        // Note: SocketIOManager handles event cleanup internally
        // We don't need to manually unsubscribe
        Debug.Log("[NetworkSync] NetworkSyncManager destroyed");
    }
}

// ===== EVENT DATA CLASSES (matching multiplayer.js server) =====

/// <summary>
/// Response when joining a room (room_players event)
/// </summary>
[Serializable]
public class RoomPlayersResponse
{
    public RoomPlayerInfo[] players;
    public string yourSocketId;
    public int yourSpawnIndex; // –í–ê–ñ–ù–û: –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
}

[Serializable]
public class RoomPlayerInfo
{
    public string socketId;
    public string username;
    public string characterClass;
    public Vector3Data position;
    public Vector3Data rotation;
    public string animation;
    public float health;
    public float maxHealth;
    public int spawnIndex; // –í–ê–ñ–ù–û: –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –∏–≥—Ä–æ–∫–∞
    public SpecialStatsData stats; // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: SPECIAL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
}

/// <summary>
/// Player joined event
/// </summary>
[Serializable]
public class PlayerJoinedEvent
{
    public string socketId;
    public string username;
    public string characterClass;
    public Vector3Data position;
    public Vector3Data rotation;
    public int spawnIndex; // –í–ê–ñ–ù–û: –ò–Ω–¥–µ–∫—Å —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    public SpecialStatsData stats; // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: SPECIAL —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
}

/// <summary>
/// Player left event
/// </summary>
[Serializable]
public class PlayerLeftEvent
{
    public string socketId;
    public string username;
}

/// <summary>
/// Player moved event
/// </summary>
[Serializable]
public class PlayerMovedEvent
{
    public string socketId;
    public Vector3Data position;
    public Vector3Data rotation;
    public Vector3Data velocity;
    public bool isGrounded;
    public long timestamp;
}

/// <summary>
/// Animation changed event
/// </summary>
[Serializable]
public class AnimationChangedEvent
{
    public string socketId;
    public string animation;
    public float speed;
    public long timestamp;
}

/// <summary>
/// Player attacked event
/// </summary>
[Serializable]
public class PlayerAttackedEvent
{
    public string socketId;
    public string attackType;
    public string targetType;
    public string targetId;
    public float damage;
    public Vector3Data position;
    public Vector3Data direction;
    public int skillId;
    public long timestamp;
}

/// <summary>
/// Player skill used event
/// </summary>
[Serializable]
public class PlayerSkillUsedEvent
{
    public string socketId;
    public string username;
    public string characterClass;
    public int skillId;
    public string targetSocketId;
    public Vector3Data targetPosition;
    public long timestamp;
    public string skillType; // –ù–û–í–û–ï: "Damage", "Heal", "Transformation" –∏ —Ç.–¥.
    public string animationTrigger; // –ù–û–í–û–ï: —Ç—Ä–∏–≥–≥–µ—Ä –∞–Ω–∏–º–∞—Ü–∏–∏ ("Cast", "Attack" –∏ —Ç.–¥.)
    public float animationSpeed; // –ù–û–í–û–ï: —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ (default: 1.0)
    public float castTime; // –ù–û–í–û–ï: –≤—Ä–µ–º—è –∫–∞—Å—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∞—Ä—è–¥–∞
}

/// <summary>
/// Projectile spawned event (–ù–û–í–û–ï - –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–Ω–∞—Ä—è–¥–æ–≤)
/// </summary>
[Serializable]
public class ProjectileSpawnedEvent
{
    public string socketId;
    public int skillId;
    public Vector3Data spawnPosition;
    public Vector3Data direction;
    public string targetSocketId;
    public long timestamp;
}

/// <summary>
/// Player health changed event
/// </summary>
[Serializable]
public class HealthChangedEvent
{
    public string socketId;
    public float damage;
    public float currentHealth;
    public float maxHealth;
    public string attackerId;
    public bool isCritical;
    public long timestamp;
}

/// <summary>
/// Player died event
/// </summary>
[Serializable]
public class PlayerDiedEvent
{
    public string socketId;
    public string killerId;
    public long timestamp;
}

/// <summary>
/// Player respawned event
/// </summary>
[Serializable]
public class PlayerRespawnedEvent
{
    public string socketId;
    public Vector3Data position;
    public float health;
    public long timestamp;
}

/// <summary>
/// Enemy health changed event
/// </summary>
[Serializable]
public class EnemyHealthChangedEvent
{
    public string enemyId;
    public float damage;
    public float currentHealth;
    public string attackerId;
    public long timestamp;
}

/// <summary>
/// Enemy damaged by server event (SERVER AUTHORITY)
/// </summary>
[Serializable]
public class EnemyDamagedByServerEvent
{
    public string enemyId;
    public float damage;
    public string attackerId;
    public string attackerUsername;
    public bool isCritical;
    public long timestamp;
}

/// <summary>
/// Enemy died event
/// </summary>
[Serializable]
public class EnemyDiedEvent
{
    public string enemyId;
    public string killerId;
    public string killerUsername;
    public Vector3Data position;
    public long timestamp;
}

/// <summary>
/// Enemy respawned event
/// </summary>
[Serializable]
public class EnemyRespawnedEvent
{
    public string enemyId;
    public string enemyType;
    public Vector3Data position;
    public float health;
    public long timestamp;
}

/// <summary>
/// Vector3 serializable for JSON
/// </summary>
[Serializable]
public class Vector3Data
{
    public float x;
    public float y;
    public float z;
}

// ===== LOBBY SYSTEM EVENT DATA CLASSES =====

/// <summary>
/// Lobby created event (10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏–µ)
/// </summary>
[Serializable]
public class LobbyCreatedEvent
{
    public int waitTime; // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (10000ms = 10s)
    public long timestamp;
}

/// <summary>
/// Game countdown event (3, 2, 1...)
/// </summary>
[Serializable]
public class GameCountdownEvent
{
    public int count; // 3, 2, 1 (—Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç count, –∞ –Ω–µ countdown)
    public long timestamp;
}

/// <summary>
/// Game start event - –≤—Å–µ —Å–ø–∞–≤–Ω—è—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!
/// </summary>
[Serializable]
public class GameStartEvent
{
    public GameStartPlayerInfo[] players; // –í—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ
    public long timestamp;
}

/// <summary>
/// Player info –≤ game_start event
/// </summary>
[Serializable]
public class GameStartPlayerInfo
{
    public string socketId;
    public string username;
    public string characterClass;
    public int spawnIndex;
}

/// <summary>
/// SPECIAL stats –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (S.P.E.C.I.A.L —Å–∏—Å—Ç–µ–º–∞)
/// </summary>
[Serializable]
public class SpecialStatsData
{
    public int strength;
    public int perception;
    public int endurance;
    public int wisdom;
    public int intelligence;
    public int agility;
    public int luck;
}

/// <summary>
/// Player transformed event (–ù–û–í–û–ï)
/// </summary>
[Serializable]
public class PlayerTransformedEvent
{
    public string socketId;
    public string username;
    public int skillId; // ID —Å–∫–∏–ª–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (301 = Bear Form)
    public long timestamp;
}

/// <summary>
/// Player transformation ended event (–ù–û–í–û–ï)
/// </summary>
[Serializable]
public class PlayerTransformationEndedEvent
{
    public string socketId;
    public string username;
    public long timestamp;
}

/// <summary>
/// Visual effect spawned event (–ù–û–í–û–ï - –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤)
/// </summary>
[Serializable]
public class VisualEffectSpawnedEvent
{
    public string socketId; // –ö—Ç–æ —Å–æ–∑–¥–∞–ª —ç—Ñ—Ñ–µ–∫—Ç
    public string effectType; // "explosion", "aura", "burn", "poison" –∏ —Ç.–¥.
    public string effectPrefabName; // –ù–∞–∑–≤–∞–Ω–∏–µ prefab —ç—Ñ—Ñ–µ–∫—Ç–∞
    public Vector3Data position;
    public Vector3Data rotation;
    public string targetSocketId; // –ï—Å–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ = world space)
    public float duration; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ (0 = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    public long timestamp;
}
