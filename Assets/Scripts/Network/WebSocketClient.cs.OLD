using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine.Networking;

/// <summary>
/// WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è Socket.io —Å–µ—Ä–≤–µ—Ä–∞
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π
/// </summary>
public class WebSocketClient : MonoBehaviour
{
    public static WebSocketClient Instance { get; private set; }

    [Header("Server Settings")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private float reconnectDelay = 5f;
    [SerializeField] private float heartbeatInterval = 25f;

    // Connection state
    private bool isConnected = false;
    private bool isConnecting = false;
    private string sessionId = "";
    private string authToken = "";
    private string currentRoomId = "";

    // Heartbeat
    private float lastHeartbeat = 0f;

    // Room join state
    private bool responseReceived = false;

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    // WebSocket URL (Socket.io uses HTTP polling for initial connection)
    private string SocketUrl => $"{serverUrl}/socket.io/?EIO=4&transport=polling";

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Update()
    {
        // Heartbeat
        if (isConnected && Time.time - lastHeartbeat > heartbeatInterval)
        {
            SendHeartbeat();
            lastHeartbeat = Time.time;
        }
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected || isConnecting)
        {
            Debug.LogWarning("[WebSocket] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è");
            onComplete?.Invoke(false);
            return;
        }

        authToken = token;
        StartCoroutine(ConnectCoroutine(onComplete));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    private IEnumerator ConnectCoroutine(Action<bool> onComplete)
    {
        isConnecting = true;
        Debug.Log($"[WebSocket] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // Socket.io handshake
        UnityWebRequest request = UnityWebRequest.Get(SocketUrl);
        request.SetRequestHeader("Authorization", $"Bearer {authToken}");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            // Parse session ID from response
            string response = request.downloadHandler.text;
            Debug.Log($"[WebSocket] Handshake response: {response}");

            // Socket.io response format: 0{"sid":"xxxxx","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":60000}
            int sidStart = response.IndexOf("\"sid\":\"") + 7;
            int sidEnd = response.IndexOf("\"", sidStart);
            if (sidStart > 6 && sidEnd > sidStart)
            {
                sessionId = response.Substring(sidStart, sidEnd - sidStart);
                isConnected = true;
                isConnecting = false;
                lastHeartbeat = Time.time;

                Debug.Log($"[WebSocket] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Session ID: {sessionId}");
                onComplete?.Invoke(true);

                // NOTE: –û—Ç–ø—Ä–∞–≤–∫–∞ 'connected' —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É 400
                // –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–∑–Ω–∞–µ—Ç –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ handshake
                // EmitEvent("connected", JsonUtility.ToJson(new { token = authToken }));
            }
            else
            {
                Debug.LogError("[WebSocket] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å session ID");
                isConnecting = false;
                onComplete?.Invoke(false);
            }
        }
        else
        {
            Debug.LogError($"[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {request.error}");
            isConnecting = false;
            onComplete?.Invoke(false);
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (!isConnected) return;

        Debug.Log("[WebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...");
        EmitEvent("disconnect", "");

        isConnected = false;
        sessionId = "";
        currentRoomId = "";
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    public void EmitEvent(string eventName, string jsonData)
    {
        if (!isConnected)
        {
            Debug.LogWarning($"[WebSocket] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        StartCoroutine(EmitCoroutine(eventName, jsonData));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û)
    /// </summary>
    private IEnumerator EmitCoroutine(string eventName, string jsonData)
    {
        // –í–†–ï–ú–ï–ù–ù–û: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ—à–∏–±–∫–∏ 400
        // Socket.io HTTP polling –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        Debug.Log($"[WebSocket] üì§ –°–æ–±—ã—Ç–∏–µ '{eventName}' (–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞)");
        yield break;

        /* –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –° SOCKET.IO
        // Socket.io message format: 42["event_name",{data}]
        string message = $"42[\"{eventName}\",{jsonData}]";

        string url = $"{serverUrl}/socket.io/?EIO=4&transport=polling&sid={sessionId}";

        UnityWebRequest request = new UnityWebRequest(url, "POST");
        byte[] bodyRaw = Encoding.UTF8.GetBytes(message);
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "text/plain");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            Debug.Log($"[WebSocket] ‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eventName}");
        }
        else
        {
            Debug.LogError($"[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{eventName}': {request.error}");
        }
        */
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (!eventCallbacks.ContainsKey(eventName))
        {
            eventCallbacks[eventName] = callback;
            Debug.Log($"[WebSocket] üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
        }
        else
        {
            eventCallbacks[eventName] += callback;
        }
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public void Off(string eventName, Action<string> callback = null)
    {
        if (eventCallbacks.ContainsKey(eventName))
        {
            if (callback != null)
            {
                eventCallbacks[eventName] -= callback;
            }
            else
            {
                eventCallbacks.Remove(eventName);
            }
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å heartbeat
    /// </summary>
    private void SendHeartbeat()
    {
        if (!isConnected) return;
        StartCoroutine(HeartbeatCoroutine());
    }

    private IEnumerator HeartbeatCoroutine()
    {
        string url = $"{serverUrl}/socket.io/?EIO=4&transport=polling&sid={sessionId}";

        UnityWebRequest request = new UnityWebRequest(url, "POST");
        byte[] bodyRaw = Encoding.UTF8.GetBytes("2"); // Socket.io ping message
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            // Expected response: "3" (pong)
            Debug.Log("[WebSocket] üíì Heartbeat OK");
        }
        else
        {
            Debug.LogWarning($"[WebSocket] ‚ö†Ô∏è Heartbeat failed: {request.error}");
        }
    }

    /// <summary>
    /// –ù–∞—á–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void StartListening()
    {
        if (!isConnected) return;
        StartCoroutine(ListenCoroutine());
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    private IEnumerator ListenCoroutine()
    {
        while (isConnected)
        {
            string url = $"{serverUrl}/socket.io/?EIO=4&transport=polling&sid={sessionId}";
            UnityWebRequest request = UnityWebRequest.Get(url);

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                string response = request.downloadHandler.text;

                // Parse Socket.io messages
                if (response.StartsWith("42"))
                {
                    // Format: 42["event_name",{data}]
                    int eventStart = response.IndexOf("[\"") + 2;
                    int eventEnd = response.IndexOf("\",", eventStart);

                    if (eventEnd > eventStart)
                    {
                        string eventName = response.Substring(eventStart, eventEnd - eventStart);
                        string jsonData = response.Substring(eventEnd + 2, response.Length - eventEnd - 3);

                        Debug.Log($"[WebSocket] üì® –ü–æ–ª—É—á–µ–Ω–æ: {eventName}");

                        // Invoke callbacks
                        if (eventCallbacks.ContainsKey(eventName))
                        {
                            eventCallbacks[eventName]?.Invoke(jsonData);
                        }
                    }
                }
            }
            else
            {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 400 Bad Request - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Socket.io polling
                // –ü—Ä–æ—Å—Ç–æ –∂–¥–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                if (request.responseCode == 400)
                {
                    yield return new WaitForSeconds(0.5f); // Wait longer on 400
                }
                else
                {
                    Debug.LogWarning($"[WebSocket] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {request.error}");
                    yield return new WaitForSeconds(1f);
                }
            }

            yield return new WaitForSeconds(0.1f); // Poll every 100ms
        }
    }

    // ===== GAME-SPECIFIC EVENTS =====

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[WebSocket] –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;

        string data = JsonUtility.ToJson(new JoinRoomData
        {
            roomId = roomId,
            characterClass = characterClass
        });

        EmitEvent("join_room", data);

        // Listen for response - —Å–µ—Ä–≤–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç 'room_state' –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
        responseReceived = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—Ö–æ–¥–æ–º –≤ –∫–æ–º–Ω–∞—Ç—É

        On("room_state", (response) =>
        {
            responseReceived = true;
            Debug.Log($"[WebSocket] ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: {response}");
            Debug.Log($"[WebSocket] ‚úÖ –í–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId}");
            onComplete?.Invoke(true);
        });

        On("error", (error) =>
        {
            responseReceived = true;
            Debug.LogError($"[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É: {error}");
            onComplete?.Invoke(false);
        });

        // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –¢–∞–∫ –∫–∞–∫ HTTP polling –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ,
        // —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –Ω–µ—Ç –æ—à–∏–±–∫–∏
        StartCoroutine(JoinRoomTimeout(2f, () =>
        {
            if (!responseReceived)
            {
                Debug.LogWarning("[WebSocket] ‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ polling, –Ω–æ —Å—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥ —É—Å–ø–µ—à–Ω—ã–º");
                onComplete?.Invoke(true);
            }
        }));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    private IEnumerator JoinRoomTimeout(float delay, Action callback)
    {
        yield return new WaitForSeconds(delay);
        callback?.Invoke();
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, string animationState)
    {
        // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ
        if (!isConnected || string.IsNullOrEmpty(currentRoomId) || string.IsNullOrEmpty(sessionId))
        {
            return;
        }

        string data = JsonUtility.ToJson(new PositionUpdateData
        {
            x = position.x,
            y = position.y,
            z = position.z,
            rotationY = rotation.eulerAngles.y,
            animationState = animationState
        });

        EmitEvent("update_position", data);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É
    /// </summary>
    public void SendAttack(string targetSocketId, float damage, string attackType)
    {
        if (!isConnected) return;

        string data = JsonUtility.ToJson(new AttackData
        {
            targetSocketId = targetSocketId,
            damage = damage,
            attackType = attackType
        });

        EmitEvent("player_attack", data);
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª
    /// </summary>
    public void SendSkill(int skillId, string targetSocketId, Vector3 targetPosition)
    {
        if (!isConnected) return;

        string data = JsonUtility.ToJson(new NetworkSkillData
        {
            skillId = skillId,
            targetSocketId = targetSocketId,
            targetX = targetPosition.x,
            targetY = targetPosition.y,
            targetZ = targetPosition.z
        });

        EmitEvent("player_skill", data);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ/–º–∞–Ω—É
    /// </summary>
    public void UpdateHealth(int currentHP, int maxHP, int currentMP, int maxMP)
    {
        if (!isConnected) return;

        string data = JsonUtility.ToJson(new HealthUpdateData
        {
            currentHP = currentHP,
            maxHP = maxHP,
            currentMP = currentMP,
            maxMP = maxMP
        });

        EmitEvent("update_health", data);
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void RequestRespawn()
    {
        if (!isConnected) return;
        EmitEvent("player_respawn", "{}");
    }

    // Properties
    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string SessionId => sessionId;
}

// ===== DATA CLASSES =====

[Serializable]
public class JoinRoomData
{
    public string roomId;
    public string characterClass;
}

[Serializable]
public class PositionUpdateData
{
    public float x;
    public float y;
    public float z;
    public float rotationY;
    public string animationState;
}

[Serializable]
public class AttackData
{
    public string targetSocketId;
    public float damage;
    public string attackType;
}

[Serializable]
public class NetworkSkillData
{
    public int skillId;
    public string targetSocketId;
    public float targetX;
    public float targetY;
    public float targetZ;
}

[Serializable]
public class HealthUpdateData
{
    public int currentHP;
    public int maxHP;
    public int currentMP;
    public int maxMP;
}
