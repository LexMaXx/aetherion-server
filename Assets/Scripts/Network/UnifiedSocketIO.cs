using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine.Networking;

/// <summary>
/// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Socket.IO –∫–ª–∏–µ–Ω—Ç –¥–ª—è Aetherion
/// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–∏–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç real-time –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
/// </summary>
public class UnifiedSocketIO : MonoBehaviour
{
    public static UnifiedSocketIO Instance { get; private set; }

    [Header("Server Settings")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private float heartbeatInterval = 20f;
    [SerializeField] private float pollInterval = 0.05f; // 20 Hz
    [SerializeField] private float reconnectDelay = 5f;

    [Header("Debug")]
    [SerializeField] private bool debugMode = true;

    // Connection state
    private bool isConnected = false;
    private bool isConnecting = false;
    private bool shouldReconnect = true;
    private string sessionId = "";
    private string authToken = "";
    private string currentRoomId = "";
    private string myUsername = "";
    private string myUserId = "";

    // Heartbeat
    private float lastHeartbeat = 0f;

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    // Socket.IO URLs
    private string HandshakeUrl => $"{serverUrl}/socket.io/?EIO=4&transport=polling";
    private string PollUrl => $"{serverUrl}/socket.io/?EIO=4&transport=polling&sid={sessionId}";

    // Coroutines
    private Coroutine listeningCoroutine;
    private Coroutine reconnectCoroutine;

    // Statistics
    private int messagesSent = 0;
    private int messagesReceived = 0;
    private float lastPingTime = 0f;
    private float currentPing = 0f;

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
            DebugLog("‚úÖ UnifiedSocketIO initialized");
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Update()
    {
        // Heartbeat
        if (isConnected && Time.time - lastHeartbeat > heartbeatInterval)
        {
            SendHeartbeat();
            lastHeartbeat = Time.time;
        }
    }

    void OnDestroy()
    {
        shouldReconnect = false;
        Disconnect();
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token = "", Action<bool> onComplete = null)
    {
        if (isConnected || isConnecting)
        {
            DebugLog("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è");
            onComplete?.Invoke(isConnected);
            return;
        }

        authToken = string.IsNullOrEmpty(token) ? PlayerPrefs.GetString("JWT", "") : token;
        myUsername = PlayerPrefs.GetString("Username", "Player");
        myUserId = PlayerPrefs.GetString("UserId", "");

        StartCoroutine(ConnectCoroutine(onComplete));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    private IEnumerator ConnectCoroutine(Action<bool> onComplete)
    {
        isConnecting = true;
        DebugLog($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // Socket.io handshake
        UnityWebRequest request = UnityWebRequest.Get(HandshakeUrl);
        if (!string.IsNullOrEmpty(authToken))
        {
            request.SetRequestHeader("Authorization", $"Bearer {authToken}");
        }

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            string response = request.downloadHandler.text;

            // Socket.io response format: 0{"sid":"xxxxx","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":60000}
            int sidStart = response.IndexOf("\"sid\":\"") + 7;
            int sidEnd = response.IndexOf("\"", sidStart);

            if (sidStart > 6 && sidEnd > sidStart)
            {
                sessionId = response.Substring(sidStart, sidEnd - sidStart);
                isConnected = true;
                isConnecting = false;
                lastHeartbeat = Time.time;

                DebugLog($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Session ID: {sessionId}");

                // –¢–ï–°–¢: –û—Ç–ø—Ä–∞–≤–∏–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–∏
                StartCoroutine(TestPing());

                onComplete?.Invoke(true);

                // Start listening for events
                listeningCoroutine = StartCoroutine(ListenCoroutine());
            }
            else
            {
                Debug.LogError("[SocketIO] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å session ID");
                isConnecting = false;
                onComplete?.Invoke(false);

                // Try reconnect
                if (shouldReconnect)
                {
                    TryReconnect();
                }
            }
        }
        else
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {request.error}");
            isConnecting = false;
            onComplete?.Invoke(false);

            // Try reconnect
            if (shouldReconnect)
            {
                TryReconnect();
            }
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    private void TryReconnect()
    {
        if (reconnectCoroutine != null)
        {
            StopCoroutine(reconnectCoroutine);
        }
        reconnectCoroutine = StartCoroutine(ReconnectCoroutine());
    }

    private IEnumerator ReconnectCoroutine()
    {
        DebugLog($"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnectDelay} —Å–µ–∫...");
        yield return new WaitForSeconds(reconnectDelay);

        if (!isConnected && shouldReconnect)
        {
            Connect();
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (!isConnected) return;

        DebugLog("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...");

        // Stop listening
        if (listeningCoroutine != null)
        {
            StopCoroutine(listeningCoroutine);
            listeningCoroutine = null;
        }

        // Stop reconnecting
        if (reconnectCoroutine != null)
        {
            StopCoroutine(reconnectCoroutine);
            reconnectCoroutine = null;
        }

        isConnected = false;
        sessionId = "";
        currentRoomId = "";
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (Socket.IO format)
    /// </summary>
    public void Emit(string eventName, string jsonData)
    {
        if (!isConnected)
        {
            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        StartCoroutine(EmitCoroutine(eventName, jsonData));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    private IEnumerator EmitCoroutine(string eventName, string jsonData)
    {
        // Socket.io message format: 42["event_name",{data}]
        string message = $"42[\"{eventName}\",{jsonData}]";

        UnityWebRequest request = new UnityWebRequest(PollUrl, "POST");
        byte[] bodyRaw = Encoding.UTF8.GetBytes(message);
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "text/plain");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            messagesSent++;
            DebugLog($"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eventName}");
        }
        else
        {
            // Ignore 400 errors - Socket.IO sometimes returns them even on success
            if (request.responseCode != 400)
            {
                Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{eventName}': {request.error}");
            }
            else
            {
                messagesSent++;
            }
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (!eventCallbacks.ContainsKey(eventName))
        {
            eventCallbacks[eventName] = callback;
        }
        else
        {
            eventCallbacks[eventName] += callback;
        }
        DebugLog($"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public void Off(string eventName)
    {
        if (eventCallbacks.ContainsKey(eventName))
        {
            eventCallbacks.Remove(eventName);
            DebugLog($"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è: {eventName}");
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å heartbeat (ping)
    /// </summary>
    private void SendHeartbeat()
    {
        if (!isConnected) return;
        lastPingTime = Time.time;
        StartCoroutine(HeartbeatCoroutine());
    }

    private IEnumerator HeartbeatCoroutine()
    {
        UnityWebRequest request = new UnityWebRequest(PollUrl, "POST");
        byte[] bodyRaw = Encoding.UTF8.GetBytes("2"); // Socket.io ping message
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            currentPing = (Time.time - lastPingTime) * 1000f; // Convert to ms
            DebugLog($"üíì Heartbeat OK (Ping: {currentPing:F0}ms)");
        }
    }

    /// <summary>
    /// –¢–ï–°–¢: –û—Ç–ø—Ä–∞–≤–∏—Ç—å ping —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    private IEnumerator TestPing()
    {
        yield return new WaitForSeconds(0.5f);
        Debug.Log("[SocketIO] üß™ TEST: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping —Å–æ–±—ã—Ç–∏–µ...");
        Emit("ping", "{}");
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    private IEnumerator ListenCoroutine()
    {
        DebugLog("üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...");

        while (isConnected)
        {
            UnityWebRequest request = UnityWebRequest.Get(PollUrl);
            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                string response = request.downloadHandler.text;

                if (!string.IsNullOrEmpty(response) && response.Length > 2)
                {
                    ParseSocketIOMessages(response);
                }
            }
            else if (request.result == UnityWebRequest.Result.ConnectionError)
            {
                Debug.LogError("[SocketIO] ‚ùå –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
                isConnected = false;

                if (shouldReconnect)
                {
                    TryReconnect();
                }
                yield break;
            }

            yield return new WaitForSeconds(pollInterval);
        }

        DebugLog("üëÇ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ Socket.IO —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    private void ParseSocketIOMessages(string response)
    {
        // –î–õ–Ø –û–¢–õ–ê–î–ö–ò: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        if (response.Length > 2)
        {
            Debug.Log($"[SocketIO] üîç RAW MESSAGE: {response}");
        }

        if (response.StartsWith("42["))
        {
            try
            {
                int eventStart = response.IndexOf("[\"") + 2;
                int eventEnd = response.IndexOf("\",", eventStart);

                if (eventEnd > eventStart)
                {
                    string eventName = response.Substring(eventStart, eventEnd - eventStart);
                    int dataStart = eventEnd + 2;
                    int dataEnd = response.LastIndexOf(']');

                    if (dataEnd > dataStart)
                    {
                        string jsonData = response.Substring(dataStart, dataEnd - dataStart);
                        messagesReceived++;
                        DebugLog($"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
                        Debug.Log($"[SocketIO] üì¶ –î–∞–Ω–Ω—ã–µ: {jsonData.Substring(0, Math.Min(200, jsonData.Length))}...");

                        if (eventCallbacks.ContainsKey(eventName))
                        {
                            Debug.Log($"[SocketIO] ‚úÖ –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è '{eventName}'");
                            eventCallbacks[eventName]?.Invoke(jsonData);
                        }
                        else
                        {
                            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '{eventName}'");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
            }
        }
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // GAME-SPECIFIC METHODS
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[SocketIO] ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;
        bool responseReceived = false;

        // Subscribe to room_players event BEFORE joining
        On("room_players", (data) =>
        {
            if (!responseReceived)
            {
                responseReceived = true;
                DebugLog($"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ");
                onComplete?.Invoke(true);
            }
        });

        // Send join_room event
        var joinData = new JoinRoomRequest
        {
            roomId = roomId,
            username = myUsername,
            characterClass = characterClass,
            userId = myUserId,
            password = "",
            level = PlayerPrefs.GetInt("Level", 1)
        };

        string json = JsonUtility.ToJson(joinData);
        Emit("join_room", json);

        DebugLog($"üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} –∫–∞–∫ {characterClass}");

        // Fallback timeout - –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
        StartCoroutine(JoinRoomTimeout(3f, () =>
        {
            if (!responseReceived)
            {
                responseReceived = true;
                Debug.LogWarning("[SocketIO] ‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è room_players, —Å—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥ —É—Å–ø–µ—à–Ω—ã–º");
                onComplete?.Invoke(true);
            }
        }));
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç–µ (–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
    /// </summary>
    public void RequestRoomPlayers()
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId))
        {
            Debug.LogWarning("[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ!");
            return;
        }

        var data = new { roomId = currentRoomId };
        Emit("get_room_players", JsonUtility.ToJson(data));
        DebugLog($"üîÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {currentRoomId}");
    }

    private IEnumerator JoinRoomTimeout(float delay, Action callback)
    {
        yield return new WaitForSeconds(delay);
        callback?.Invoke();
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity, bool isGrounded)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new PlayerUpdateRequest
        {
            position = new SerializableVector3(position),
            rotation = new SerializableVector3(rotation.eulerAngles),
            velocity = new SerializableVector3(velocity),
            isGrounded = isGrounded
        };

        Emit("player_update", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void SendAnimation(string animation, float speed = 1.0f)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new AnimationRequest
        {
            animation = animation,
            speed = speed
        };

        Emit("player_animation", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É
    /// </summary>
    public void SendAttack(string targetType, string targetId, float damage, string attackType = "melee", int skillId = 0)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new AttackRequest
        {
            attackType = attackType,
            targetType = targetType,
            targetId = targetId,
            damage = damage,
            skillId = skillId
        };

        Emit("player_attack", JsonUtility.ToJson(data));
        DebugLog($"‚öîÔ∏è –ê—Ç–∞–∫–∞: {targetType} {targetId}, —É—Ä–æ–Ω {damage}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    /// </summary>
    public void SendDamage(float damage, float currentHealth, string attackerId)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new DamageRequest
        {
            damage = damage,
            currentHealth = currentHealth,
            attackerId = attackerId
        };

        Emit("player_damaged", JsonUtility.ToJson(data));
        DebugLog($"üíî –£—Ä–æ–Ω: {damage}, HP: {currentHealth}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void SendRespawn(Vector3 position)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new RespawnRequest
        {
            position = new SerializableVector3(position)
        };

        Emit("player_respawn", JsonUtility.ToJson(data));
        DebugLog("üîÑ –†–µ—Å–ø–∞–≤–Ω");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞
    /// </summary>
    public void SendSkill(int skillId, string targetSocketId, Vector3 targetPosition)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new
        {
            skillId = skillId,
            targetSocketId = targetSocketId,
            targetX = targetPosition.x,
            targetY = targetPosition.y,
            targetZ = targetPosition.z
        };

        Emit("player_skill", JsonUtility.ToJson(data));
        DebugLog($"üîÆ –°–∫–∏–ª–ª {skillId}");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ/–º–∞–Ω—É
    /// </summary>
    public void UpdateHealth(int currentHP, int maxHP, int currentMP, int maxMP)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new
        {
            currentHP = currentHP,
            maxHP = maxHP,
            currentMP = currentMP,
            maxMP = maxMP
        };

        Emit("update_health", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –í—Ä–∞–≥ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω
    /// </summary>
    public void SendEnemyDamaged(string enemyId, float damage, float currentHealth)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new EnemyDamagedRequest
        {
            roomId = currentRoomId,
            enemyId = enemyId,
            damage = damage,
            currentHealth = currentHealth
        };

        Emit("enemy_damaged", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –í—Ä–∞–≥ —É–±–∏—Ç
    /// </summary>
    public void SendEnemyKilled(string enemyId, Vector3 position)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new EnemyKilledRequest
        {
            roomId = currentRoomId,
            enemyId = enemyId,
            position = new SerializableVector3(position)
        };

        Emit("enemy_killed", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    /// </summary>
    public void LogStats()
    {
        Debug.Log($"[SocketIO] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                  $"  –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {isConnected}\n" +
                  $"  Session ID: {sessionId}\n" +
                  $"  –ö–æ–º–Ω–∞—Ç–∞: {currentRoomId}\n" +
                  $"  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messagesSent}\n" +
                  $"  –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messagesReceived}\n" +
                  $"  –ü–∏–Ω–≥: {currentPing:F0}ms\n" +
                  $"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {myUsername}");
    }

    private void DebugLog(string message)
    {
        if (debugMode)
        {
            Debug.Log($"[SocketIO] {message}");
        }
    }

    // Properties
    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string SessionId => sessionId;
    public string Username => myUsername;
    public string UserId => myUserId;
    public float Ping => currentPing;
    public int MessagesSent => messagesSent;
    public int MessagesReceived => messagesReceived;
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// DATA CLASSES FOR NETWORK COMMUNICATION
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/// <summary>
/// Serializable Vector3 for network transmission
/// </summary>
[Serializable]
public class SerializableVector3
{
    public float x;
    public float y;
    public float z;

    public SerializableVector3() { }

    public SerializableVector3(Vector3 v)
    {
        x = v.x;
        y = v.y;
        z = v.z;
    }

    public SerializableVector3(float x, float y, float z)
    {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public Vector3 ToVector3()
    {
        return new Vector3(x, y, z);
    }
}

/// <summary>
/// Player position/movement update request
/// </summary>
[Serializable]
public class PlayerUpdateRequest
{
    public SerializableVector3 position;
    public SerializableVector3 rotation;
    public SerializableVector3 velocity;
    public bool isGrounded;
}

/// <summary>
/// Animation update request
/// </summary>
[Serializable]
public class AnimationRequest
{
    public string animation;
    public float speed;
}

/// <summary>
/// Attack request
/// </summary>
[Serializable]
public class AttackRequest
{
    public string attackType;
    public string targetType;
    public string targetId;
    public float damage;
    public int skillId;
}

/// <summary>
/// Damage received request
/// </summary>
[Serializable]
public class DamageRequest
{
    public float damage;
    public float currentHealth;
    public string attackerId;
}

/// <summary>
/// Respawn request
/// </summary>
[Serializable]
public class RespawnRequest
{
    public SerializableVector3 position;
}

/// <summary>
/// Enemy damaged request
/// </summary>
[Serializable]
public class EnemyDamagedRequest
{
    public string roomId;
    public string enemyId;
    public float damage;
    public float currentHealth;
}

/// <summary>
/// Enemy killed request
/// </summary>
[Serializable]
public class EnemyKilledRequest
{
    public string roomId;
    public string enemyId;
    public SerializableVector3 position;
}

/// <summary>
/// Join room request
/// </summary>
[Serializable]
public class JoinRoomRequest
{
    public string roomId;
    public string username;
    public string characterClass;
    public string userId;
    public string password;
    public int level;
}

/// <summary>
/// Create room request
/// </summary>
[Serializable]
public class CreateRoomRequest
{
    public string roomName;
    public int maxPlayers;
    public bool isPrivate;
    public string password;
    public string characterClass;
    public string username;
    public int level;
}

/// <summary>
/// Room info
/// </summary>
[Serializable]
public class RoomInfo
{
    public string roomId;
    public string roomName;
    public int currentPlayers;
    public int maxPlayers;
    public bool canJoin;
    public string status;
    public bool isHost;
}

/// <summary>
/// Create room response
/// </summary>
[Serializable]
public class CreateRoomResponse
{
    public bool success;
    public string message;
    public RoomInfo room;
}

/// <summary>
/// Join room response
/// </summary>
[Serializable]
public class JoinRoomResponse
{
    public bool success;
    public string message;
    public RoomInfo room;
}

/// <summary>
/// Room list response
/// </summary>
[Serializable]
public class RoomListResponse
{
    public bool success;
    public RoomInfo[] rooms;
    public int total;
}
