using UnityEngine;

/// <summary>
/// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
/// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∞—Ç–∞–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö —á–µ—Ä–µ–∑ WebSocket
/// </summary>
[RequireComponent(typeof(PlayerAttack))]
public class NetworkCombatSync : MonoBehaviour
{
    [Header("Settings")]
    [SerializeField] private bool enableSync = true;

    private PlayerAttack playerAttack;
    private HealthSystem healthSystem;
    private ManaSystem manaSystem;
    private bool isMultiplayer = false;

    // Cooldown –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HP/MP (–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
    private float lastHealthSync = 0f;
    private float healthSyncInterval = 0.5f; // –†–∞–∑ –≤ 0.5 —Å–µ–∫—É–Ω–¥—ã

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ HP –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–Ω–∞/—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    private float previousHP = 0f;

    void Start()
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Ä–µ–∂–∏–º
        string roomId = PlayerPrefs.GetString("CurrentRoomId", "");
        isMultiplayer = !string.IsNullOrEmpty(roomId);

        if (!isMultiplayer)
        {
            Debug.Log("[NetworkCombatSync] –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
            enabled = false;
            return;
        }

        playerAttack = GetComponent<PlayerAttack>();
        healthSystem = GetComponent<HealthSystem>();
        manaSystem = GetComponent<ManaSystem>();

        if (healthSystem != null)
        {
            healthSystem.OnHealthChanged += OnHealthChanged;
            healthSystem.OnDeath += OnPlayerDeath;
        }

        if (manaSystem != null)
        {
            manaSystem.OnManaChanged += OnManaChanged;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ HP
        if (healthSystem != null)
        {
            previousHP = healthSystem.CurrentHealth;
        }

        Debug.Log("[NetworkCombatSync] ‚úÖ –ë–æ–µ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
    }

    void Update()
    {
        if (!enableSync || !isMultiplayer) return;

        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º HP/MP
        if (Time.time - lastHealthSync > healthSyncInterval)
        {
            SyncHealth();
            lastHealthSync = Time.time;
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ PlayerAttack –ø–æ—Å–ª–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É—Ä–æ–Ω–∞
    /// –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SPECIAL stats –≤–º–µ—Å—Ç–æ pre-calculated damage
    /// </summary>
    public void SendAttack(GameObject target, float damage, string attackType)
    {
        if (!enableSync || !isMultiplayer || SocketIOManager.Instance == null)
        {
            return;
        }

        if (!SocketIOManager.Instance.IsConnected)
        {
            return;
        }

        if (target == null)
        {
            Debug.LogWarning("[NetworkCombatSync] ‚ùå SendAttack - target is NULL!");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º socketId —Ü–µ–ª–∏ (–µ—Å–ª–∏ —ç—Ç–æ NetworkPlayer)
        string targetId = "";
        string targetType = "enemy"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞—Ç–∞–∫—É–µ–º –≤—Ä–∞–≥–∞

        NetworkPlayer networkTarget = target.GetComponent<NetworkPlayer>();
        if (networkTarget != null)
        {
            // –≠—Ç–æ –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫!
            targetId = networkTarget.socketId;
            targetType = "player";
            Debug.Log($"[NetworkCombatSync] –ê—Ç–∞–∫–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞: {networkTarget.username} (Socket: {targetId})");
        }
        else
        {
            // –≠—Ç–æ NPC –≤—Ä–∞–≥
            Enemy enemy = target.GetComponent<Enemy>();
            if (enemy != null)
            {
                targetId = enemy.GetEnemyId(); // –ü–æ–ª—É—á–∞–µ–º ID –≤—Ä–∞–≥–∞
                Debug.Log($"[NetworkCombatSync] –ê—Ç–∞–∫–∞ –Ω–∞ –≤—Ä–∞–≥–∞: {enemy.GetEnemyName()} (ID: {targetId})");
            }
        }

        if (string.IsNullOrEmpty(targetId))
        {
            Debug.LogWarning($"[NetworkCombatSync] ‚ùå SendAttack - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Ü–µ–ª–∏! Target: {target.name}, Has Enemy: {target.GetComponent<Enemy>() != null}, Has NetworkPlayer: {target.GetComponent<NetworkPlayer>() != null}");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º SPECIAL stats –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        CharacterStats characterStats = GetComponent<CharacterStats>();
        PlayerAttack playerAttack = GetComponent<PlayerAttack>();

        if (characterStats == null)
        {
            Debug.LogError("[NetworkCombatSync] ‚ùå CharacterStats –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.");
            return;
        }

        if (playerAttack == null)
        {
            Debug.LogError("[NetworkCombatSync] ‚ùå PlayerAttack –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è (–ë–ï–ó –±–æ–Ω—É—Å–æ–≤ –æ—Ç —Å—Ç–∞—Ç–æ–≤)
        float baseDamage = playerAttack.BaseDamage;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ç–∞–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å SPECIAL stats (—Å–µ—Ä–≤–µ—Ä —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —É—Ä–æ–Ω –∏ –∫—Ä–∏—Ç—ã!)
        Vector3 attackPosition = transform.position;
        Vector3 targetPosition = target.transform.position;
        Vector3 attackDirection = (targetPosition - attackPosition).normalized;

        SocketIOManager.Instance.SendPlayerAttack(
            targetType,
            targetId,
            characterStats.strength,      // SPECIAL: Strength –¥–ª—è —Ñ–∏–∑. —É—Ä–æ–Ω–∞
            characterStats.intelligence,  // SPECIAL: Intelligence –¥–ª—è –º–∞–≥. —É—Ä–æ–Ω–∞
            characterStats.luck,          // SPECIAL: Luck –¥–ª—è –∫—Ä–∏—Ç–æ–≤
            baseDamage,                   // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –æ—Ä—É–∂–∏—è (–ë–ï–ó –±–æ–Ω—É—Å–æ–≤)
            attackType,
            attackPosition,
            attackDirection,
            targetPosition
        );

        Debug.Log($"[NetworkCombatSync] ‚úÖ –ê—Ç–∞–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {attackType} ‚Üí {targetType} (ID: {targetId})");
        Debug.Log($"[NetworkCombatSync] üìä SPECIAL: STR={characterStats.strength}, INT={characterStats.intelligence}, LUCK={characterStats.luck}, Base Damage={baseDamage}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    public void SendSkill(int skillId, GameObject target, Vector3 targetPosition)
    {
        if (!enableSync || !isMultiplayer || SocketIOManager.Instance == null)
        {
            Debug.Log("[NetworkCombatSync] SendSkill –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)");
            return;
        }

        if (!SocketIOManager.Instance.IsConnected)
        {
            Debug.LogWarning("[NetworkCombatSync] SendSkill –ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return;
        }

        string targetSocketId = "";
        NetworkPlayer networkTarget = target?.GetComponent<NetworkPlayer>();
        if (networkTarget != null)
        {
            targetSocketId = networkTarget.socketId;
            Debug.Log($"[NetworkCombatSync] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞: {networkTarget.username}");
        }

        SocketIOManager.Instance.SendPlayerSkill(skillId, targetSocketId, targetPosition);
        Debug.Log($"[NetworkCombatSync] ‚úÖ –°–∫–∏–ª–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ID={skillId}");
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ/–º–∞–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    /// </summary>
    private void SyncHealth()
    {
        if (SocketIOManager.Instance == null || !SocketIOManager.Instance.IsConnected)
            return;

        float currentHP = healthSystem != null ? healthSystem.CurrentHealth : 0;
        float maxHP = healthSystem != null ? healthSystem.MaxHealth : 100;
        float currentMP = manaSystem != null ? manaSystem.CurrentMana : 0;
        float maxMP = manaSystem != null ? manaSystem.MaxMana : 100;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ç–æ –∞—Ç–∞–∫–æ–≤–∞–ª (–ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
        string lastAttackerId = "";

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ HP –£–ú–ï–ù–¨–®–ò–õ–û–°–¨ (—É—Ä–æ–Ω), –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!
        if (currentHP < previousHP)
        {
            float damage = previousHP - currentHP;
            SocketIOManager.Instance.SendPlayerDamaged(damage, currentHP, maxHP, lastAttackerId);
            Debug.Log($"[NetworkCombatSync] üíî –£—Ä–æ–Ω: -{damage:F1} HP, –æ—Å—Ç–∞–ª–æ—Å—å {currentHP:F1}/{maxHP:F1}");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º previousHP –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        previousHP = currentHP;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
    /// </summary>
    private void OnHealthChanged(float current, float max)
    {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
        SyncHealth();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–Ω—ã
    /// </summary>
    private void OnManaChanged(float current, float max)
    {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–∞–Ω—ã
        SyncHealth();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void OnPlayerDeath()
    {
        Debug.Log("[NetworkCombatSync] üíÄ –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±");

        // –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–Ω–∞–µ—Ç –æ –Ω–∞—à–µ–π —Å–º–µ—Ä—Ç–∏ —á–µ—Ä–µ–∑ health update
        // –ó–¥–µ—Å—å –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å UI —Å–º–µ—Ä—Ç–∏
    }

    void OnDestroy()
    {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏–π
        if (healthSystem != null)
        {
            healthSystem.OnHealthChanged -= OnHealthChanged;
            healthSystem.OnDeath -= OnPlayerDeath;
        }

        if (manaSystem != null)
        {
            manaSystem.OnManaChanged -= OnManaChanged;
        }
    }
}
