using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using UnityEngine.Networking;

/// <summary>
/// Socket.IO –∫–ª–∏–µ–Ω—Ç –¥–ª—è Unity —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä —Å–æ–±—ã—Ç–∏–π
/// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ Render.com –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
/// </summary>
public class AetherionSocketIO : MonoBehaviour
{
    public static AetherionSocketIO Instance { get; private set; }

    [Header("Server Settings")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private float heartbeatInterval = 20f;
    [SerializeField] private float pollInterval = 0.05f; // 20 Hz

    // Connection state
    private bool isConnected = false;
    private bool isConnecting = false;
    private string sessionId = "";
    private string authToken = "";
    private string currentRoomId = "";
    private string myUsername = "";

    // Heartbeat
    private float lastHeartbeat = 0f;

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    // Socket.IO URLs
    private string HandshakeUrl => $"{serverUrl}/socket.io/?EIO=4&transport=polling";
    private string PollUrl => $"{serverUrl}/socket.io/?EIO=4&transport=polling&sid={sessionId}";

    // Listening coroutine
    private Coroutine listeningCoroutine;

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    void Update()
    {
        // Heartbeat
        if (isConnected && Time.time - lastHeartbeat > heartbeatInterval)
        {
            SendHeartbeat();
            lastHeartbeat = Time.time;
        }
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected || isConnecting)
        {
            Debug.LogWarning("[SocketIO] –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è");
            onComplete?.Invoke(false);
            return;
        }

        authToken = token;
        myUsername = PlayerPrefs.GetString("Username", "Player");
        StartCoroutine(ConnectCoroutine(onComplete));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    /// </summary>
    private IEnumerator ConnectCoroutine(Action<bool> onComplete)
    {
        isConnecting = true;
        Debug.Log($"[SocketIO] üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // Socket.io handshake
        UnityWebRequest request = UnityWebRequest.Get(HandshakeUrl);
        request.SetRequestHeader("Authorization", $"Bearer {authToken}");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            // Parse session ID from response
            string response = request.downloadHandler.text;
            Debug.Log($"[SocketIO] Handshake response: {response}");

            // Socket.io response format: 0{"sid":"xxxxx","upgrades":["websocket"],"pingInterval":25000,"pingTimeout":60000}
            int sidStart = response.IndexOf("\"sid\":\"") + 7;
            int sidEnd = response.IndexOf("\"", sidStart);
            if (sidStart > 6 && sidEnd > sidStart)
            {
                sessionId = response.Substring(sidStart, sidEnd - sidStart);
                isConnected = true;
                isConnecting = false;
                lastHeartbeat = Time.time;

                Debug.Log($"[SocketIO] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Session ID: {sessionId}");
                onComplete?.Invoke(true);

                // Start listening for events
                listeningCoroutine = StartCoroutine(ListenCoroutine());
            }
            else
            {
                Debug.LogError("[SocketIO] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å session ID");
                isConnecting = false;
                onComplete?.Invoke(false);
            }
        }
        else
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {request.error}");
            isConnecting = false;
            onComplete?.Invoke(false);
        }
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (!isConnected) return;

        Debug.Log("[SocketIO] üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...");

        // Stop listening
        if (listeningCoroutine != null)
        {
            StopCoroutine(listeningCoroutine);
            listeningCoroutine = null;
        }

        isConnected = false;
        sessionId = "";
        currentRoomId = "";
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (Socket.IO format)
    /// </summary>
    public void Emit(string eventName, string jsonData)
    {
        if (!isConnected)
        {
            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        StartCoroutine(EmitCoroutine(eventName, jsonData));
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    private IEnumerator EmitCoroutine(string eventName, string jsonData)
    {
        // Socket.io message format: 42["event_name",{data}]
        string message = $"42[\"{eventName}\",{jsonData}]";

        UnityWebRequest request = new UnityWebRequest(PollUrl, "POST");
        byte[] bodyRaw = Encoding.UTF8.GetBytes(message);
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();
        request.SetRequestHeader("Content-Type", "text/plain");

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            Debug.Log($"[SocketIO] üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eventName}");
        }
        else
        {
            // Ignore 400 errors - Socket.IO sometimes returns them even on success
            if (request.responseCode != 400)
            {
                Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ '{eventName}': {request.error}");
            }
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (!eventCallbacks.ContainsKey(eventName))
        {
            eventCallbacks[eventName] = callback;
        }
        else
        {
            eventCallbacks[eventName] += callback;
        }
        Debug.Log($"[SocketIO] üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
    }

    /// <summary>
    /// –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public void Off(string eventName)
    {
        if (eventCallbacks.ContainsKey(eventName))
        {
            eventCallbacks.Remove(eventName);
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å heartbeat (ping)
    /// </summary>
    private void SendHeartbeat()
    {
        if (!isConnected) return;
        StartCoroutine(HeartbeatCoroutine());
    }

    private IEnumerator HeartbeatCoroutine()
    {
        UnityWebRequest request = new UnityWebRequest(PollUrl, "POST");
        byte[] bodyRaw = Encoding.UTF8.GetBytes("2"); // Socket.io ping message
        request.uploadHandler = new UploadHandlerRaw(bodyRaw);
        request.downloadHandler = new DownloadHandlerBuffer();

        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            Debug.Log("[SocketIO] üíì Heartbeat OK");
        }
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    private IEnumerator ListenCoroutine()
    {
        Debug.Log("[SocketIO] üëÇ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...");

        while (isConnected)
        {
            UnityWebRequest request = UnityWebRequest.Get(PollUrl);

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                string response = request.downloadHandler.text;

                // Parse Socket.io messages
                if (!string.IsNullOrEmpty(response) && response.Length > 2)
                {
                    ParseSocketIOMessages(response);
                }
            }

            yield return new WaitForSeconds(pollInterval);
        }

        Debug.Log("[SocketIO] üëÇ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ Socket.IO —Å–æ–æ–±—â–µ–Ω–∏–π
    /// </summary>
    private void ParseSocketIOMessages(string response)
    {
        // Socket.IO –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        // Format: 42["event_name",{data}]

        if (response.StartsWith("42["))
        {
            try
            {
                // Extract event name and data
                int eventStart = response.IndexOf("[\"") + 2;
                int eventEnd = response.IndexOf("\",", eventStart);

                if (eventEnd > eventStart)
                {
                    string eventName = response.Substring(eventStart, eventEnd - eventStart);

                    // Find JSON data (everything between the comma and the final ])
                    int dataStart = eventEnd + 2;
                    int dataEnd = response.LastIndexOf(']');

                    if (dataEnd > dataStart)
                    {
                        string jsonData = response.Substring(dataStart, dataEnd - dataStart);

                        Debug.Log($"[SocketIO] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {eventName}");

                        // Invoke callbacks
                        if (eventCallbacks.ContainsKey(eventName))
                        {
                            eventCallbacks[eventName]?.Invoke(jsonData);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
            }
        }
    }

    // ===== GAME-SPECIFIC METHODS =====

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[SocketIO] ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;

        // Subscribe to room_players event BEFORE joining
        On("room_players", (data) =>
        {
            Debug.Log($"[SocketIO] ‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ: {data}");
            onComplete?.Invoke(true);
        });

        // Send join_room event
        var joinData = new JoinRoomRequest
        {
            roomId = roomId,
            username = myUsername,
            characterClass = characterClass,
            password = "", // –ü—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
            level = 1 // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ PlayerPrefs
        };

        string json = JsonUtility.ToJson(joinData);
        Emit("join_room", json);

        Debug.Log($"[SocketIO] üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} –∫–∞–∫ {characterClass}");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏ –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity, bool isGrounded)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new PlayerUpdateRequest
        {
            position = new SerializableVector3(position),
            rotation = new SerializableVector3(rotation.eulerAngles),
            velocity = new SerializableVector3(velocity),
            isGrounded = isGrounded
        };

        Emit("player_update", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void SendAnimation(string animation, float speed = 1.0f)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new AnimationRequest
        {
            animation = animation,
            speed = speed
        };

        Emit("player_animation", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É
    /// </summary>
    public void SendAttack(string targetType, string targetId, float damage, string attackType = "melee", int skillId = 0)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new AttackRequest
        {
            attackType = attackType,
            targetType = targetType,
            targetId = targetId,
            damage = damage,
            skillId = skillId
        };

        Emit("player_attack", JsonUtility.ToJson(data));
        Debug.Log($"[SocketIO] ‚öîÔ∏è –ê—Ç–∞–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {targetType} {targetId}, —É—Ä–æ–Ω {damage}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    /// </summary>
    public void SendDamage(float damage, float currentHealth, string attackerId)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new DamageRequest
        {
            damage = damage,
            currentHealth = currentHealth,
            attackerId = attackerId
        };

        Emit("player_damaged", JsonUtility.ToJson(data));
        Debug.Log($"[SocketIO] üíî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Ä–æ–Ω: {damage}, –∑–¥–æ—Ä–æ–≤—å–µ: {currentHealth}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void SendRespawn(Vector3 position)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new RespawnRequest
        {
            position = new SerializableVector3(position)
        };

        Emit("player_respawn", JsonUtility.ToJson(data));
        Debug.Log($"[SocketIO] üîÑ –†–µ—Å–ø–∞–≤–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    }

    /// <summary>
    /// –í—Ä–∞–≥ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω
    /// </summary>
    public void SendEnemyDamaged(string enemyId, float damage, float currentHealth)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new EnemyDamagedRequest
        {
            roomId = currentRoomId,
            enemyId = enemyId,
            damage = damage,
            currentHealth = currentHealth
        };

        Emit("enemy_damaged", JsonUtility.ToJson(data));
    }

    /// <summary>
    /// –í—Ä–∞–≥ —É–±–∏—Ç
    /// </summary>
    public void SendEnemyKilled(string enemyId, Vector3 position)
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId)) return;

        var data = new EnemyKilledRequest
        {
            roomId = currentRoomId,
            enemyId = enemyId,
            position = new SerializableVector3(position)
        };

        Emit("enemy_killed", JsonUtility.ToJson(data));
    }

    // Properties
    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string SessionId => sessionId;
    public string Username => myUsername;
}
