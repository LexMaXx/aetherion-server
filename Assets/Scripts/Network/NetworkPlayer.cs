using UnityEngine;
using TMPro;

/// <summary>
/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
/// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é, –∞–Ω–∏–º–∞—Ü–∏—é, –∑–¥–æ—Ä–æ–≤—å–µ
/// </summary>
public class NetworkPlayer : MonoBehaviour
{
    [Header("Network Info")]
    public string socketId;
    public string username;
    public string characterClass;

    [Header("Components")]
    private Animator animator;
    private CharacterController characterController;
    private NetworkTransform networkTransform;

    [Header("Health (for health bar only)")]
    private int currentHP = 100;
    private int maxHP = 100;

    [Header("Sync Settings")]
    [SerializeField] private float positionLerpSpeed = 30f; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è 60Hz PvP (–±—ã–ª–æ 10 ‚Üí 20 ‚Üí 30)
    [SerializeField] private float rotationLerpSpeed = 40f; // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è 60Hz PvP (–±—ã–ª–æ 10 ‚Üí 20 ‚Üí 40)

    // Target state (received from server)
    private Vector3 targetPosition;
    private Quaternion targetRotation;
    private string currentAnimationState = "Idle";

    // Health
    private int currentMP = 100;
    private int maxMP = 100;

    // Interpolation
    private bool hasReceivedFirstUpdate = false;

    void Awake()
    {
        // –í–ê–ñ–ù–û: Animator –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ "Model"
        animator = GetComponentInChildren<Animator>();
        if (animator == null)
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è Animator –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {gameObject.name}!");
        }

        characterController = GetComponent<CharacterController>();

        // –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º CharacterController –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        // –ò–Ω–∞—á–µ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –∏ –∫–æ–ª–ª–∏–∑–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å —Å–µ—Ç–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        if (characterController != null)
        {
            characterController.enabled = false;
            Debug.Log("[NetworkPlayer] ‚úÖ CharacterController –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º NetworkTransform –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        networkTransform = GetComponent<NetworkTransform>();
        if (networkTransform == null)
        {
            networkTransform = gameObject.AddComponent<NetworkTransform>();
        }

        // Disable local player components for network players
        var playerController = GetComponent<PlayerController>();
        if (playerController != null) playerController.enabled = false;

        var playerAttack = GetComponent<PlayerAttack>();
        if (playerAttack != null) playerAttack.enabled = false;

        var targetSystem = GetComponent<TargetSystem>();
        if (targetSystem != null) targetSystem.enabled = false;

        // But enable health/stats for damage visualization
        // Keep CharacterStatsData, HealthSystem, etc enabled
    }

    void Start()
    {
        // –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–µ–≤—É—é —Å—Ç–æ–π–∫—É –¥–ª—è NetworkPlayer (InBattle = true)
        if (animator != null)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä InBattle
            foreach (AnimatorControllerParameter param in animator.parameters)
            {
                if (param.name == "InBattle")
                {
                    animator.SetBool("InBattle", true);
                    Debug.Log($"[NetworkPlayer] ‚úÖ –ë–æ–µ–≤–∞—è —Å—Ç–æ–π–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {username}");
                    break;
                }
            }
        }
    }

    void Update()
    {
        if (!hasReceivedFirstUpdate) return;

        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ NetworkTransform —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–µ–π
        // –ò–Ω–∞—á–µ —É–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–µ–π –∑–¥–µ—Å—å
        if (networkTransform == null)
        {
            // Smooth position interpolation
            // CharacterController –æ—Ç–∫–ª—é—á—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É transform.position
            transform.position = Vector3.Lerp(transform.position, targetPosition, positionLerpSpeed * Time.deltaTime);

            // Smooth rotation interpolation
            transform.rotation = Quaternion.Lerp(transform.rotation, targetRotation, rotationLerpSpeed * Time.deltaTime);
        }

    }

    // –£–î–ê–õ–ï–ù–û: –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ nameplate - –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ EnemyNameplate.cs

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π velocity –¥–ª—è Dead Reckoning)
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity = default, float timestamp = 0f)
    {
        if (timestamp == 0f)
        {
            timestamp = Time.time;
        }

        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if (Time.frameCount % 60 == 0)
        {
            Debug.Log($"[NetworkPlayer] üîß UpdatePosition –¥–ª—è {username}: current=({transform.position.x:F2}, {transform.position.y:F2}, {transform.position.z:F2}), target=({position.x:F2}, {position.y:F2}, {position.z:F2}), distance={Vector3.Distance(transform.position, position):F2}m");
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º NetworkTransform –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (networkTransform != null)
        {
            networkTransform.ReceivePositionUpdate(position, rotation, velocity, timestamp);
        }
        else
        {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ NetworkTransform –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            targetPosition = position;
            targetRotation = rotation;

            if (!hasReceivedFirstUpdate)
            {
                // First update - teleport
                transform.position = position;
                transform.rotation = rotation;
                hasReceivedFirstUpdate = true;
                Debug.Log($"[NetworkPlayer] üéØ –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {username}: ({position.x:F2}, {position.y:F2}, {position.z:F2})");
            }
        }

        hasReceivedFirstUpdate = true;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void UpdateAnimation(string animationState)
    {
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–í–°–ï–ì–î–ê, –Ω–µ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É!)
        Debug.Log($"[NetworkPlayer] üîÑ UpdateAnimation –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}: —Ç–µ–∫—É—â–µ–µ={currentAnimationState}, –Ω–æ–≤–æ–µ={animationState}");

        if (animator == null)
        {
            Debug.LogError($"[NetworkPlayer] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Animator is null –¥–ª—è {username}!");
            Debug.LogError($"[NetworkPlayer] üîç –ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ Animator –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö...");

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Animator —Å–Ω–æ–≤–∞
            animator = GetComponentInChildren<Animator>();

            if (animator == null)
            {
                Debug.LogError($"[NetworkPlayer] ‚ùå Animator –ù–ï –ù–ê–ô–î–ï–ù –¥–∞–∂–µ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö!");
                return;
            }
            else
            {
                Debug.Log($"[NetworkPlayer] ‚úÖ Animator –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ: {animator.gameObject.name}");
            }
        }

        // –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        bool stateChanged = (currentAnimationState != animationState);

        if (stateChanged)
        {
            Debug.Log($"[NetworkPlayer] üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è {username}: {currentAnimationState} ‚Üí {animationState}");
            currentAnimationState = animationState;
        }
        else
        {
            Debug.Log($"[NetworkPlayer] üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ {animationState} –¥–ª—è {username}");
        }

        // –í–ê–ñ–ù–û: PlayerController –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Blend Tree —Å–∏—Å—Ç–µ–º—É
        // IsMoving (bool), MoveX (float), MoveY (float)
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º isWalking/isRunning, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

        // Set new state
        Debug.Log($"[NetworkPlayer] üé≠ –ü—Ä–∏–º–µ–Ω—è—é –∞–Ω–∏–º–∞—Ü–∏—é '{animationState}' –¥–ª—è {username}");

        switch (animationState)
        {
            case "Idle":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Idle: IsMoving=false, MoveX=0, MoveY=0, speed=1.0");
                animator.SetBool("IsMoving", false);
                animator.SetFloat("MoveX", 0);
                animator.SetFloat("MoveY", 0);
                animator.speed = 1.0f;
                break;

            case "Walking":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Walking: IsMoving=true, MoveX=0, MoveY=0.5, speed=0.5");
                animator.SetBool("IsMoving", true);
                animator.SetFloat("MoveX", 0);
                animator.SetFloat("MoveY", 0.5f); // 0.5 = Slow Run (—Ö–æ–¥—å–±–∞)
                animator.speed = 0.5f; // –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ö–æ–¥—å–±—ã
                break;

            case "Running":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Running: IsMoving=true, MoveX=0, MoveY=1.0, speed=1.0");
                animator.SetBool("IsMoving", true);
                animator.SetFloat("MoveX", 0);
                animator.SetFloat("MoveY", 1.0f); // 1.0 = Sprint (–±–µ–≥)
                animator.speed = 1.0f; // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                break;

            case "Attacking":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Attacking: Trigger=Attack");
                animator.SetTrigger("Attack");
                // –ù–µ –º–µ–Ω—è–µ–º IsMoving - –∞—Ç–∞–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
                break;

            case "Dead":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Dead: isDead=true, IsMoving=false");
                if (HasAnimatorParameter(animator, "isDead"))
                {
                    animator.SetBool("isDead", true);
                }
                animator.SetBool("IsMoving", false);
                break;

            case "Casting":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Casting: Trigger=Cast");
                animator.SetTrigger("Cast");
                break;

            default:
                Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏: '{animationState}' –¥–ª—è {username}");
                break;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ç–æ—Ä–∞
        Debug.Log($"[NetworkPlayer] üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ Animator –¥–ª—è {username}: IsMoving={animator.GetBool("IsMoving")}, MoveY={animator.GetFloat("MoveY"):F2}, speed={animator.speed:F2}");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Animator
    /// </summary>
    private bool HasAnimatorParameter(Animator anim, string paramName)
    {
        foreach (AnimatorControllerParameter param in anim.parameters)
        {
            if (param.name == paramName) return true;
        }
        return false;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void UpdateHealth(int hp, int maxHp, int mp, int maxMp)
    {
        currentHP = hp;
        maxHP = maxHp;
        currentMP = mp;
        maxMP = maxMp;

        // –£–î–ê–õ–ï–ù–û: UpdateHealthBar() - —Ç–µ–ø–µ—Ä—å EnemyNameplate —Å–∞–º –æ–±–Ω–æ–≤–ª—è–µ—Ç HP –±–∞—Ä —á–µ—Ä–µ–∑ LateUpdate

        // Check death
        if (currentHP <= 0)
        {
            OnDeath();
        }
    }

    // –£–î–ê–õ–ï–ù–û: UpdateHealthBar() - —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ EnemyNameplate.cs

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å
    /// </summary>
    private void OnDeath()
    {
        UpdateAnimation("Dead");
        Debug.Log($"[NetworkPlayer] {username} –ø–æ–≥–∏–±!");

        // Disable collider so players can walk through corpse
        var collider = GetComponent<Collider>();
        if (collider != null) collider.enabled = false;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void OnRespawn(Vector3 spawnPosition)
    {
        currentHP = maxHP;
        currentMP = maxMP;

        UpdatePosition(spawnPosition, Quaternion.identity);
        UpdateAnimation("Idle");

        // –£–î–ê–õ–ï–ù–û: UpdateHealthBar() - —Ç–µ–ø–µ—Ä—å EnemyNameplate —Å–∞–º –æ–±–Ω–æ–≤–ª—è–µ—Ç HP –±–∞—Ä

        // Re-enable collider
        var collider = GetComponent<Collider>();
        if (collider != null) collider.enabled = true;

        Debug.Log($"[NetworkPlayer] {username} –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è!");
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏ –° –≠–§–§–ï–ö–¢–ê–ú–ò
    /// </summary>
    public void PlayAttackAnimation(string attackType)
    {
        if (animator == null) return;

        Debug.Log($"[NetworkPlayer] üé¨ PlayAttackAnimation –¥–ª—è {username}: —Ç–∏–ø={attackType}");

        // –≠–§–§–ï–ö–¢ 1: –°–í–ï–ß–ï–ù–ò–ï –û–†–£–ñ–ò–Ø (—á–µ—Ä–µ–∑ ClassWeaponManager)
        ClassWeaponManager weaponManager = GetComponentInChildren<ClassWeaponManager>();
        if (weaponManager != null)
        {
            Debug.Log($"[NetworkPlayer] ‚ú® –ê–∫—Ç–∏–≤–∏—Ä—É—é —Å–≤–µ—á–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è –¥–ª—è {username}");
            weaponManager.ActivateWeaponGlow();

            // –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            StartCoroutine(DeactivateWeaponGlowAfterDelay(weaponManager, 1.0f));
        }
        else
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è ClassWeaponManager –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {username} - —Å–≤–µ—á–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
        }

        // –≠–§–§–ï–ö–¢ 2: –ê–ù–ò–ú–ê–¶–ò–Ø –ê–¢–ê–ö–ò
        switch (attackType)
        {
            case "melee":
                Debug.Log($"[NetworkPlayer] ‚öîÔ∏è –ë–ª–∏–∂–Ω—è—è –∞—Ç–∞–∫–∞: Trigger=Attack");
                animator.SetTrigger("Attack");
                break;

            case "ranged":
                Debug.Log($"[NetworkPlayer] üèπ –î–∞–ª—å–Ω—è—è –∞—Ç–∞–∫–∞: Trigger=RangedAttack (+ —Å–Ω–∞—Ä—è–¥)");
                if (HasAnimatorParameter(animator, "RangedAttack"))
                {
                    animator.SetTrigger("RangedAttack");
                }
                else
                {
                    // Fallback –µ—Å–ª–∏ –Ω–µ—Ç RangedAttack
                    animator.SetTrigger("Attack");
                }

                // –≠–§–§–ï–ö–¢ 3: –°–û–ó–î–ê–ù–ò–ï –°–ù–ê–†–Ø–î–ê –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫
                StartCoroutine(SpawnProjectileAfterDelay(attackType, 0.3f));
                break;

            case "skill":
            case "magic":
                Debug.Log($"[NetworkPlayer] üîÆ –ú–∞–≥–∏—è/–°–∫–∏–ª–ª: Trigger=Cast");
                animator.SetTrigger("Cast");
                break;
        }
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞: –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–µ—á–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
    /// </summary>
    private System.Collections.IEnumerator DeactivateWeaponGlowAfterDelay(ClassWeaponManager weaponManager, float delay)
    {
        yield return new WaitForSeconds(delay);

        if (weaponManager != null)
        {
            weaponManager.DeactivateWeaponGlow();
            Debug.Log($"[NetworkPlayer] üí§ –°–≤–µ—á–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è {username}");
        }
    }

    /// <summary>
    /// –ö–æ—Ä—É—Ç–∏–Ω–∞: —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∞—Ä—è–¥ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É (–¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫)
    /// </summary>
    private System.Collections.IEnumerator SpawnProjectileAfterDelay(string attackType, float delay)
    {
        yield return new WaitForSeconds(delay);

        Debug.Log($"[NetworkPlayer] üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞ –¥–ª—è {username}, –∫–ª–∞—Å—Å={characterClass}");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞ –ø–æ –∫–ª–∞—Å—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        string projectileName = GetProjectilePrefabName(characterClass);

        if (string.IsNullOrEmpty(projectileName))
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è –ù–µ—Ç —Å–Ω–∞—Ä—è–¥–∞ –¥–ª—è –∫–ª–∞—Å—Å–∞ {characterClass}");
            yield break;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞
        GameObject projectilePrefab = Resources.Load<GameObject>($"Projectiles/{projectileName}");

        if (projectilePrefab == null)
        {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ Assets/Prefabs/Projectiles/
#if UNITY_EDITOR
            string[] guids = UnityEditor.AssetDatabase.FindAssets($"{projectileName} t:Prefab");
            if (guids.Length > 0)
            {
                string path = UnityEditor.AssetDatabase.GUIDToAssetPath(guids[0]);
                projectilePrefab = UnityEditor.AssetDatabase.LoadAssetAtPath<GameObject>(path);
                Debug.Log($"[NetworkPlayer] ‚úÖ –ü—Ä–µ—Ñ–∞–± –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Assets: {path}");
            }
#endif
        }

        if (projectilePrefab == null)
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è –ü—Ä–µ—Ñ–∞–± —Å–Ω–∞—Ä—è–¥–∞ '{projectileName}' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            yield break;
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞ —Å–Ω–∞—Ä—è–¥–∞ (–ø—Ä–∞–≤–∞—è —Ä—É–∫–∞ –∏–ª–∏ WeaponTip)
        Transform spawnPoint = FindWeaponTip();
        Vector3 spawnPosition = spawnPoint != null ? spawnPoint.position : transform.position + transform.forward * 0.5f + Vector3.up * 1.5f;

        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞ (–≤–ø–µ—Ä—ë–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞)
        Vector3 direction = transform.forward;

        // –°–æ–∑–¥–∞—ë–º —Å–Ω–∞—Ä—è–¥
        GameObject projectileObj = Instantiate(projectilePrefab, spawnPosition, Quaternion.LookRotation(direction));

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Projectile)
        Projectile projectile = projectileObj.GetComponent<Projectile>();
        if (projectile != null)
        {
            // –î–ª—è NetworkPlayer —Å–Ω–∞—Ä—è–¥ —á–∏—Å—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–π (—É—Ä–æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä)
            // –¶–µ–ª—å = null, —É—Ä–æ–Ω = 0, –ø—Ä–æ—Å—Ç–æ –ª–µ—Ç–∏—Ç –≤–ø–µ—Ä—ë–¥
            // owner = this.gameObject —á—Ç–æ–±—ã —Å–Ω–∞—Ä—è–¥ –Ω–µ –ø–æ–ø–∞–¥–∞–ª –≤ —Å–≤–æ–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            projectile.Initialize(null, 0f, direction, this.gameObject);
            Debug.Log($"[NetworkPlayer] ‚úÖ –°–Ω–∞—Ä—è–¥ —Å–æ–∑–¥–∞–Ω: {projectileName} –¥–ª—è {username}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–µ—Ñ–∞–±–∞ —Å–Ω–∞—Ä—è–¥–∞ –ø–æ –∫–ª–∞—Å—Å—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    /// </summary>
    private string GetProjectilePrefabName(string className)
    {
        switch (className)
        {
            case "Archer":
                return "ArrowProjectile";
            case "Mage":
                return "FireballProjectile";
            case "Rogue":
                return "SoulShardsProjectile";
            default:
                return null; // –í–æ–∏–Ω –∏ –ü–∞–ª–∞–¥–∏–Ω - –±–ª–∏–∂–Ω–∏–π –±–æ–π, —Å–Ω–∞—Ä—è–¥–æ–≤ –Ω–µ—Ç
        }
    }

    /// <summary>
    /// –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –æ—Ä—É–∂–∏—è –¥–ª—è —Å–ø–∞–≤–Ω–∞ —Å–Ω–∞—Ä—è–¥–æ–≤
    /// </summary>
    private Transform FindWeaponTip()
    {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ WeaponTip
        Transform weaponTip = transform.Find("WeaponTip");
        if (weaponTip != null) return weaponTip;

        // –ò—â–µ–º –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
        string[] weaponTipNames = new string[]
        {
            "WeaponTip",
            "Weapon_Tip",
            "RightHandIndex3",
            "mixamorig:RightHandIndex3",
            "RightHand",
            "mixamorig:RightHand"
        };

        Transform[] allTransforms = GetComponentsInChildren<Transform>();
        foreach (string tipName in weaponTipNames)
        {
            foreach (Transform t in allTransforms)
            {
                if (t.name.Contains(tipName))
                {
                    Debug.Log($"[NetworkPlayer] ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞ –æ—Ä—É–∂–∏—è: {t.name}");
                    return t;
                }
            }
        }

        Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è –¢–æ—á–∫–∞ –æ—Ä—É–∂–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {username}");
        return null;
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–Ω (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç + –≤–∑—Ä—ã–≤)
    /// –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–∫–ª—é—á–µ–Ω–æ –º–∏–≥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–º –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public void ShowDamage(float damage)
    {
        Debug.Log($"[NetworkPlayer] {username} –ø–æ–ª—É—á–∏–ª {damage} —É—Ä–æ–Ω–∞!");

        // –≠–§–§–ï–ö–¢ 1: –ú–∏–≥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–º (–û–¢–ö–õ–Æ–ß–ï–ù–û)
        // StartCoroutine(FlashRed());

        // –≠–§–§–ï–ö–¢ 2: Hit effect (–≤–∫–ª—é—á—ë–Ω –æ–±—Ä–∞—Ç–Ω–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π - –Ω–µ –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã–π)
        SpawnHitEffect();

        // TODO: –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Ü–∏—Ñ—Ä—ã —É—Ä–æ–Ω–∞ (DamagePopup)
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è (–≤–∑—Ä—ã–≤)
    /// </summary>
    private void SpawnHitEffect()
    {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∞–± —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
        GameObject hitEffectPrefab = Resources.Load<GameObject>("Effects/HitEffect");

        if (hitEffectPrefab == null)
        {
            Debug.LogWarning("[NetworkPlayer] ‚ö†Ô∏è HitEffect –ø—Ä–µ—Ñ–∞–± –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/Effects/");
            return;
        }

        // –ü–æ–∑–∏—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ = —Ü–µ–Ω—Ç—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Ç–æ—Ä—Å)
        Vector3 hitPosition = transform.position + Vector3.up * 1.0f;

        // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç
        GameObject hitEffectObj = Instantiate(hitEffectPrefab, hitPosition, Quaternion.identity);

        Debug.Log($"[NetworkPlayer] üí• –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω –¥–ª—è {username} –≤ –ø–æ–∑–∏—Ü–∏–∏ {hitPosition}");

        // –ê–≤—Ç–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        Destroy(hitEffectObj, 2.0f);
    }

    /// <summary>
    /// –ú–∏–≥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
    /// –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ material instance —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
    /// </summary>
    private System.Collections.IEnumerator FlashRed()
    {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ù–∞—Ö–æ–¥–∏–º –í–°–ï SkinnedMeshRenderer (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–ª–æ + –æ–¥–µ–∂–¥–∞ + –æ—Ä—É–∂–∏–µ)
        SkinnedMeshRenderer[] renderers = GetComponentsInChildren<SkinnedMeshRenderer>();

        if (renderers.Length == 0)
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è SkinnedMeshRenderer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {username}!");
            yield break;
        }

        Debug.Log($"[NetworkPlayer] üí• FlashRed –¥–ª—è {username}: –Ω–∞–π–¥–µ–Ω–æ {renderers.Length} mesh'–µ–π");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –í–°–ï–• mesh'–µ–π
        Material[] materialInstances = new Material[renderers.Length];
        Color[] originalColors = new Color[renderers.Length];

        for (int i = 0; i < renderers.Length; i++)
        {
            materialInstances[i] = renderers[i].material; // –°–æ–∑–¥–∞—ë–º instance –æ–¥–∏–Ω —Ä–∞–∑
            originalColors[i] = materialInstances[i].color;

            // –ö—Ä–∞—Å–∏–º –≤ –∫—Ä–∞—Å–Ω—ã–π
            materialInstances[i].color = Color.red;
        }

        yield return new WaitForSeconds(0.1f);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
        for (int i = 0; i < materialInstances.Length; i++)
        {
            if (materialInstances[i] != null)
            {
                materialInstances[i].color = originalColors[i];
            }
        }

        Debug.Log($"[NetworkPlayer] ‚úÖ FlashRed –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è {username}");
    }

    // –£–î–ê–õ–ï–ù–û: GetNameplate(), ShowNameplate(), HideNameplate(), OnDestroy() - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ EnemyNameplate.cs

    // ===== –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø (–ù–û–í–û–ï) =====

    private GameObject transformationInstance; // –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–º–µ–¥–≤–µ–¥—å –∏ —Ç.–¥.)
    private GameObject originalModel; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ —Å–µ—Ç–µ–≤–æ–º—É –∏–≥—Ä–æ–∫—É (–ù–û–í–û–ï)
    /// </summary>
    public void ApplyTransformation(int skillId)
    {
        Debug.Log($"[NetworkPlayer] üêª ApplyTransformation –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}, skillId={skillId}");

        // –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–ª–ª –∏–∑ SkillDatabase
        SkillDatabase db = SkillDatabase.Instance;
        if (db == null)
        {
            Debug.LogError("[NetworkPlayer] ‚ùå SkillDatabase.Instance == null!");
            return;
        }

        SkillData skill = db.GetSkillById(skillId);
        if (skill == null)
        {
            Debug.LogError($"[NetworkPlayer] ‚ùå –°–∫–∏–ª–ª —Å ID {skillId} –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        if (skill.transformationModel == null)
        {
            Debug.LogError($"[NetworkPlayer] ‚ùå –£ —Å–∫–∏–ª–ª–∞ {skill.skillName} –Ω–µ—Ç –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!");
            return;
        }

        Debug.Log($"[NetworkPlayer] üîç –°–∫–∏–ª–ª –Ω–∞–π–¥–µ–Ω: {skill.skillName}, –º–æ–¥–µ–ª—å: {skill.transformationModel.name}");

        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        originalModel = GetComponentInChildren<SkinnedMeshRenderer>()?.gameObject;
        if (originalModel != null)
        {
            originalModel.SetActive(false);
            Debug.Log($"[NetworkPlayer] ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–∫—Ä—ã—Ç–∞: {originalModel.name}");
        }
        else
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è SkinnedMeshRenderer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {username}");
        }

        // –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        transformationInstance = Instantiate(skill.transformationModel, transform.position, transform.rotation, transform);
        Debug.Log($"[NetworkPlayer] ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {transformationInstance.name} –¥–ª—è {username}");

        // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Animator (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º animator –∏–∑ –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        Animator newAnimator = transformationInstance.GetComponentInChildren<Animator>();
        if (newAnimator != null)
        {
            animator = newAnimator;
            Debug.Log($"[NetworkPlayer] ‚úÖ Animator –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è {username}");

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–µ–≤—É—é —Å—Ç–æ–π–∫—É
            if (HasAnimatorParameter(animator, "InBattle"))
            {
                animator.SetBool("InBattle", true);
            }
        }
        else
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è Animator –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {username}");
        }

        Debug.Log($"[NetworkPlayer] üêª ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ {username}!");
    }

    /// <summary>
    /// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–ù–û–í–û–ï)
    /// </summary>
    public void EndTransformation()
    {
        Debug.Log($"[NetworkPlayer] üîÑ EndTransformation –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}");

        if (transformationInstance != null)
        {
            Destroy(transformationInstance);
            Debug.Log($"[NetworkPlayer] ‚úÖ –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è {username}");
        }

        if (originalModel != null)
        {
            originalModel.SetActive(true);
            Debug.Log($"[NetworkPlayer] ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {username}");

            // –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Animator
            Animator originalAnimator = originalModel.GetComponentInChildren<Animator>();
            if (originalAnimator != null)
            {
                animator = originalAnimator;
                Debug.Log($"[NetworkPlayer] ‚úÖ Animator –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—ë–Ω –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–ª—è {username}");

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–µ–≤—É—é —Å—Ç–æ–π–∫—É
                if (HasAnimatorParameter(animator, "InBattle"))
                {
                    animator.SetBool("InBattle", true);
                }
            }
        }

        transformationInstance = null;
        originalModel = null;

        Debug.Log($"[NetworkPlayer] üîÑ ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {username}!");
    }

    // Public getters
    public int CurrentHP => currentHP;
    public int MaxHP => maxHP;
    public int CurrentMP => currentMP;
    public int MaxMP => maxMP;
    public bool IsAlive => currentHP > 0;
}
