using UnityEngine;
using TMPro;

/// <summary>
/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
/// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é, –∞–Ω–∏–º–∞—Ü–∏—é, –∑–¥–æ—Ä–æ–≤—å–µ
/// </summary>
public class NetworkPlayer : MonoBehaviour
{
    [Header("Network Info")]
    public string socketId;
    public string username;
    public string characterClass;

    [Header("Components")]
    private Animator animator;
    private CharacterController characterController;
    private NetworkTransform networkTransform;

    [Header("UI")]
    [SerializeField] private GameObject nameplatePrefab;
    private GameObject nameplateInstance;
    private TextMeshProUGUI usernameText;
    private UnityEngine.UI.Image healthBar;

    [Header("Sync Settings")]
    [SerializeField] private float positionLerpSpeed = 10f;
    [SerializeField] private float rotationLerpSpeed = 10f;

    // Target state (received from server)
    private Vector3 targetPosition;
    private Quaternion targetRotation;
    private string currentAnimationState = "Idle";

    // Health
    private int currentHP = 100;
    private int maxHP = 100;
    private int currentMP = 100;
    private int maxMP = 100;

    // Interpolation
    private bool hasReceivedFirstUpdate = false;

    void Awake()
    {
        // –í–ê–ñ–ù–û: Animator –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ "Model"
        animator = GetComponentInChildren<Animator>();
        if (animator == null)
        {
            Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è Animator –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {gameObject.name}!");
        }

        characterController = GetComponent<CharacterController>();

        // –í–ê–ñ–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º CharacterController –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        // –ò–Ω–∞—á–µ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –∏ –∫–æ–ª–ª–∏–∑–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å —Å–µ—Ç–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        if (characterController != null)
        {
            characterController.enabled = false;
            Debug.Log("[NetworkPlayer] ‚úÖ CharacterController –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º NetworkTransform –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        networkTransform = GetComponent<NetworkTransform>();
        if (networkTransform == null)
        {
            networkTransform = gameObject.AddComponent<NetworkTransform>();
        }

        // Disable local player components for network players
        var playerController = GetComponent<PlayerController>();
        if (playerController != null) playerController.enabled = false;

        var playerAttack = GetComponent<PlayerAttack>();
        if (playerAttack != null) playerAttack.enabled = false;

        var targetSystem = GetComponent<TargetSystem>();
        if (targetSystem != null) targetSystem.enabled = false;

        // But enable health/stats for damage visualization
        // Keep CharacterStatsData, HealthSystem, etc enabled
    }

    void Start()
    {
        CreateNameplate();
    }

    void Update()
    {
        if (!hasReceivedFirstUpdate) return;

        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ NetworkTransform —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–µ–π
        // –ò–Ω–∞—á–µ —É–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–µ–π –∑–¥–µ—Å—å
        if (networkTransform == null)
        {
            // Smooth position interpolation
            // CharacterController –æ—Ç–∫–ª—é—á—ë–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É transform.position
            transform.position = Vector3.Lerp(transform.position, targetPosition, positionLerpSpeed * Time.deltaTime);

            // Smooth rotation interpolation
            transform.rotation = Quaternion.Lerp(transform.rotation, targetRotation, rotationLerpSpeed * Time.deltaTime);
        }

        // Update nameplate position
        if (nameplateInstance != null)
        {
            Vector3 nameplatePos = transform.position + Vector3.up * 2.5f; // Above player
            nameplateInstance.transform.position = nameplatePos;
            nameplateInstance.transform.rotation = Camera.main.transform.rotation; // Billboard
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—á–∫—É —Å –∏–º–µ–Ω–µ–º –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π
    /// </summary>
    private void CreateNameplate()
    {
        if (nameplatePrefab != null)
        {
            nameplateInstance = Instantiate(nameplatePrefab, transform.position + Vector3.up * 2.5f, Quaternion.identity);
            nameplateInstance.transform.SetParent(null); // Don't parent to player

            // Find UI components
            usernameText = nameplateInstance.GetComponentInChildren<TextMeshProUGUI>();
            healthBar = nameplateInstance.transform.Find("HealthBar")?.GetComponent<UnityEngine.UI.Image>();

            if (usernameText != null)
            {
                usernameText.text = username;
            }

            UpdateHealthBar();
        }
        else
        {
            Debug.LogWarning("[NetworkPlayer] Nameplate prefab –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π velocity –¥–ª—è Dead Reckoning)
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity = default, float timestamp = 0f)
    {
        if (timestamp == 0f)
        {
            timestamp = Time.time;
        }

        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        if (Time.frameCount % 60 == 0)
        {
            Debug.Log($"[NetworkPlayer] üîß UpdatePosition –¥–ª—è {username}: current=({transform.position.x:F2}, {transform.position.y:F2}, {transform.position.z:F2}), target=({position.x:F2}, {position.y:F2}, {position.z:F2}), distance={Vector3.Distance(transform.position, position):F2}m");
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º NetworkTransform –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        if (networkTransform != null)
        {
            networkTransform.ReceivePositionUpdate(position, rotation, velocity, timestamp);
        }
        else
        {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ NetworkTransform –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            targetPosition = position;
            targetRotation = rotation;

            if (!hasReceivedFirstUpdate)
            {
                // First update - teleport
                transform.position = position;
                transform.rotation = rotation;
                hasReceivedFirstUpdate = true;
                Debug.Log($"[NetworkPlayer] üéØ –ü–µ—Ä–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {username}: ({position.x:F2}, {position.y:F2}, {position.z:F2})");
            }
        }

        hasReceivedFirstUpdate = true;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void UpdateAnimation(string animationState)
    {
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (–í–°–ï–ì–î–ê, –Ω–µ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É!)
        Debug.Log($"[NetworkPlayer] üîÑ UpdateAnimation –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}: —Ç–µ–∫—É—â–µ–µ={currentAnimationState}, –Ω–æ–≤–æ–µ={animationState}");

        if (animator == null)
        {
            Debug.LogError($"[NetworkPlayer] ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Animator is null –¥–ª—è {username}!");
            Debug.LogError($"[NetworkPlayer] üîç –ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ Animator –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö...");

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Animator —Å–Ω–æ–≤–∞
            animator = GetComponentInChildren<Animator>();

            if (animator == null)
            {
                Debug.LogError($"[NetworkPlayer] ‚ùå Animator –ù–ï –ù–ê–ô–î–ï–ù –¥–∞–∂–µ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö!");
                return;
            }
            else
            {
                Debug.Log($"[NetworkPlayer] ‚úÖ Animator –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ: {animator.gameObject.name}");
            }
        }

        // –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–∞–ª-—Ç–∞–π–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        bool stateChanged = (currentAnimationState != animationState);

        if (stateChanged)
        {
            Debug.Log($"[NetworkPlayer] üé¨ –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è {username}: {currentAnimationState} ‚Üí {animationState}");
            currentAnimationState = animationState;
        }
        else
        {
            Debug.Log($"[NetworkPlayer] üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ {animationState} –¥–ª—è {username}");
        }

        // –í–ê–ñ–ù–û: PlayerController –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Blend Tree —Å–∏—Å—Ç–µ–º—É
        // IsMoving (bool), MoveX (float), MoveY (float)
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º isWalking/isRunning, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

        // Set new state
        Debug.Log($"[NetworkPlayer] üé≠ –ü—Ä–∏–º–µ–Ω—è—é –∞–Ω–∏–º–∞—Ü–∏—é '{animationState}' –¥–ª—è {username}");

        switch (animationState)
        {
            case "Idle":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Idle: IsMoving=false, MoveX=0, MoveY=0, speed=1.0");
                animator.SetBool("IsMoving", false);
                animator.SetFloat("MoveX", 0);
                animator.SetFloat("MoveY", 0);
                animator.speed = 1.0f;
                break;

            case "Walking":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Walking: IsMoving=true, MoveX=0, MoveY=0.5, speed=0.5");
                animator.SetBool("IsMoving", true);
                animator.SetFloat("MoveX", 0);
                animator.SetFloat("MoveY", 0.5f); // 0.5 = Slow Run (—Ö–æ–¥—å–±–∞)
                animator.speed = 0.5f; // –ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ö–æ–¥—å–±—ã
                break;

            case "Running":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Running: IsMoving=true, MoveX=0, MoveY=1.0, speed=1.0");
                animator.SetBool("IsMoving", true);
                animator.SetFloat("MoveX", 0);
                animator.SetFloat("MoveY", 1.0f); // 1.0 = Sprint (–±–µ–≥)
                animator.speed = 1.0f; // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                break;

            case "Attacking":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Attacking: Trigger=Attack");
                animator.SetTrigger("Attack");
                // –ù–µ –º–µ–Ω—è–µ–º IsMoving - –∞—Ç–∞–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è
                break;

            case "Dead":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Dead: isDead=true, IsMoving=false");
                if (HasAnimatorParameter(animator, "isDead"))
                {
                    animator.SetBool("isDead", true);
                }
                animator.SetBool("IsMoving", false);
                break;

            case "Casting":
                Debug.Log($"[NetworkPlayer] ‚û°Ô∏è Casting: Trigger=Cast");
                animator.SetTrigger("Cast");
                break;

            default:
                Debug.LogWarning($"[NetworkPlayer] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏: '{animationState}' –¥–ª—è {username}");
                break;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∏–º–∞—Ç–æ—Ä–∞
        Debug.Log($"[NetworkPlayer] üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ Animator –¥–ª—è {username}: IsMoving={animator.GetBool("IsMoving")}, MoveY={animator.GetFloat("MoveY"):F2}, speed={animator.speed:F2}");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ Animator
    /// </summary>
    private bool HasAnimatorParameter(Animator anim, string paramName)
    {
        foreach (AnimatorControllerParameter param in anim.parameters)
        {
            if (param.name == paramName) return true;
        }
        return false;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void UpdateHealth(int hp, int maxHp, int mp, int maxMp)
    {
        currentHP = hp;
        maxHP = maxHp;
        currentMP = mp;
        maxMP = maxMp;

        UpdateHealthBar();

        // Check death
        if (currentHP <= 0)
        {
            OnDeath();
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é HP –±–∞—Ä–∞
    /// </summary>
    private void UpdateHealthBar()
    {
        if (healthBar != null && maxHP > 0)
        {
            healthBar.fillAmount = (float)currentHP / maxHP;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–º–µ—Ä—Ç—å
    /// </summary>
    private void OnDeath()
    {
        UpdateAnimation("Dead");
        Debug.Log($"[NetworkPlayer] {username} –ø–æ–≥–∏–±!");

        // Disable collider so players can walk through corpse
        var collider = GetComponent<Collider>();
        if (collider != null) collider.enabled = false;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ—Å–ø–∞–≤–Ω
    /// </summary>
    public void OnRespawn(Vector3 spawnPosition)
    {
        currentHP = maxHP;
        currentMP = maxMP;

        UpdatePosition(spawnPosition, Quaternion.identity);
        UpdateAnimation("Idle");
        UpdateHealthBar();

        // Re-enable collider
        var collider = GetComponent<Collider>();
        if (collider != null) collider.enabled = true;

        Debug.Log($"[NetworkPlayer] {username} –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è!");
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é –∞—Ç–∞–∫–∏
    /// </summary>
    public void PlayAttackAnimation(string attackType)
    {
        if (animator == null) return;

        switch (attackType)
        {
            case "melee":
                animator.SetTrigger("Attack");
                break;
            case "ranged":
                animator.SetTrigger("RangedAttack");
                break;
            case "skill":
                animator.SetTrigger("Cast");
                break;
        }
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–Ω (–≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
    /// </summary>
    public void ShowDamage(float damage)
    {
        // TODO: Create damage number popup
        Debug.Log($"[NetworkPlayer] {username} –ø–æ–ª—É—á–∏–ª {damage} —É—Ä–æ–Ω–∞!");

        // Flash red effect
        StartCoroutine(FlashRed());
    }

    /// <summary>
    /// –ú–∏–≥–∞–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã–º –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
    /// </summary>
    private System.Collections.IEnumerator FlashRed()
    {
        var renderer = GetComponentInChildren<SkinnedMeshRenderer>();
        if (renderer != null)
        {
            Color originalColor = renderer.material.color;
            renderer.material.color = Color.red;
            yield return new WaitForSeconds(0.1f);
            renderer.material.color = originalColor;
        }
    }

    void OnDestroy()
    {
        // Clean up nameplate
        if (nameplateInstance != null)
        {
            Destroy(nameplateInstance);
        }
    }

    // Public getters
    public int CurrentHP => currentHP;
    public int MaxHP => maxHP;
    public int CurrentMP => currentMP;
    public int MaxMP => maxMP;
    public bool IsAlive => currentHP > 0;
}
