using UnityEngine;
using System;
using System.Collections.Generic;
using SocketIOClient;
using Newtonsoft.Json;

/// <summary>
/// Socket.IO Manager using SocketIOUnity library
/// –ó–∞–º–µ–Ω—è–µ—Ç UnifiedSocketIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket transport
/// </summary>
public class SocketIOManager : MonoBehaviour
{
    public static SocketIOManager Instance { get; private set; }

    [Header("Connection")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private bool debugMode = true;

    // Socket.IO client
    private SocketIOUnity socket;
    private bool isConnected = false;
    private string currentRoomId = "";
    private string myUsername = "";
    private string myUserId = "";

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
        DontDestroyOnLoad(gameObject);

        // Ensure UnityMainThreadDispatcher exists
        if (!UnityMainThreadDispatcher.Exists())
        {
            UnityMainThreadDispatcher.Instance();
            DebugLog("‚úÖ UnityMainThreadDispatcher created");
        }

        DebugLog("‚úÖ SocketIOManager initialized");
    }

    void OnDestroy()
    {
        if (socket != null)
        {
            socket.Disconnect();
            socket.Dispose();
        }
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected)
        {
            DebugLog("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
            onComplete?.Invoke(true);
            return;
        }

        DebugLog($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // –°–æ–∑–¥–∞—ë–º Socket.IO –∫–ª–∏–µ–Ω—Ç
        var uri = new Uri(serverUrl);
        socket = new SocketIOUnity(uri, new SocketIOOptions
        {
            Transport = SocketIOClient.Transport.TransportProtocol.WebSocket,
            EIO = 4,
            Query = new Dictionary<string, string>
            {
                { "token", token }
            }
        });

        // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.OnConnected += (sender, e) =>
        {
            isConnected = true;
            DebugLog($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Socket ID: {socket.Id}");
            onComplete?.Invoke(true);
        };

        // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        socket.OnDisconnected += (sender, e) =>
        {
            isConnected = false;
            DebugLog("‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        };

        // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
        socket.OnError += (sender, e) =>
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞: {e}");
        };

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        socket.Connect();
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (socket != null && isConnected)
        {
            socket.Disconnect();
            isConnected = false;
            DebugLog("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (socket == null)
        {
            Debug.LogError("[SocketIO] Socket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
        eventCallbacks[eventName] = callback;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ Socket.IO
        socket.On(eventName, (response) =>
        {
            string jsonData = response.GetValue<string>();
            DebugLog($"üì® –°–æ–±—ã—Ç–∏–µ '{eventName}': {jsonData.Substring(0, Math.Min(100, jsonData.Length))}...");

            // –í—ã–∑—ã–≤–∞–µ–º callback –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Unity
            UnityMainThreadDispatcher.Instance().Enqueue(() =>
            {
                if (eventCallbacks.ContainsKey(eventName))
                {
                    eventCallbacks[eventName]?.Invoke(jsonData);
                }
            });
        });

        DebugLog($"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void Emit(string eventName, string jsonData)
    {
        if (socket == null || !isConnected)
        {
            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        socket.Emit(eventName, jsonData);
        DebugLog($"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eventName}");
    }

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[SocketIO] ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;
        myUsername = PlayerPrefs.GetString("Username", "Player");
        myUserId = PlayerPrefs.GetString("UserId", "");

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ room_players –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
        bool responseReceived = false;
        On("room_players", (data) =>
        {
            if (!responseReceived)
            {
                responseReceived = true;
                DebugLog("‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ");
                onComplete?.Invoke(true);
            }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º join_room
        var joinData = new JoinRoomRequest
        {
            roomId = roomId,
            username = myUsername,
            characterClass = characterClass,
            userId = myUserId,
            password = "",
            level = PlayerPrefs.GetInt("Level", 1)
        };

        string json = JsonUtility.ToJson(joinData);
        Emit("join_room", json);

        DebugLog($"üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} –∫–∞–∫ {characterClass}");

        // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
        StartCoroutine(JoinRoomTimeout(3f, () =>
        {
            if (!responseReceived)
            {
                responseReceived = true;
                Debug.LogWarning("[SocketIO] ‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è room_players");
                onComplete?.Invoke(true);
            }
        }));
    }

    private System.Collections.IEnumerator JoinRoomTimeout(float delay, Action callback)
    {
        yield return new WaitForSeconds(delay);
        callback?.Invoke();
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// </summary>
    public void RequestRoomPlayers()
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId))
        {
            Debug.LogWarning("[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ!");
            return;
        }

        var data = new { roomId = currentRoomId };
        Emit("get_room_players", JsonUtility.ToJson(data));
        DebugLog($"üîÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {currentRoomId}");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity, bool isGrounded)
    {
        if (!isConnected) return;

        var data = new
        {
            position = new { x = position.x, y = position.y, z = position.z },
            rotation = new { x = rotation.x, y = rotation.y, z = rotation.z, w = rotation.w },
            velocity = new { x = velocity.x, y = velocity.y, z = velocity.z },
            isGrounded = isGrounded
        };

        string json = JsonConvert.SerializeObject(data);
        Emit("player_update", json);
    }

    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string MyUsername => myUsername;

    private void DebugLog(string message)
    {
        if (debugMode)
        {
            Debug.Log($"[SocketIO] {message}");
        }
    }

    // Data classes
    [Serializable]
    public class JoinRoomRequest
    {
        public string roomId;
        public string username;
        public string characterClass;
        public string userId;
        public string password;
        public int level;
    }
}
