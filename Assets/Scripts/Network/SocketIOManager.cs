using UnityEngine;
using System;
using System.Collections.Generic;
using SocketIOClient;
using Newtonsoft.Json;

/// <summary>
/// Socket.IO Manager using SocketIOUnity library
/// –ó–∞–º–µ–Ω—è–µ—Ç UnifiedSocketIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket transport
/// </summary>
public class SocketIOManager : MonoBehaviour
{
    public static SocketIOManager Instance { get; private set; }

    [Header("Connection")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private bool debugMode = true;

    // Socket.IO client
    private SocketIOUnity socket;
    private bool isConnected = false;
    private string currentRoomId = "";
    private string myUsername = "";
    private string myUserId = "";

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
        DontDestroyOnLoad(gameObject);

        // –í–ê–ñ–ù–û: –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
        Application.runInBackground = true;
        Debug.Log("[SocketIO] ‚úÖ –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–Å–ù - –æ–∫–Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–∞—Ç—å –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞");

        // Ensure UnityMainThreadDispatcher exists
        if (!UnityMainThreadDispatcher.Exists())
        {
            UnityMainThreadDispatcher.Instance();
            DebugLog("‚úÖ UnityMainThreadDispatcher created");
        }

        DebugLog("‚úÖ SocketIOManager initialized");
    }

    void OnDestroy()
    {
        Debug.LogWarning("[SocketIO] ‚ö†Ô∏è OnDestroy –≤—ã–∑–≤–∞–Ω! SocketIOManager —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è!");

        if (socket != null)
        {
            Debug.LogWarning("[SocketIO] –û—Ç–∫–ª—é—á–∞–µ–º socket –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º...");
            socket.Disconnect();
            socket.Dispose();
        }
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected)
        {
            DebugLog("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
            onComplete?.Invoke(true);
            return;
        }

        DebugLog($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // –°–æ–∑–¥–∞—ë–º Socket.IO –∫–ª–∏–µ–Ω—Ç
        var uri = new Uri(serverUrl);
        socket = new SocketIOUnity(uri, new SocketIOOptions
        {
            Transport = SocketIOClient.Transport.TransportProtocol.WebSocket,
            EIO = SocketIOClient.EngineIO.V4, // Engine.IO version 4
            Query = new Dictionary<string, string>
            {
                { "token", token }
            }
        });

        // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.OnConnected += (sender, e) =>
        {
            isConnected = true;
            DebugLog($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Socket ID: {socket.Id}");

            // –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞–µ–º callback –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Unity!
            var dispatcher = UnityMainThreadDispatcher.Instance();
            if (dispatcher != null)
            {
                dispatcher.Enqueue(() =>
                {
                    DebugLog($"‚úÖ Callback –≤—ã–∑–≤–∞–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, isConnected = {isConnected}");
                    onComplete?.Invoke(true);
                });
            }
            else
            {
                Debug.LogError("[SocketIO] ‚ùå UnityMainThreadDispatcher is null in OnConnected!");
                onComplete?.Invoke(false);
            }
        };

        // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        socket.OnDisconnected += (sender, e) =>
        {
            isConnected = false;
            Debug.LogError($"[SocketIO] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞! –ü—Ä–∏—á–∏–Ω–∞: {e}");

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            var dispatcher = UnityMainThreadDispatcher.Instance();
            if (dispatcher != null)
            {
                dispatcher.Enqueue(() =>
                {
                    Debug.LogError($"[SocketIO] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –∫–æ–º–Ω–∞—Ç–µ: {currentRoomId}");
                    Debug.LogError($"[SocketIO] Username: {myUsername}");
                });
            }
        };

        // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
        socket.OnError += (sender, e) =>
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞: {e}");
        };

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        socket.Connect();
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (socket != null && isConnected)
        {
            socket.Disconnect();
            isConnected = false;
            DebugLog("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (socket == null)
        {
            Debug.LogError("[SocketIO] Socket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
        eventCallbacks[eventName] = callback;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ Socket.IO
        socket.On(eventName, (response) =>
        {
            try
            {
                string jsonData;

                if (response.Count > 0)
                {
                    var firstArg = response.GetValue();

                    if (firstArg.GetType().Name == "JsonElement")
                    {
                        var jsonElement = (System.Text.Json.JsonElement)firstArg;
                        jsonData = jsonElement.GetRawText();
                    }
                    else
                    {
                        jsonData = JsonConvert.SerializeObject(firstArg);
                    }
                }
                else
                {
                    jsonData = "{}";
                }

                var dispatcher = UnityMainThreadDispatcher.Instance();
                if (dispatcher != null)
                {
                    dispatcher.Enqueue(() =>
                    {
                        if (eventCallbacks.ContainsKey(eventName))
                        {
                            try
                            {
                                eventCallbacks[eventName]?.Invoke(jsonData);
                            }
                            catch (Exception callbackEx)
                            {
                                Debug.LogError($"[SocketIO] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ callback '{eventName}': {callbackEx.Message}");
                            }
                        }
                    });
                }
                else
                {
                    Debug.LogError($"[SocketIO] ‚ùå UnityMainThreadDispatcher is null! Event '{eventName}' cannot be processed.");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è '{eventName}': {ex.Message}");
            }
        });

        DebugLog($"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void Emit(string eventName, string jsonData)
    {
        if (socket == null || !isConnected)
        {
            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É - —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç
        try
        {
            socket.Emit(eventName, jsonData);
        }
        catch (Exception ex)
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ '{eventName}': {ex.Message}");
        }
    }

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[SocketIO] ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;
        myUsername = PlayerPrefs.GetString("Username", "Player");
        myUserId = PlayerPrefs.GetString("UserId", "");

        Debug.Log($"[SocketIO] üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JoinRoom:");
        Debug.Log($"  - roomId: {roomId}");
        Debug.Log($"  - characterClass (–ø–∞—Ä–∞–º–µ—Ç—Ä): '{characterClass}'");
        Debug.Log($"  - username: {myUsername}");
        Debug.Log($"  - userId: {myUserId}");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º join_room
        var joinData = new JoinRoomRequest
        {
            roomId = roomId,
            username = myUsername,
            characterClass = characterClass,
            userId = myUserId,
            password = "",
            level = PlayerPrefs.GetInt("Level", 1)
        };

        string json = JsonUtility.ToJson(joinData);
        Debug.Log($"[SocketIO] üîç JSON –¥–ª—è join_room: {json}");
        DebugLog($"üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} –∫–∞–∫ {characterClass}");
        DebugLog($"   isConnected: {isConnected}");
        DebugLog($"   socket is null: {socket == null}");
        DebugLog($"   JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {json}");
        DebugLog($"üìû –í—ã–∑—ã–≤–∞–µ–º Emit('join_room')...");

        Emit("join_room", json);

        DebugLog($"‚úÖ Emit('join_room') –≤—ã–∑–≤–∞–Ω (–º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)");

        // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: room_players —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ NetworkSyncManager
        // –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ ArenaScene.Start()
        // –í—ã–∑—ã–≤–∞–µ–º onComplete —Å—Ä–∞–∑—É, –Ω–µ –∂–¥—ë–º room_players
        onComplete?.Invoke(true);
    }

    private System.Collections.IEnumerator JoinRoomTimeout(float delay, Action callback)
    {
        yield return new WaitForSeconds(delay);
        callback?.Invoke();
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// </summary>
    public void RequestRoomPlayers()
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId))
        {
            Debug.LogWarning("[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ!");
            return;
        }

        var data = new { roomId = currentRoomId };
        string json = JsonConvert.SerializeObject(data);
        DebugLog($"üîÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {currentRoomId}");
        DebugLog($"   JSON: {json}");
        Emit("get_room_players", json);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity, bool isGrounded)
    {
        if (!isConnected) return;

        // –í–ê–ñ–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Quaternion –≤ Euler angles (–≥—Ä–∞–¥—É—Å—ã) –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        Vector3 eulerRotation = rotation.eulerAngles;

        var data = new
        {
            socketId = socket.Id, // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º socketId —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–Ω–∞–ª –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª
            position = new { x = position.x, y = position.y, z = position.z },
            rotation = new { x = eulerRotation.x, y = eulerRotation.y, z = eulerRotation.z },
            velocity = new { x = velocity.x, y = velocity.y, z = velocity.z },
            isGrounded = isGrounded,
            timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() // Timestamp –¥–ª—è Dead Reckoning
        };

        string json = JsonConvert.SerializeObject(data);
        Emit("player_update", json);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdateAnimation(string animationState, float speed = 1f)
    {
        if (!isConnected)
        {
            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è UpdateAnimation: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É! animation={animationState}");
            return;
        }

        var data = new
        {
            socketId = socket.Id, // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º socketId —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –∑–Ω–∞–ª –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª
            animation = animationState,
            speed = speed
        };

        string json = JsonConvert.SerializeObject(data);

        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏
        Debug.Log($"[SocketIO] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: animation={animationState}, speed={speed}, socketId={socket.Id}");
        Debug.Log($"[SocketIO] üì§ JSON: {json}");

        Emit("player_animation", json);

        Debug.Log($"[SocketIO] ‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ç–∞–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞)
    /// –°–µ—Ä–≤–µ—Ä —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ SPECIAL —Å—Ç–∞—Ç–æ–≤
    /// </summary>
    public void SendPlayerAttack(string targetType, string targetId, float damage, string attackType, Vector3 position, Vector3 direction, Vector3 targetPosition)
    {
        if (!isConnected)
        {
            DebugLog("‚ö†Ô∏è SendPlayerAttack: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return;
        }

        var data = new
        {
            targetType = targetType,  // "player" or "enemy"
            targetId = targetId,      // socketId (–¥–ª—è –∏–≥—Ä–æ–∫–∞) –∏–ª–∏ enemyId (–¥–ª—è –≤—Ä–∞–≥–∞)
            attackType = attackType,  // "melee", "ranged", "magic"
            position = new { x = position.x, y = position.y, z = position.z },
            direction = new { x = direction.x, y = direction.y, z = direction.z },
            targetPosition = new { x = targetPosition.x, y = targetPosition.y, z = targetPosition.z }
        };

        string json = JsonConvert.SerializeObject(data);
        Debug.Log($"[SocketIO] ‚öîÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ç–∞–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {attackType} –Ω–∞ {targetType} (ID: {targetId})");
        Debug.Log($"[SocketIO] ‚öîÔ∏è JSON –∞—Ç–∞–∫–∏: {json}");
        Debug.Log($"[SocketIO]    –°–µ—Ä–≤–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö SPECIAL —Å—Ç–∞—Ç–æ–≤");
        Emit("player_attack", json);
        Debug.Log($"[SocketIO] ‚úÖ player_attack –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞)
    /// </summary>
    public void SendPlayerSkill(int skillId, string targetSocketId, Vector3 targetPosition)
    {
        if (!isConnected)
        {
            DebugLog("‚ö†Ô∏è SendPlayerSkill: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return;
        }

        var data = new
        {
            skillId = skillId,
            targetSocketId = targetSocketId,
            targetPosition = new { x = targetPosition.x, y = targetPosition.y, z = targetPosition.z }
        };

        string json = JsonConvert.SerializeObject(data);
        DebugLog($"‚ö° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫–∏–ª–ª–∞: ID={skillId}, target={targetSocketId}");
        Emit("player_skill", json);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞)
    /// </summary>
    public void SendPlayerDamaged(float damage, float currentHealth, float maxHealth, string attackerId)
    {
        if (!isConnected)
        {
            DebugLog("‚ö†Ô∏è SendPlayerDamaged: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return;
        }

        var data = new
        {
            damage = damage,
            currentHealth = currentHealth,
            maxHealth = maxHealth,
            attackerId = attackerId
        };

        string json = JsonConvert.SerializeObject(data);
        DebugLog($"üíî –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞: -{damage:F1} HP, –æ—Å—Ç–∞–ª–æ—Å—å {currentHealth:F1}/{maxHealth:F1}");
        Emit("player_damaged", json);
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å–ø–∞–≤–Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    public void SendPlayerRespawn(Vector3 position)
    {
        if (!isConnected)
        {
            DebugLog("‚ö†Ô∏è SendPlayerRespawn: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É");
            return;
        }

        var data = new
        {
            position = new { x = position.x, y = position.y, z = position.z }
        };

        string json = JsonConvert.SerializeObject(data);
        DebugLog($"‚ôªÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—Å–ø–∞–≤–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({position.x:F1}, {position.y:F1}, {position.z:F1})");
        Emit("player_respawn", json);
    }

    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string MyUsername => myUsername;

    private void DebugLog(string message)
    {
        if (debugMode)
        {
            Debug.Log($"[SocketIO] {message}");
        }
    }

    // Data classes
    [Serializable]
    public class JoinRoomRequest
    {
        public string roomId;
        public string username;
        public string characterClass;
        public string userId;
        public string password;
        public int level;
    }
}
