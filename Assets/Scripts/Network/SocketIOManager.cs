using UnityEngine;
using System;
using System.Collections.Generic;
using SocketIOClient;
using Newtonsoft.Json;

/// <summary>
/// Socket.IO Manager using SocketIOUnity library
/// –ó–∞–º–µ–Ω—è–µ—Ç UnifiedSocketIO –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket transport
/// </summary>
public class SocketIOManager : MonoBehaviour
{
    public static SocketIOManager Instance { get; private set; }

    [Header("Connection")]
    [SerializeField] private string serverUrl = "https://aetherion-server-gv5u.onrender.com";
    [SerializeField] private bool debugMode = true;

    // Socket.IO client
    private SocketIOUnity socket;
    private bool isConnected = false;
    private string currentRoomId = "";
    private string myUsername = "";
    private string myUserId = "";

    // Event callbacks
    private Dictionary<string, Action<string>> eventCallbacks = new Dictionary<string, Action<string>>();

    void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }

        Instance = this;
        DontDestroyOnLoad(gameObject);

        // Ensure UnityMainThreadDispatcher exists
        if (!UnityMainThreadDispatcher.Exists())
        {
            UnityMainThreadDispatcher.Instance();
            DebugLog("‚úÖ UnityMainThreadDispatcher created");
        }

        DebugLog("‚úÖ SocketIOManager initialized");
    }

    void OnDestroy()
    {
        Debug.LogWarning("[SocketIO] ‚ö†Ô∏è OnDestroy –≤—ã–∑–≤–∞–Ω! SocketIOManager —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è!");

        if (socket != null)
        {
            Debug.LogWarning("[SocketIO] –û—Ç–∫–ª—é—á–∞–µ–º socket –ø–µ—Ä–µ–¥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º...");
            socket.Disconnect();
            socket.Dispose();
        }
    }

    /// <summary>
    /// –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// </summary>
    public void Connect(string token, Action<bool> onComplete = null)
    {
        if (isConnected)
        {
            DebugLog("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
            onComplete?.Invoke(true);
            return;
        }

        DebugLog($"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {serverUrl}...");

        // –°–æ–∑–¥–∞—ë–º Socket.IO –∫–ª–∏–µ–Ω—Ç
        var uri = new Uri(serverUrl);
        socket = new SocketIOUnity(uri, new SocketIOOptions
        {
            Transport = SocketIOClient.Transport.TransportProtocol.WebSocket,
            EIO = SocketIOClient.EngineIO.V4, // Engine.IO version 4
            Query = new Dictionary<string, string>
            {
                { "token", token }
            }
        });

        // –°–æ–±—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.OnConnected += (sender, e) =>
        {
            isConnected = true;
            DebugLog($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! Socket ID: {socket.Id}");

            // –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞–µ–º callback –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Unity!
            var dispatcher = UnityMainThreadDispatcher.Instance();
            if (dispatcher != null)
            {
                dispatcher.Enqueue(() =>
                {
                    DebugLog($"‚úÖ Callback –≤—ã–∑–≤–∞–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, isConnected = {isConnected}");
                    onComplete?.Invoke(true);
                });
            }
            else
            {
                Debug.LogError("[SocketIO] ‚ùå UnityMainThreadDispatcher is null in OnConnected!");
                onComplete?.Invoke(false);
            }
        };

        // –°–æ–±—ã—Ç–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        socket.OnDisconnected += (sender, e) =>
        {
            isConnected = false;
            Debug.LogError($"[SocketIO] ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞! –ü—Ä–∏—á–∏–Ω–∞: {e}");

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            var dispatcher = UnityMainThreadDispatcher.Instance();
            if (dispatcher != null)
            {
                dispatcher.Enqueue(() =>
                {
                    Debug.LogError($"[SocketIO] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –∫–æ–º–Ω–∞—Ç–µ: {currentRoomId}");
                    Debug.LogError($"[SocketIO] Username: {myUsername}");
                });
            }
        };

        // –°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
        socket.OnError += (sender, e) =>
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞: {e}");
        };

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        socket.Connect();
    }

    /// <summary>
    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    public void Disconnect()
    {
        if (socket != null && isConnected)
        {
            socket.Disconnect();
            isConnected = false;
            DebugLog("üîå –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }
    }

    /// <summary>
    /// –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void On(string eventName, Action<string> callback)
    {
        if (socket == null)
        {
            Debug.LogError("[SocketIO] Socket –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
        eventCallbacks[eventName] = callback;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ Socket.IO
        socket.On(eventName, (response) =>
        {
            try
            {
                // –í–ê–ñ–ù–û: SocketIOResponse —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º GetValue() –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–∞—Ç–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ToString()
                string jsonData;

                if (response.Count > 0)
                {
                    // –ü–†–ê–í–ò–õ–¨–ù–´–ô –°–ü–û–°–û–ë: GetValue() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JsonElement, –∏—Å–ø–æ–ª—å–∑—É–µ–º GetRawText()
                    var firstArg = response.GetValue();

                    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    DebugLog($"üîç Event '{eventName}' firstArg type: {firstArg.GetType().FullName}");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ JsonElement
                    if (firstArg.GetType().Name == "JsonElement")
                    {
                        // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π JSON —Ç–µ–∫—Å—Ç –∏–∑ JsonElement
                        var jsonElement = (System.Text.Json.JsonElement)firstArg;
                        jsonData = jsonElement.GetRawText();
                    }
                    else
                    {
                        // Fallback: —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —á–µ—Ä–µ–∑ Newtonsoft
                        jsonData = JsonConvert.SerializeObject(firstArg);
                    }
                }
                else
                {
                    jsonData = "{}";
                }

                DebugLog($"üì® –°–æ–±—ã—Ç–∏–µ '{eventName}': {jsonData.Substring(0, Math.Min(100, jsonData.Length))}...");

                // –í—ã–∑—ã–≤–∞–µ–º callback –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Unity
                var dispatcher = UnityMainThreadDispatcher.Instance();
                if (dispatcher != null)
                {
                    dispatcher.Enqueue(() =>
                    {
                        if (eventCallbacks.ContainsKey(eventName))
                        {
                            eventCallbacks[eventName]?.Invoke(jsonData);
                        }
                    });
                }
                else
                {
                    Debug.LogError($"[SocketIO] ‚ùå UnityMainThreadDispatcher is null! Event '{eventName}' cannot be processed.");
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è '{eventName}': {ex.Message}");
                Debug.LogError($"   Stack: {ex.StackTrace}");
            }
        });

        DebugLog($"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {eventName}");
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    public void Emit(string eventName, string jsonData)
    {
        if (socket == null || !isConnected)
        {
            Debug.LogWarning($"[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω! –°–æ–±—ã—Ç–∏–µ '{eventName}' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            return;
        }

        // –í–ê–ñ–ù–û: SocketIOUnity v1.1.5 –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—ã—á–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏!
        // –°–µ—Ä–≤–µ—Ä Node.js —Å–∞–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç JSON
        try
        {
            DebugLog($"üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {eventName}");
            DebugLog($"   JSON: {jsonData}");

            // –ü–†–ê–í–ò–õ–¨–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –∫–∞–∫ —Å—Ç—Ä–æ–∫—É - —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç
            socket.Emit(eventName, jsonData);
            DebugLog($"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {eventName}");
        }
        catch (Exception ex)
        {
            Debug.LogError($"[SocketIO] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ '{eventName}': {ex.Message}");
            Debug.LogError($"   Stack: {ex.StackTrace}");
        }
    }

    /// <summary>
    /// –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
    /// </summary>
    public void JoinRoom(string roomId, string characterClass, Action<bool> onComplete = null)
    {
        if (!isConnected)
        {
            Debug.LogError("[SocketIO] ‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É!");
            onComplete?.Invoke(false);
            return;
        }

        currentRoomId = roomId;
        myUsername = PlayerPrefs.GetString("Username", "Player");
        myUserId = PlayerPrefs.GetString("UserId", "");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º join_room
        var joinData = new JoinRoomRequest
        {
            roomId = roomId,
            username = myUsername,
            characterClass = characterClass,
            userId = myUserId,
            password = "",
            level = PlayerPrefs.GetInt("Level", 1)
        };

        string json = JsonUtility.ToJson(joinData);
        DebugLog($"üö™ –í—Ö–æ–¥ –≤ –∫–æ–º–Ω–∞—Ç—É: {roomId} –∫–∞–∫ {characterClass}");
        DebugLog($"   isConnected: {isConnected}");
        DebugLog($"   socket is null: {socket == null}");
        DebugLog($"   JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {json}");
        DebugLog($"üìû –í—ã–∑—ã–≤–∞–µ–º Emit('join_room')...");

        Emit("join_room", json);

        DebugLog($"‚úÖ Emit('join_room') –≤—ã–∑–≤–∞–Ω (–º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)");

        // –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: room_players —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ NetworkSyncManager
        // –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ ArenaScene.Start()
        // –í—ã–∑—ã–≤–∞–µ–º onComplete —Å—Ä–∞–∑—É, –Ω–µ –∂–¥—ë–º room_players
        onComplete?.Invoke(true);
    }

    private System.Collections.IEnumerator JoinRoomTimeout(float delay, Action callback)
    {
        yield return new WaitForSeconds(delay);
        callback?.Invoke();
    }

    /// <summary>
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    /// </summary>
    public void RequestRoomPlayers()
    {
        if (!isConnected || string.IsNullOrEmpty(currentRoomId))
        {
            Debug.LogWarning("[SocketIO] ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ!");
            return;
        }

        var data = new { roomId = currentRoomId };
        string json = JsonConvert.SerializeObject(data);
        DebugLog($"üîÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {currentRoomId}");
        DebugLog($"   JSON: {json}");
        Emit("get_room_players", json);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void UpdatePosition(Vector3 position, Quaternion rotation, Vector3 velocity, bool isGrounded)
    {
        if (!isConnected) return;

        // –í–ê–ñ–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Quaternion –≤ Euler angles (–≥—Ä–∞–¥—É—Å—ã) –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        Vector3 eulerRotation = rotation.eulerAngles;

        var data = new
        {
            position = new { x = position.x, y = position.y, z = position.z },
            rotation = new { x = eulerRotation.x, y = eulerRotation.y, z = eulerRotation.z },
            velocity = new { x = velocity.x, y = velocity.y, z = velocity.z },
            isGrounded = isGrounded
        };

        string json = JsonConvert.SerializeObject(data);
        Emit("player_update", json);
    }

    public bool IsConnected => isConnected;
    public string CurrentRoomId => currentRoomId;
    public string MyUsername => myUsername;

    private void DebugLog(string message)
    {
        if (debugMode)
        {
            Debug.Log($"[SocketIO] {message}");
        }
    }

    // Data classes
    [Serializable]
    public class JoinRoomRequest
    {
        public string roomId;
        public string username;
        public string characterClass;
        public string userId;
        public string password;
        public int level;
    }
}
