using UnityEngine;
using Network;

/// <summary>
/// –°–ø–∞–≤–Ω–µ—Ä –¥–ª—è Ice Nova - —Å–æ–∑–¥–∞–µ—Ç –ª–µ–¥—è–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏, –≤—ã–ª–µ—Ç–∞—é—â–∏–µ —Ä–∞–¥–∏–∞–ª—å–Ω–æ –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã
/// </summary>
public class IceNovaProjectileSpawner : MonoBehaviour
{
    [Header("Network Settings")]
    [SerializeField] private int skillId = 202; // Ice Nova skill ID
    [Header("Projectile Settings")]
    [SerializeField] private GameObject iceShardPrefab; // –ü—Ä–µ—Ñ–∞–± –ª–µ–¥—è–Ω–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞
    [SerializeField] private int shardCount = 12; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∫–æ–ª–∫–æ–≤
    [SerializeField] private float shardSpeed = 15f; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –æ—Å–∫–æ–ª–∫–æ–≤
    [SerializeField] private float shardLifetime = 1.5f; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –æ—Å–∫–æ–ª–∫–∞
    [SerializeField] private float radius = 8f; // –†–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è
    [SerializeField] private float damage = 40f; // –£—Ä–æ–Ω –∫–∞–∂–¥–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞

    [Header("Visual Settings")]
    [SerializeField] private float spawnHeight = 1f; // –í—ã—Å–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–∫–æ–ª–∫–æ–≤
    [SerializeField] private bool randomRotation = true; // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –æ—Å–∫–æ–ª–∫–æ–≤

    [Header("Spawn Pattern")]
    [SerializeField] private bool spawnInRings = false; // –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ª—å—Ü–∞–º–∏ (true) –∏–ª–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ (false)
    [SerializeField] private int ringCount = 2; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ—Ü (–µ—Å–ª–∏ spawnInRings = true)

    private void Start()
    {
        SpawnIceShards();
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–ø–∞–≤–Ω–µ—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–∫–æ–ª–∫–æ–≤
        Destroy(gameObject, 0.1f);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ª–µ–¥—è–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏ —Ä–∞–¥–∏–∞–ª—å–Ω–æ
    /// </summary>
    private void SpawnIceShards()
    {
        if (iceShardPrefab == null)
        {
            Debug.LogError("[IceNovaSpawner] Ice shard prefab is not assigned!");
            return;
        }

        Vector3 spawnPosition = transform.position + Vector3.up * spawnHeight;
        float angleStep = 360f / shardCount;

        for (int i = 0; i < shardCount; i++)
        {
            // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –¥–ª—è —ç—Ç–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞
            float angle = i * angleStep;

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ —É–≥–ª—É
            if (randomRotation)
            {
                angle += Random.Range(-angleStep * 0.2f, angleStep * 0.2f);
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            Vector3 direction = Quaternion.Euler(0, angle, 0) * Vector3.forward;

            // –°–æ–∑–¥–∞–µ–º –æ—Å–∫–æ–ª–æ–∫
            GameObject shard = Instantiate(iceShardPrefab, spawnPosition, Quaternion.identity);

            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Å–∫–æ–ª–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª–µ—Ç–∞
            shard.transform.rotation = Quaternion.LookRotation(direction);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Projectile
            Projectile projectile = shard.GetComponent<Projectile>();
            if (projectile != null)
            {
                projectile.Initialize(null, damage, direction, gameObject);
            }
            else
            {
                Debug.LogError($"[IceNovaSpawner] ‚ùå Ice shard prefab missing Projectile component!");
            }

            // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–∫–æ–ª–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞
            if (SocketIOManager.Instance != null && SocketIOManager.Instance.IsConnected)
            {
                SocketIOManager.Instance.SendProjectileSpawned(
                    skillId,
                    spawnPosition,
                    direction,
                    "" // targetSocketId - –æ—Å–∫–æ–ª–∫–∏ –Ω–µ –Ω–∞–≤–æ–¥—è—Ç—Å—è
                );
                Debug.Log($"[IceNovaSpawner] üì° Ice shard {i + 1} sent to server: angle={angle:F1}¬∞, dir={direction}");
            }

            Debug.Log($"[IceNovaSpawner] üßä Created ice shard {i + 1}/{shardCount} at angle {angle:F1}¬∞");
        }

        Debug.Log($"[IceNovaSpawner] ‚ùÑÔ∏è Spawned {shardCount} ice shards!");
    }
}
