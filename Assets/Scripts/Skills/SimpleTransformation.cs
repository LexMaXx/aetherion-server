using UnityEngine;

/// <summary>
/// –ü–†–û–°–¢–ê–Ø —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è - —Å–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –∫–∞–∫ child
/// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é/–ø–æ–≤–æ—Ä–æ—Ç —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ
/// –†–æ–¥–∏—Ç–µ–ª—å (–ø–∞–ª–∞–¥–∏–Ω) - –Ω–µ–≤–∏–¥–∏–º—ã–π, –Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ–º
/// </summary>
public class SimpleTransformation : MonoBehaviour
{
    private GameObject transformedModel; // –í–∏–∑—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (–º–µ–¥–≤–µ–¥—å)
    private SkinnedMeshRenderer playerRenderer; // Renderer –ø–∞–ª–∞–¥–∏–Ω–∞
    private bool isTransformed = false;

    private Animator playerAnimator; // –ê–Ω–∏–º–∞—Ç–æ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞ (–∏—Å—Ç–æ—á–Ω–∏–∫)
    private Animator bearAnimator; // –ê–Ω–∏–º–∞—Ç–æ—Ä –º–µ–¥–≤–µ–¥—è (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)

    /// <summary>
    /// –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è (–ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∫—Ä—ã—Ç—å –ø–∞–ª–∞–¥–∏–Ω–∞)
    /// –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–Ω–∏–º–∞—Ç–æ—Ä–∞ –ø–∞–ª–∞–¥–∏–Ω–∞ —è–≤–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
    /// </summary>
    public bool TransformTo(GameObject transformationPrefab, Animator paladinAnimator = null)
    {
        if (transformationPrefab == null)
        {
            Debug.LogError("[SimpleTransformation] ‚ùå –ü—Ä–µ—Ñ–∞–± —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ == null!");
            return false;
        }

        if (isTransformed)
        {
            Debug.LogWarning("[SimpleTransformation] ‚ö†Ô∏è –£–∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!");
            return false;
        }

        // –ù–∞—Ö–æ–¥–∏–º renderer –ø–∞–ª–∞–¥–∏–Ω–∞
        playerRenderer = GetComponentInChildren<SkinnedMeshRenderer>();
        if (playerRenderer == null)
        {
            Debug.LogError("[SimpleTransformation] ‚ùå SkinnedMeshRenderer –ø–∞–ª–∞–¥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return false;
        }

        // –ù–ê–•–û–î–ò–ú –ê–ù–ò–ú–ê–¢–û–† –ü–ê–õ–ê–î–ò–ù–ê –î–û —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–≤–µ–¥—è!
        // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–Ω–∏–º–∞—Ç–æ—Ä —è–≤–Ω–æ (–æ—Ç NetworkPlayer) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ!
        // –ò–Ω–∞—á–µ –∏—â–µ–º —á–µ—Ä–µ–∑ GetComponentInChildren (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞)
        if (paladinAnimator != null)
        {
            playerAnimator = paladinAnimator;
            Debug.Log($"[SimpleTransformation] ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞–Ω–∏–º–∞—Ç–æ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞: {playerAnimator.gameObject.name}");
        }
        else
        {
            playerAnimator = GetComponentInChildren<Animator>();
            if (playerAnimator == null)
            {
                Debug.LogWarning($"[SimpleTransformation] ‚ö†Ô∏è –ê–Ω–∏–º–∞—Ç–æ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {gameObject.name}!");
            }
            else
            {
                Debug.Log($"[SimpleTransformation] ‚úÖ –ê–Ω–∏–º–∞—Ç–æ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ GetComponentInChildren: {playerAnimator.gameObject.name}");
            }
        }

        // –°–ö–†–´–í–ê–ï–ú –ø–∞–ª–∞–¥–∏–Ω–∞ (–¥–µ–ª–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–º)
        playerRenderer.enabled = false;
        Debug.Log("[SimpleTransformation] üëª –ü–∞–ª–∞–¥–∏–Ω —Å–∫—Ä—ã—Ç (renderer.enabled = false)");

        // –°–û–ó–î–ê–Å–ú –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∫ child
        transformedModel = Instantiate(transformationPrefab, transform);
        transformedModel.name = "TransformedModel_Visual";

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –Ω–∞ –º–µ—Å—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è
        transformedModel.transform.localPosition = Vector3.zero;
        transformedModel.transform.localRotation = Quaternion.identity;
        transformedModel.transform.localScale = Vector3.one;

        // –û–¢–ö–õ–Æ–ß–ê–ï–ú –≤—Å–µ –∫–æ–ª–ª–∞–π–¥–µ—Ä—ã –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        // –§–∏–∑–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è CharacterController –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ!
        Collider[] colliders = transformedModel.GetComponentsInChildren<Collider>();
        foreach (Collider col in colliders)
        {
            col.enabled = false;
        }
        Debug.Log($"[SimpleTransformation] üîß –û—Ç–∫–ª—é—á–µ–Ω–æ –∫–æ–ª–ª–∞–π–¥–µ—Ä–æ–≤: {colliders.Length}");

        // –û–¢–ö–õ–Æ–ß–ê–ï–ú Rigidbody –µ—Å–ª–∏ –µ—Å—Ç—å
        Rigidbody[] rigidbodies = transformedModel.GetComponentsInChildren<Rigidbody>();
        foreach (Rigidbody rb in rigidbodies)
        {
            rb.isKinematic = true;
        }

        // –ù–ê–•–û–î–ò–ú –ê–ù–ò–ú–ê–¢–û–† –ú–ï–î–í–ï–î–Ø
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º GetComponentInChildren –ø–æ—Ç–æ–º—É —á—Ç–æ Animator –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ!
        bearAnimator = transformedModel.GetComponentInChildren<Animator>();

        if (bearAnimator == null)
        {
            Debug.LogWarning($"[SimpleTransformation] ‚ö†Ô∏è –ê–Ω–∏–º–∞—Ç–æ—Ä –º–µ–¥–≤–µ–¥—è –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {transformedModel.name}!");
        }
        else
        {
            Debug.Log($"[SimpleTransformation] ‚úÖ –ê–Ω–∏–º–∞—Ç–æ—Ä –º–µ–¥–≤–µ–¥—è –Ω–∞–π–¥–µ–Ω: {bearAnimator.gameObject.name}");

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ú–µ–¥–≤–µ–¥—å –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–¢ –ñ–ï Animator Controller —á—Ç–æ –∏ –ø–∞–ª–∞–¥–∏–Ω!
            // –ò–Ω–∞—á–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (IsMoving, MoveY) –Ω–µ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è!
            if (playerAnimator != null && playerAnimator.runtimeAnimatorController != null)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Ä–∞–∑–Ω—ã–µ
                if (bearAnimator.runtimeAnimatorController != playerAnimator.runtimeAnimatorController)
                {
                    Debug.LogWarning($"[SimpleTransformation] ‚ö†Ô∏è –£ –º–µ–¥–≤–µ–¥—è –¥—Ä—É–≥–æ–π AnimatorController!");
                    Debug.LogWarning($"[SimpleTransformation] üîß –ü–∞–ª–∞–¥–∏–Ω: {playerAnimator.runtimeAnimatorController.name}");
                    Debug.LogWarning($"[SimpleTransformation] üîß –ú–µ–¥–≤–µ–¥—å (—Å—Ç–∞—Ä—ã–π): {bearAnimator.runtimeAnimatorController.name}");

                    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–µ–¥–≤–µ–¥—è –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞
                    bearAnimator.runtimeAnimatorController = playerAnimator.runtimeAnimatorController;

                    Debug.Log($"[SimpleTransformation] ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–µ–¥–≤–µ–¥—è –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞: {bearAnimator.runtimeAnimatorController.name}");
                }
                else
                {
                    Debug.Log($"[SimpleTransformation] ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç: {bearAnimator.runtimeAnimatorController.name}");
                }
            }
        }

        // –ü–†–ò–ö–†–ï–ü–õ–Ø–ï–ú –û–†–£–ñ–ò–ï –∫ –º–µ–¥–≤–µ–¥—é
        AttachWeaponToBear();

        isTransformed = true;

        Debug.Log($"[SimpleTransformation] ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–æ–¥–µ–ª—å: {transformationPrefab.name}");
        return true;
    }

    /// <summary>
    /// –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ –ø–∞–ª–∞–¥–∏–Ω–∞ –∫ –º–µ–¥–≤–µ–¥—é
    /// </summary>
    private void AttachWeaponToBear()
    {
        Debug.Log("[SimpleTransformation] üîç –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ò–°–ö –û–†–£–ñ–ò–Ø...");

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é —Ä—É–∫—É –º–µ–¥–≤–µ–¥—è
        Transform bearRightHand = FindBoneRecursive(transformedModel.transform, "mixamorig:RightHand");

        if (bearRightHand == null)
        {
            Debug.LogWarning("[SimpleTransformation] ‚ö†Ô∏è –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ –º–µ–¥–≤–µ–¥—è –ù–ï –ù–ê–ô–î–ï–ù–ê!");

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–¥–≤–µ–¥—è
            Debug.Log("[SimpleTransformation] üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–¥–≤–µ–¥—è:");
            LogChildrenRecursive(transformedModel.transform, 0);
            return;
        }

        Debug.Log($"[SimpleTransformation] ‚úÖ –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ –º–µ–¥–≤–µ–¥—è –Ω–∞–π–¥–µ–Ω–∞: {bearRightHand.name}");

        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é —Ä—É–∫—É –ø–∞–ª–∞–¥–∏–Ω–∞
        Transform paladinRightHand = FindBoneRecursive(transform, "mixamorig:RightHand");
        if (paladinRightHand == null)
        {
            Debug.LogWarning("[SimpleTransformation] ‚ö†Ô∏è –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ –ø–∞–ª–∞–¥–∏–Ω–∞ –ù–ï –ù–ê–ô–î–ï–ù–ê!");

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ª–∞–¥–∏–Ω–∞
            Debug.Log("[SimpleTransformation] üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ª–∞–¥–∏–Ω–∞:");
            LogChildrenRecursive(transform, 0);
            return;
        }

        Debug.Log($"[SimpleTransformation] ‚úÖ –ü—Ä–∞–≤–∞—è —Ä—É–∫–∞ –ø–∞–ª–∞–¥–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: {paladinRightHand.name}");
        Debug.Log($"[SimpleTransformation] üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –≤ —Ä—É–∫–µ –ø–∞–ª–∞–¥–∏–Ω–∞: {paladinRightHand.childCount}");

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π –≤ —Ä—É–∫–µ –ø–∞–ª–∞–¥–∏–Ω–∞
        for (int i = 0; i < paladinRightHand.childCount; i++)
        {
            Transform child = paladinRightHand.GetChild(i);
            Debug.Log($"[SimpleTransformation] üîç Child {i}: {child.name} (–∞–∫—Ç–∏–≤–µ–Ω: {child.gameObject.activeSelf})");
        }

        // –ò—â–µ–º –æ—Ä—É–∂–∏–µ –≤ —Ä—É–∫–µ –ø–∞–ª–∞–¥–∏–Ω–∞
        GameObject weapon = null;
        foreach (Transform child in paladinRightHand)
        {
            Debug.Log($"[SimpleTransformation] üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º child: {child.name}");

            // –û—Ä—É–∂–∏–µ –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ "SwordPaladin" –∏–ª–∏ "WeaponName"
            if (child.name.Contains("Sword") || child.name.Contains("Weapon") || child.name.Contains("Paladin"))
            {
                weapon = child.gameObject;
                Debug.Log($"[SimpleTransformation] ‚úÖ –û–†–£–ñ–ò–ï –ù–ê–ô–î–ï–ù–û –ü–û –ò–ú–ï–ù–ò: {child.name}");
                break;
            }
        }

        if (weapon == null && paladinRightHand.childCount > 0)
        {
            // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π child –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∏–º–µ–Ω–∏
            weapon = paladinRightHand.GetChild(0).gameObject;
            Debug.Log($"[SimpleTransformation] ‚ö†Ô∏è –í–∑—è–ª–∏ –ø–µ—Ä–≤—ã–π child –∫–∞–∫ –æ—Ä—É–∂–∏–µ: {weapon.name}");
        }

        if (weapon == null)
        {
            Debug.LogWarning("[SimpleTransformation] ‚ùå –û–†–£–ñ–ò–ï –ù–ï –ù–ê–ô–î–ï–ù–û –≤ —Ä—É–∫–µ –ø–∞–ª–∞–¥–∏–Ω–∞!");
            return;
        }

        Debug.Log($"[SimpleTransformation] ‚öîÔ∏è –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Ä—É–∂–∏–µ {weapon.name} –Ω–∞ —Ä—É–∫—É –º–µ–¥–≤–µ–¥—è...");

        // –°–û–•–†–ê–ù–Ø–ï–ú –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã –æ—Ä—É–∂–∏—è (–∏–∑ WeaponAttachment)
        Vector3 originalLocalPos = weapon.transform.localPosition;
        Quaternion originalLocalRot = weapon.transform.localRotation;
        Vector3 originalLocalScale = weapon.transform.localScale;

        Debug.Log($"[SimpleTransformation] üìç –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {originalLocalPos}");
        Debug.Log($"[SimpleTransformation] üìç –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç: {originalLocalRot.eulerAngles}");

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Ä—É–∂–∏–µ –Ω–∞ —Ä—É–∫—É –º–µ–¥–≤–µ–¥—è
        weapon.transform.SetParent(bearRightHand, false); // false = –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã

        // –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º—ã (–æ–Ω–∏ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ WeaponAttachment)
        weapon.transform.localPosition = originalLocalPos;
        weapon.transform.localRotation = originalLocalRot;
        weapon.transform.localScale = originalLocalScale;

        Debug.Log($"[SimpleTransformation] ‚úÖ –û—Ä—É–∂–∏–µ {weapon.name} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –º–µ–¥–≤–µ–¥—é —Å —Ç–µ–º–∏ –∂–µ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞–º–∏!");
        Debug.Log($"[SimpleTransformation] üìç –ò—Ç–æ–≥–æ–≤–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {weapon.transform.localPosition}");
        Debug.Log($"[SimpleTransformation] üìç –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç: {weapon.transform.localEulerAngles}");
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–¥–ª—è –¥–µ–±–∞–≥–∞)
    /// </summary>
    private void LogChildrenRecursive(Transform parent, int depth)
    {
        string indent = new string(' ', depth * 2);
        Debug.Log($"{indent}- {parent.name}");

        if (depth < 3) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
        {
            foreach (Transform child in parent)
            {
                LogChildrenRecursive(child, depth + 1);
            }
        }
    }

    /// <summary>
    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ—Å—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
    /// </summary>
    private Transform FindBoneRecursive(Transform parent, string boneName)
    {
        if (parent.name == boneName)
        {
            return parent;
        }

        foreach (Transform child in parent)
        {
            Transform found = FindBoneRecursive(child, boneName);
            if (found != null)
            {
                return found;
            }
        }

        return null;
    }

    /// <summary>
    /// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    /// </summary>
    public void RevertToOriginal()
    {
        if (!isTransformed)
        {
            Debug.LogWarning("[SimpleTransformation] ‚ö†Ô∏è –ù–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –Ω–µ—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å");
            return;
        }

        // –£–î–ê–õ–Ø–ï–ú –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if (transformedModel != null)
        {
            Destroy(transformedModel);
            Debug.Log("[SimpleTransformation] üóëÔ∏è –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∞");
        }

        // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ø–∞–ª–∞–¥–∏–Ω–∞
        if (playerRenderer != null)
        {
            playerRenderer.enabled = true;
            Debug.Log("[SimpleTransformation] ‚úÖ –ü–∞–ª–∞–¥–∏–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (renderer.enabled = true)");
        }

        transformedModel = null;
        isTransformed = false;

        Debug.Log("[SimpleTransformation] ‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    /// </summary>
    public bool IsTransformed()
    {
        return isTransformed;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–∞—Ç–æ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞ (–¥–ª—è NetworkPlayer)
    /// </summary>
    public Animator GetPlayerAnimator()
    {
        return playerAnimator;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–∞—Ç–æ—Ä –º–µ–¥–≤–µ–¥—è (–¥–ª—è –¥–µ–±–∞–≥–∞)
    /// </summary>
    public Animator GetBearAnimator()
    {
        return bearAnimator;
    }

    void LateUpdate()
    {
        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (Time.frameCount % 60 == 0)
        {
            Debug.Log($"[SimpleTransformation] üîç LateUpdate: isTransformed={isTransformed}, transformedModel={(transformedModel != null ? "—Å—É—â–µ—Å—Ç–≤—É–µ—Ç" : "NULL")}, gameObject={gameObject.name}");
        }

        // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–º
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ "–æ—Ç—Å—Ç–∞—ë—Ç" –æ—Ç –¥–≤–∏–∂–µ–Ω–∏—è
        if (isTransformed && transformedModel != null)
        {
            transformedModel.transform.localPosition = Vector3.zero;
            transformedModel.transform.localRotation = Quaternion.identity;

            // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ê–ù–ò–ú–ê–¢–û–†–ê: –∫–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø–∞–ª–∞–¥–∏–Ω–∞ –Ω–∞ –º–µ–¥–≤–µ–¥—è
            SyncAnimatorParameters();
        }
        else if (isTransformed && transformedModel == null)
        {
            // –û–®–ò–ë–ö–ê: —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –Ω–æ –º–µ–¥–≤–µ–¥—å —É–¥–∞–ª—ë–Ω!
            Debug.LogError($"[SimpleTransformation] ‚ùå isTransformed=true –Ω–æ transformedModel==NULL –¥–ª—è {gameObject.name}!");
        }
        else if (!isTransformed)
        {
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω
            if (Time.frameCount % 60 == 0)
            {
                Debug.Log($"[SimpleTransformation] ‚è∏Ô∏è LateUpdate –ø—Ä–æ–ø—É—â–µ–Ω: isTransformed=false –¥–ª—è {gameObject.name}");
            }
        }
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ç–æ—Ä–∞ –ø–∞–ª–∞–¥–∏–Ω–∞ —Å –º–µ–¥–≤–µ–¥–µ–º
    /// </summary>
    private void SyncAnimatorParameters()
    {
        if (playerAnimator == null)
        {
            Debug.LogError($"[SimpleTransformation] ‚ùå playerAnimator == NULL –¥–ª—è {gameObject.name}!");
            return;
        }

        if (bearAnimator == null)
        {
            Debug.LogError($"[SimpleTransformation] ‚ùå bearAnimator == NULL –¥–ª—è {gameObject.name}!");
            return;
        }

        // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 60 –∫–∞–¥—Ä–æ–≤
        bool shouldLog = Time.frameCount % 60 == 0;

        if (shouldLog)
        {
            Debug.Log($"[SimpleTransformation] üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ç–æ—Ä–æ–≤: {gameObject.name}");
            Debug.Log($"[SimpleTransformation] üìç playerAnimator: {playerAnimator.gameObject.name} (enabled: {playerAnimator.enabled})");
            Debug.Log($"[SimpleTransformation] üìç bearAnimator: {bearAnimator.gameObject.name} (enabled: {bearAnimator.enabled})");
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ç–æ—Ä–∞
        foreach (AnimatorControllerParameter param in playerAnimator.parameters)
        {
            try
            {
                switch (param.type)
                {
                    case AnimatorControllerParameterType.Float:
                        float floatValue = playerAnimator.GetFloat(param.name);
                        bearAnimator.SetFloat(param.name, floatValue);

                        if (shouldLog && (param.name == "MoveY" || param.name == "MoveX" || param.name == "Speed"))
                        {
                            Debug.Log($"[SimpleTransformation] üìä {param.name}: {floatValue:F2}");
                        }
                        break;

                    case AnimatorControllerParameterType.Int:
                        int intValue = playerAnimator.GetInteger(param.name);
                        bearAnimator.SetInteger(param.name, intValue);
                        break;

                    case AnimatorControllerParameterType.Bool:
                        bool boolValue = playerAnimator.GetBool(param.name);
                        bearAnimator.SetBool(param.name, boolValue);

                        if (shouldLog && (param.name == "IsMoving" || param.name == "InBattle"))
                        {
                            Debug.Log($"[SimpleTransformation] üìä {param.name}: {boolValue}");
                        }
                        break;

                    case AnimatorControllerParameterType.Trigger:
                        // –¢—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ –∫–æ–ø–∏—Ä—É–µ–º - –æ–Ω–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        break;
                }
            }
            catch (System.Exception e)
            {
                Debug.LogError($"[SimpleTransformation] ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param.name}: {e.Message}");
            }
        }
    }

    void OnDestroy()
    {
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        if (transformedModel != null)
        {
            Destroy(transformedModel);
        }
    }
}
