using UnityEngine;
using UnityEngine.AI;

/// <summary>
/// –ü—Ä–∏–∑–≤–∞–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Å–∫–µ–ª–µ—Ç—ã –¥–ª—è Rogue)
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–æ–≤ –∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Ö–æ–∑—è–∏–Ω–æ–º
/// </summary>
[RequireComponent(typeof(Animator))]
public class SummonedCreature : MonoBehaviour
{
    [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [SerializeField] private float attackDamage = 20f;
    [SerializeField] private float attackRange = 2f;
    [SerializeField] private float attackCooldown = 2f;
    [SerializeField] private float followDistance = 10f;
    [SerializeField] private float aggroRange = 15f;

    private Transform owner; // –•–æ–∑—è–∏–Ω (—Ç–æ—Ç –∫—Ç–æ –ø—Ä–∏–∑–≤–∞–ª)
    private Transform currentTarget; // –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å
    private float lifetime; // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏
    private float remainingLifetime;
    private float lastAttackTime;
    private Animator animator;
    private NavMeshAgent navAgent;

    // Animation hashes
    private readonly int isMovingHash = Animator.StringToHash("IsMoving");
    private readonly int attackHash = Animator.StringToHash("Attack");

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–≤–∞–Ω–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞
    /// </summary>
    public void Initialize(Transform owner, float lifetime)
    {
        this.owner = owner;
        this.lifetime = lifetime;
        this.remainingLifetime = lifetime;

        animator = GetComponent<Animator>();

        // –î–æ–±–∞–≤–ª—è–µ–º NavMeshAgent –µ—Å–ª–∏ –Ω–µ—Ç
        navAgent = GetComponent<NavMeshAgent>();
        if (navAgent == null)
        {
            navAgent = gameObject.AddComponent<NavMeshAgent>();
            navAgent.speed = 3.5f;
            navAgent.acceleration = 8f;
            navAgent.angularSpeed = 120f;
            navAgent.stoppingDistance = attackRange * 0.8f;
        }

        Debug.Log($"[SummonedCreature] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {lifetime}—Å");
    }

    void Update()
    {
        // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏
        remainingLifetime -= Time.deltaTime;
        if (remainingLifetime <= 0f)
        {
            Die();
            return;
        }

        // –ò—â–µ–º —Ü–µ–ª—å –µ—Å–ª–∏ –Ω–µ—Ç
        if (currentTarget == null || !IsTargetValid(currentTarget))
        {
            FindTarget();
        }

        // –ï—Å—Ç—å —Ü–µ–ª—å - –∞—Ç–∞–∫—É–µ–º
        if (currentTarget != null)
        {
            AttackTarget();
        }
        // –ù–µ—Ç —Ü–µ–ª–∏ - —Å–ª–µ–¥—É–µ–º –∑–∞ —Ö–æ–∑—è–∏–Ω–æ–º
        else
        {
            FollowOwner();
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        UpdateAnimation();
    }

    /// <summary>
    /// –ù–∞–π—Ç–∏ —Ü–µ–ª—å –¥–ª—è –∞—Ç–∞–∫–∏
    /// </summary>
    private void FindTarget()
    {
        if (owner == null) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª—å —Ö–æ–∑—è–∏–Ω–∞ (TargetSystem)
        TargetSystem ownerTargetSystem = owner.GetComponent<TargetSystem>();
        if (ownerTargetSystem != null && ownerTargetSystem.GetCurrentTarget() != null)
        {
            Transform targetTransform = ownerTargetSystem.GetCurrentTarget().transform;
            float distanceToTarget = Vector3.Distance(transform.position, targetTransform.position);
            if (distanceToTarget <= aggroRange)
            {
                currentTarget = targetTransform;
                Debug.Log($"[SummonedCreature] –ê—Ç–∞–∫—É—é —Ü–µ–ª—å —Ö–æ–∑—è–∏–Ω–∞: {currentTarget.name}");
                return;
            }
        }

        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
        Collider[] hits = Physics.OverlapSphere(transform.position, aggroRange);
        float closestDistance = float.MaxValue;
        Transform closestEnemy = null;

        foreach (Collider hit in hits)
        {
            Enemy enemy = hit.GetComponent<Enemy>();
            if (enemy != null && enemy.IsAlive())
            {
                float distance = Vector3.Distance(transform.position, hit.transform.position);
                if (distance < closestDistance)
                {
                    closestDistance = distance;
                    closestEnemy = hit.transform;
                }
            }
        }

        if (closestEnemy != null)
        {
            currentTarget = closestEnemy;
            Debug.Log($"[SummonedCreature] –ù–∞–π–¥–µ–Ω –≤—Ä–∞–≥: {currentTarget.name}");
        }
    }

    /// <summary>
    /// –ê—Ç–∞–∫–æ–≤–∞—Ç—å —Ü–µ–ª—å
    /// </summary>
    private void AttackTarget()
    {
        if (currentTarget == null) return;

        float distanceToTarget = Vector3.Distance(transform.position, currentTarget.position);

        // –í —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ - –∞—Ç–∞–∫—É–µ–º
        if (distanceToTarget <= attackRange)
        {
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—Å—è –∫ —Ü–µ–ª–∏
            Vector3 direction = (currentTarget.position - transform.position).normalized;
            direction.y = 0;
            if (direction != Vector3.zero)
            {
                transform.rotation = Quaternion.LookRotation(direction);
            }

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            if (navAgent != null)
            {
                navAgent.isStopped = true;
            }

            // –ê—Ç–∞–∫—É–µ–º –µ—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à—ë–ª
            if (Time.time - lastAttackTime >= attackCooldown)
            {
                PerformAttack();
                lastAttackTime = Time.time;
            }
        }
        // –í–Ω–µ —Ä–∞–¥–∏—É—Å–∞ - –¥–≤–∏–≥–∞–µ–º—Å—è –∫ —Ü–µ–ª–∏
        else
        {
            if (navAgent != null)
            {
                navAgent.isStopped = false;
                navAgent.SetDestination(currentTarget.position);
            }
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—Ç–∞–∫—É
    /// </summary>
    private void PerformAttack()
    {
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
        if (animator != null)
        {
            animator.SetTrigger(attackHash);
        }

        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
        Enemy enemy = currentTarget.GetComponent<Enemy>();
        if (enemy != null)
        {
            enemy.TakeDamage(attackDamage);
            Debug.Log($"[SummonedCreature] ‚öîÔ∏è –ê—Ç–∞–∫–∞! –£—Ä–æ–Ω: {attackDamage}");
        }
    }

    /// <summary>
    /// –°–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ —Ö–æ–∑—è–∏–Ω–æ–º
    /// </summary>
    private void FollowOwner()
    {
        if (owner == null) return;

        float distanceToOwner = Vector3.Distance(transform.position, owner.position);

        // –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ - –∏–¥—ë–º –∫ —Ö–æ–∑—è–∏–Ω—É
        if (distanceToOwner > followDistance)
        {
            if (navAgent != null)
            {
                navAgent.isStopped = false;
                navAgent.SetDestination(owner.position);
            }
        }
        // –†—è–¥–æ–º - —Å—Ç–æ–∏–º
        else
        {
            if (navAgent != null)
            {
                navAgent.isStopped = true;
            }
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    /// </summary>
    private void UpdateAnimation()
    {
        if (animator == null) return;

        bool isMoving = navAgent != null && navAgent.velocity.magnitude > 0.1f;
        animator.SetBool(isMovingHash, isMoving);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏
    /// </summary>
    private bool IsTargetValid(Transform target)
    {
        if (target == null) return false;

        Enemy enemy = target.GetComponent<Enemy>();
        if (enemy != null && !enemy.IsAlive())
        {
            return false;
        }

        float distance = Vector3.Distance(transform.position, target.position);
        if (distance > aggroRange * 1.5f) // –ü–æ—Ç–µ—Ä—è–ª–∏ —Ü–µ–ª—å
        {
            return false;
        }

        return true;
    }

    /// <summary>
    /// –°–º–µ—Ä—Ç—å –ø—Ä–∏–∑–≤–∞–Ω–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞
    /// </summary>
    private void Die()
    {
        Debug.Log("[SummonedCreature] üíÄ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∏—Å—Ç–µ–∫–ª–æ");

        // TODO: –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏ / —ç—Ñ—Ñ–µ–∫—Ç –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        Destroy(gameObject);
    }

    void OnDrawGizmosSelected()
    {
        // –†–∞–¥–∏—É—Å –∞–≥—Ä–æ
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, aggroRange);

        // –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏
        Gizmos.color = Color.yellow;
        Gizmos.DrawWireSphere(transform.position, attackRange);

        // –†–∞–¥–∏—É—Å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ö–æ–∑—è–∏–Ω–æ–º
        if (owner != null)
        {
            Gizmos.color = Color.green;
            Gizmos.DrawWireSphere(owner.position, followDistance);
        }
    }
}
