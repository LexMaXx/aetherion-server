using UnityEngine;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω—ã —Å–∫–∏–Ω–æ–≤ (mesh swapping) –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
/// –ó–∞–º–µ–Ω—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è child GameObjects
/// </summary>
public class MeshSwapper : MonoBehaviour
{
    [Header("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞")]
    private SkinnedMeshRenderer playerRenderer;
    private Mesh originalMesh;
    private Material[] originalMaterials;
    private Transform[] originalBones;
    private Transform originalRootBone;

    [Header("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")]
    private bool isTransformed = false;
    private GameObject transformationPrefab; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∞–± –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

    void Awake()
    {
        // –ù–∞—Ö–æ–¥–∏–º SkinnedMeshRenderer –∏–≥—Ä–æ–∫–∞
        playerRenderer = GetComponentInChildren<SkinnedMeshRenderer>();
        if (playerRenderer == null)
        {
            Debug.LogError("[MeshSwapper] ‚ùå SkinnedMeshRenderer –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        SaveOriginalMesh();
        Debug.Log($"[MeshSwapper] ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π mesh —Å–æ—Ö—Ä–∞–Ω—ë–Ω");
    }

    /// <summary>
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π mesh –∏ materials –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void SaveOriginalMesh()
    {
        if (playerRenderer == null) return;

        originalMesh = playerRenderer.sharedMesh;
        originalMaterials = playerRenderer.sharedMaterials;
        originalBones = playerRenderer.bones;
        originalRootBone = playerRenderer.rootBone;

        Debug.Log($"[MeshSwapper] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: mesh={originalMesh?.name}, materials={originalMaterials?.Length}, bones={originalBones?.Length}");
    }

    /// <summary>
    /// –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (mesh swap)
    /// </summary>
    /// <param name="transformationPrefab">–ü—Ä–µ—Ñ–∞–± –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏</param>
    /// <returns>True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ</returns>
    public bool TransformTo(GameObject transformationPrefab)
    {
        if (playerRenderer == null)
        {
            Debug.LogError("[MeshSwapper] ‚ùå playerRenderer == null!");
            return false;
        }

        if (transformationPrefab == null)
        {
            Debug.LogError("[MeshSwapper] ‚ùå transformationPrefab == null!");
            return false;
        }

        // –ù–∞—Ö–æ–¥–∏–º SkinnedMeshRenderer –≤ –ø—Ä–µ—Ñ–∞–±–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        SkinnedMeshRenderer transformRenderer = transformationPrefab.GetComponentInChildren<SkinnedMeshRenderer>();
        if (transformRenderer == null)
        {
            Debug.LogError("[MeshSwapper] ‚ùå SkinnedMeshRenderer –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ—Ñ–∞–±–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!");
            return false;
        }

        Debug.Log($"[MeshSwapper] üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é...");
        Debug.Log($"[MeshSwapper] üì¶ –ü—Ä–µ—Ñ–∞–± —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {transformationPrefab.name}");
        Debug.Log($"[MeshSwapper] üì¶ Mesh —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {transformRenderer.sharedMesh?.name}");
        Debug.Log($"[MeshSwapper] üì¶ Materials —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {transformRenderer.sharedMaterials?.Length}");
        Debug.Log($"[MeshSwapper] üì¶ Bones —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {transformRenderer.bones?.Length}");

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ú–µ–Ω—è–µ–º mesh –∏ materials –Ω–∞ –º–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        playerRenderer.sharedMesh = transformRenderer.sharedMesh;
        playerRenderer.sharedMaterials = transformRenderer.sharedMaterials;

        // –ü—ã—Ç–∞–µ–º—Å—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å bones –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (transformRenderer.bones != null && transformRenderer.bones.Length > 0)
        {
            // –í–ê–ñ–ù–û: Bones –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ!
            // –ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ bones –ø–∞–ª–∞–¥–∏–Ω–∞
            if (transformRenderer.bones.Length == originalBones.Length)
            {
                playerRenderer.bones = transformRenderer.bones;
                Debug.Log($"[MeshSwapper] ‚úÖ Bones —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ({transformRenderer.bones.Length} –∫–æ—Å—Ç–µ–π)");
            }
            else
            {
                Debug.LogWarning($"[MeshSwapper] ‚ö†Ô∏è Bones –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! Transform={transformRenderer.bones.Length}, Original={originalBones.Length}");
                Debug.LogWarning($"[MeshSwapper] ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ bones –ø–∞–ª–∞–¥–∏–Ω–∞");
                // –û—Å—Ç–∞–≤–ª—è–µ–º originalBones - –æ–Ω–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ—Ñ–∞–± –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.transformationPrefab = transformationPrefab;
        isTransformed = true;

        Debug.Log($"[MeshSwapper] ‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–æ–≤—ã–π mesh: {playerRenderer.sharedMesh?.name}");
        return true;
    }

    /// <summary>
    /// –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–≥—Ä–æ–∫–∞
    /// </summary>
    public void RevertToOriginal()
    {
        if (playerRenderer == null)
        {
            Debug.LogError("[MeshSwapper] ‚ùå playerRenderer == null!");
            return;
        }

        if (!isTransformed)
        {
            Debug.LogWarning("[MeshSwapper] ‚ö†Ô∏è –ò–≥—Ä–æ–∫ –Ω–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –Ω–µ—á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å");
            return;
        }

        Debug.Log($"[MeshSwapper] üîÑ –í–æ–∑–≤—Ä–∞—Ç –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏...");

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        playerRenderer.sharedMesh = originalMesh;
        playerRenderer.sharedMaterials = originalMaterials;
        playerRenderer.bones = originalBones;
        playerRenderer.rootBone = originalRootBone;

        transformationPrefab = null;
        isTransformed = false;

        Debug.Log($"[MeshSwapper] ‚úÖ –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! Mesh: {playerRenderer.sharedMesh?.name}");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –ª–∏ –∏–≥—Ä–æ–∫
    /// </summary>
    public bool IsTransformed()
    {
        return isTransformed;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π SkinnedMeshRenderer
    /// </summary>
    public SkinnedMeshRenderer GetPlayerRenderer()
    {
        return playerRenderer;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π mesh
    /// </summary>
    public Mesh GetOriginalMesh()
    {
        return originalMesh;
    }
}
