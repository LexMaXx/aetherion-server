using UnityEngine;

/// <summary>
/// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–π –∫–∞—Å—Ç–∞ —Å–∫–∏–ª–ª–æ–≤ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
/// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
/// </summary>
public class SkillCastAnimationSync : MonoBehaviour
{
    private Animator animator;
    private SocketIOManager socketIO;

    private void Awake()
    {
        animator = GetComponent<Animator>();
        socketIO = SocketIOManager.Instance;
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    /// </summary>
    public void PlayCastAnimation(string animationTrigger, float animationSpeed = 1f, float castTime = 0f)
    {
        if (animator == null) return;

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ
        animator.SetFloat("AttackSpeed", animationSpeed);
        animator.SetTrigger(animationTrigger);

        Debug.Log($"[CastAnim] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {animationTrigger} @ {animationSpeed}x");

        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        if (socketIO != null && socketIO.IsConnected)
        {
            var data = new
            {
                animationTrigger = animationTrigger,
                animationSpeed = animationSpeed,
                castTime = castTime
            };

            string json = Newtonsoft.Json.JsonConvert.SerializeObject(data);
            socketIO.Emit("skill_cast_animation", json);

            Debug.Log($"[CastAnim] üåê –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
        }
    }

    /// <summary>
    /// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è NetworkSyncManager)
    /// </summary>
    public void PlayRemoteCastAnimation(string animationTrigger, float animationSpeed)
    {
        if (animator == null) return;

        animator.SetFloat("AttackSpeed", animationSpeed);
        animator.SetTrigger(animationTrigger);

        Debug.Log($"[CastAnim] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–¥–∞–ª—ë–Ω–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏: {animationTrigger} @ {animationSpeed}x");
    }
}
