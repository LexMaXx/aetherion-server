using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∏–ª–ª–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ Arena)
/// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–∫–∏–ª–ª–∞–º–∏, –∫—É–ª–¥–∞—É–Ω–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
/// </summary>
public class SkillManager : MonoBehaviour
{
    [Header("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ Character Selection)")]
    public List<SkillData> equippedSkills = new List<SkillData>(3); // –ú–∞–∫—Å–∏–º—É–º 3 —Å–∫–∏–ª–ª–∞

    [Header("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–ª–ª—ã –∫–ª–∞—Å—Å–∞")]
    public List<SkillData> allAvailableSkills = new List<SkillData>(6); // –î–æ 6 —Å–∫–∏–ª–ª–æ–≤ –Ω–∞ –∫–ª–∞—Å—Å

    [Header("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
    private CharacterStats characterStats;
    private ManaSystem manaSystem;
    private HealthSystem healthSystem;
    private Animator animator;

    // –ö—É–ª–¥–∞—É–Ω—ã —Å–∫–∏–ª–ª–æ–≤ (skillId -> –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è)
    private Dictionary<int, float> skillCooldowns = new Dictionary<int, float>();

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    private List<ActiveEffect> activeEffects = new List<ActiveEffect>();

    // –°–æ–±—ã—Ç–∏—è
    public delegate void SkillUsedHandler(SkillData skill);
    public event SkillUsedHandler OnSkillUsed;

    public delegate void EffectAppliedHandler(SkillEffect effect);
    public event EffectAppliedHandler OnEffectApplied;

    // –ü—Ä–∏–∑–≤–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞ (–¥–ª—è Rogue)
    private List<GameObject> summonedCreatures = new List<GameObject>();

    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è Paladin) - MESH SWAPPING APPROACH
    public bool isTransformed = false; // PUBLIC –¥–ª—è NetworkSyncManager
    private float transformationHPBonus = 0f; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–Ω—É—Å HP –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ mesh –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    private SkinnedMeshRenderer playerRenderer;
    private Mesh originalMesh;
    private Material[] originalMaterials;
    private Transform[] originalBones; // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º bones –∏–≥—Ä–æ–∫–∞!

    void Start()
    {
        characterStats = GetComponent<CharacterStats>();
        manaSystem = GetComponent<ManaSystem>();
        healthSystem = GetComponent<HealthSystem>();
        animator = GetComponent<Animator>();

        Debug.Log($"[SkillManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–∏–ª–ª–æ–≤: {equippedSkills.Count}");
    }

    void Update()
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω—ã
        UpdateCooldowns();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        UpdateActiveEffects();
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∏–ª–ª—ã –∏–∑ Character Selection (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
    /// </summary>
    public void LoadEquippedSkills(List<int> skillIds)
    {
        equippedSkills.Clear();

        foreach (int skillId in skillIds)
        {
            SkillData skill = GetSkillById(skillId);
            if (skill != null)
            {
                equippedSkills.Add(skill);
                Debug.Log($"[SkillManager] –ó–∞–≥—Ä—É–∂–µ–Ω —Å–∫–∏–ª–ª: {skill.skillName}");
            }
        }

        Debug.Log($"[SkillManager] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {equippedSkills.Count} —Å–∫–∏–ª–ª–æ–≤");
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É (0-2)
    /// </summary>
    public bool UseSkill(int skillIndex, Transform target = null)
    {
        if (skillIndex < 0 || skillIndex >= equippedSkills.Count)
        {
            Debug.LogWarning($"[SkillManager] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–∫–∏–ª–ª–∞: {skillIndex}");
            return false;
        }

        SkillData skill = equippedSkills[skillIndex];
        return UseSkill(skill, target);
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª
    /// </summary>
    public bool UseSkill(SkillData skill, Transform target = null)
    {
        Debug.Log($"[SkillManager] üîç UseSkill –≤—ã–∑–≤–∞–Ω: skill={skill?.skillName ?? "NULL"}");

        if (skill == null)
        {
            Debug.LogError("[SkillManager] ‚ùå Skill is NULL!");
            return false;
        }

        Debug.Log($"[SkillManager] üîç –°–∫–∏–ª–ª: {skill.skillName}, –¢–∏–ø: {skill.skillType}, –ú–∞–Ω–∞: {skill.manaCost}");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è (—Å—Ç–∞–Ω, –º–æ–ª—á–∞–Ω–∏–µ –∏ —Ç.–¥.)
        if (IsUnderCrowdControl())
        {
            Debug.Log("[SkillManager] ‚ùå –ù–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª - –ø–µ—Ä—Å–æ–Ω–∞–∂ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!");
            return false;
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –î–û —Ç—Ä–∞—Ç—ã –º–∞–Ω—ã
        if (skill.skillType == SkillType.Transformation && isTransformed)
        {
            Debug.Log("[SkillManager] ‚ùå –£–∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        float currentCooldown = GetCooldown(skill.skillId);
        Debug.Log($"[SkillManager] üîç –ö—É–ª–¥–∞—É–Ω —Å–∫–∏–ª–ª–∞ {skill.skillId}: {currentCooldown:F1}—Å");

        if (!skill.CanUse(characterStats, manaSystem, currentCooldown))
        {
            if (manaSystem != null)
            {
                Debug.Log($"[SkillManager] üîç –¢–µ–∫—É—â–∞—è –º–∞–Ω–∞: {manaSystem.CurrentMana}/{manaSystem.MaxMana}, –¢—Ä–µ–±—É–µ—Ç—Å—è: {skill.manaCost}");
            }
            Debug.Log($"[SkillManager] ‚ùå –°–∫–∏–ª–ª {skill.skillName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫—É–ª–¥–∞—É–Ω: {currentCooldown:F1}—Å)");
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏
        if (skill.requiresTarget && target == null)
        {
            Debug.Log($"[SkillManager] ‚ùå –°–∫–∏–ª–ª {skill.skillName} —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–ª—å!");
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª—å–Ω–æ—Å—Ç–∏
        if (target != null && Vector3.Distance(transform.position, target.position) > skill.castRange)
        {
            Debug.Log($"[SkillManager] ‚ùå –¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ! ({Vector3.Distance(transform.position, target.position):F1}–º > {skill.castRange}–º)");
            return false;
        }

        // –¢—Ä–∞—Ç–∏–º –º–∞–Ω—É
        if (manaSystem != null)
        {
            manaSystem.SpendMana(skill.manaCost);
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        skillCooldowns[skill.skillId] = skill.cooldown;

        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if (animator != null && !string.IsNullOrEmpty(skill.animationTrigger))
        {
            animator.SetTrigger(skill.animationTrigger);
        }

        // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –∫–∞—Å—Ç–∞
        if (skill.castSound != null)
        {
            AudioSource.PlayClipAtPoint(skill.castSound, transform.position);
        }

        // –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫–∏–ª–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
        SendSkillToServer(skill, target);

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∏–ª–ª –ª–æ–∫–∞–ª—å–Ω–æ
        ExecuteSkill(skill, target);

        // –°–æ–±—ã—Ç–∏–µ
        OnSkillUsed?.Invoke(skill);

        Debug.Log($"[SkillManager] ‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∫–∏–ª–ª: {skill.skillName}");
        return true;
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∏–ª–ª
    /// </summary>
    private void ExecuteSkill(SkillData skill, Transform target)
    {
        switch (skill.skillType)
        {
            case SkillType.Damage:
                ExecuteDamageSkill(skill, target);
                break;

            case SkillType.Heal:
                ExecuteHealSkill(skill, target);
                break;

            case SkillType.Buff:
            case SkillType.Debuff:
            case SkillType.CrowdControl:
                ExecuteEffectSkill(skill, target);
                break;

            case SkillType.Summon:
                ExecuteSummonSkill(skill);
                break;

            case SkillType.Transformation:
                ExecuteTransformationSkill(skill);
                break;

            case SkillType.Ressurect:
                ExecuteRessurectSkill(skill, target);
                break;
        }
    }

    /// <summary>
    /// –°–∫–∏–ª–ª —É—Ä–æ–Ω–∞
    /// </summary>
    private void ExecuteDamageSkill(SkillData skill, Transform target)
    {
        float damage = skill.CalculateDamage(characterStats);

        // AOE —É—Ä–æ–Ω
        if (skill.aoeRadius > 0f)
        {
            Vector3 center = target != null ? target.position : transform.position;
            Collider[] hits = Physics.OverlapSphere(center, skill.aoeRadius);

            int hitCount = 0;
            foreach (Collider hit in hits)
            {
                if (hitCount >= skill.maxTargets) break;

                Enemy enemy = hit.GetComponent<Enemy>();
                if (enemy != null)
                {
                    enemy.TakeDamage(damage);
                    hitCount++;

                    // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                    if (skill.visualEffectPrefab != null)
                    {
                        Instantiate(skill.visualEffectPrefab, hit.transform.position, Quaternion.identity);
                    }
                }
            }

            Debug.Log($"[SkillManager] üí• AOE —É—Ä–æ–Ω: {damage} –ø–æ {hitCount} —Ü–µ–ª—è–º");
        }
        // –û–¥–∏–Ω–æ—á–Ω—ã–π —É—Ä–æ–Ω
        else if (target != null)
        {
            Enemy enemy = target.GetComponent<Enemy>();
            if (enemy != null)
            {
                enemy.TakeDamage(damage);

                // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                if (skill.visualEffectPrefab != null)
                {
                    Instantiate(skill.visualEffectPrefab, target.position, Quaternion.identity);
                }

                Debug.Log($"[SkillManager] üí• –£—Ä–æ–Ω: {damage}");
            }
        }

        // –°–Ω–∞—Ä—è–¥
        if (skill.projectilePrefab != null && target != null)
        {
            GameObject projectile = Instantiate(skill.projectilePrefab, transform.position + Vector3.up, Quaternion.identity);
            Projectile proj = projectile.GetComponent<Projectile>();
            if (proj != null)
            {
                Vector3 direction = (target.position - transform.position).normalized;
                proj.Initialize(target, damage, direction);
            }
        }
    }

    /// <summary>
    /// –°–∫–∏–ª–ª –ª–µ—á–µ–Ω–∏—è
    /// </summary>
    private void ExecuteHealSkill(SkillData skill, Transform target)
    {
        float healAmount = skill.CalculateDamage(characterStats);

        // –õ–µ—á–∏–º —Ü–µ–ª—å
        Transform healTarget = target != null ? target : transform;
        HealthSystem targetHealth = healTarget.GetComponent<HealthSystem>();

        if (targetHealth != null)
        {
            targetHealth.Heal(healAmount);

            // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            if (skill.visualEffectPrefab != null)
            {
                Instantiate(skill.visualEffectPrefab, healTarget.position, Quaternion.identity);
            }

            Debug.Log($"[SkillManager] üíö –õ–µ—á–µ–Ω–∏–µ: {healAmount} HP");
        }
    }

    /// <summary>
    /// –°–∫–∏–ª–ª —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ (–±–∞—Ñ/–¥–µ–±–∞—Ñ/–∫–æ–Ω—Ç—Ä–æ–ª—å)
    /// </summary>
    private void ExecuteEffectSkill(SkillData skill, Transform target)
    {
        Transform effectTarget = target != null ? target : transform;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∫–∏–ª–ª–∞
        foreach (SkillEffect effect in skill.effects)
        {
            ApplyEffect(effect, effectTarget);
        }

        Debug.Log($"[SkillManager] ‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {skill.effects.Count}");
    }

    /// <summary>
    /// –°–∫–∏–ª–ª –ø—Ä–∏–∑—ã–≤–∞ (Rogue - —Å–∫–µ–ª–µ—Ç—ã)
    /// </summary>
    private void ExecuteSummonSkill(SkillData skill)
    {
        if (skill.summonPrefab == null)
        {
            Debug.LogWarning("[SkillManager] –ù–µ—Ç –ø—Ä–µ—Ñ–∞–±–∞ –¥–ª—è –ø—Ä–∏–∑—ã–≤–∞!");
            return;
        }

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã—Ö
        ClearSummons();

        // –ü—Ä–∏–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤
        for (int i = 0; i < skill.summonCount; i++)
        {
            Vector3 spawnPos = transform.position + transform.forward * 2f + transform.right * (i - skill.summonCount / 2) * 1.5f;
            GameObject summon = Instantiate(skill.summonPrefab, spawnPos, Quaternion.identity);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–∑–≤–∞–Ω–Ω–æ–µ —Å—É—â–µ—Å—Ç–≤–æ
            SummonedCreature creature = summon.GetComponent<SummonedCreature>();
            if (creature == null)
            {
                creature = summon.AddComponent<SummonedCreature>();
            }
            creature.Initialize(transform, skill.summonDuration);

            summonedCreatures.Add(summon);
        }

        Debug.Log($"[SkillManager] üëª –ü—Ä–∏–∑–≤–∞–Ω–æ —Å—É—â–µ—Å—Ç–≤: {skill.summonCount}");
    }

    /// <summary>
    /// –°–∫–∏–ª–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (Paladin - –º–µ–¥–≤–µ–¥—å) - CHILD GAMEOBJECT APPROACH
    /// –°–æ–∑–¥–∞—ë–º –º–µ–¥–≤–µ–¥—è –∫–∞–∫ child GameObject –∏ –ø—Ä—è—á–µ–º –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞
    /// </summary>
    private void ExecuteTransformationSkill(SkillData skill)
    {
        Debug.Log($"[SkillManager] üîç ExecuteTransformationSkill (CHILD GAMEOBJECT) –≤—ã–∑–≤–∞–Ω –¥–ª—è {skill.skillName}");

        if (skill.transformationModel == null)
        {
            Debug.LogError("[SkillManager] ‚ùå –ù–ï–¢ –ú–û–î–ï–õ–ò –î–õ–Ø –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò! –ü—Ä–æ–≤–µ—Ä—å Paladin_BearForm.asset –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ!");
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º SkinnedMeshRenderer –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä—è—á–µ–º –µ–≥–æ
        playerRenderer = GetComponentInChildren<SkinnedMeshRenderer>();
        if (playerRenderer == null)
        {
            Debug.LogError("[SkillManager] ‚ùå SkinnedMeshRenderer –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            return;
        }

        // –ù–û–í–´–ô –ü–û–î–•–û–î: –ü—Ä—è—á–µ–º –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞
        playerRenderer.gameObject.SetActive(false);
        Debug.Log($"[SkillManager] üëª –ú–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞ —Å–∫—Ä—ã—Ç–∞");

        // –°–æ–∑–¥–∞—ë–º –º–µ–¥–≤–µ–¥—è –∫–∞–∫ child –æ–±—ä–µ–∫—Ç
        GameObject bearInstance = Instantiate(skill.transformationModel, transform);
        bearInstance.transform.localPosition = Vector3.zero;
        bearInstance.transform.localRotation = Quaternion.identity;

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ç–æ—Ä –º–µ–¥–≤–µ–¥—è –∫ PlayerController
        Animator bearAnimator = bearInstance.GetComponentInChildren<Animator>();
        if (bearAnimator != null && animator != null)
        {
            // –ó–∞–º–µ–Ω—è–µ–º animator –∏–≥—Ä–æ–∫–∞ –Ω–∞ animator –º–µ–¥–≤–µ–¥—è
            Animator originalAnimator = animator; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∏–º–∞—Ç–æ—Ä
            animator = bearAnimator; // –¢–µ–ø–µ—Ä—å PlayerController –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∏–º–∞—Ç–æ—Ä–æ–º –º–µ–¥–≤–µ–¥—è!

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∏–º–∞—Ç–æ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            originalBones = new Transform[] { bearInstance.transform, originalAnimator.transform };

            Debug.Log($"[SkillManager] üé¨ –ê–Ω–∏–º–∞—Ç–æ—Ä –º–µ–¥–≤–µ–¥—è –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ PlayerController");
        }
        else
        {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∏–º–∞—Ç–æ—Ä–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
            originalBones = new Transform[] { bearInstance.transform };
            Debug.LogWarning($"[SkillManager] ‚ö†Ô∏è –£ –º–µ–¥–≤–µ–¥—è –Ω–µ—Ç Animator –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!");
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –î–æ–±–∞–≤–ª—è–µ–º ClassWeaponManager –∫ –º–µ–¥–≤–µ–¥—é –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ä—É–∂–∏–µ –ø–∞–ª–∞–¥–∏–Ω–∞
        ClassWeaponManager bearWeaponManager = bearInstance.GetComponent<ClassWeaponManager>();
        if (bearWeaponManager == null)
        {
            bearWeaponManager = bearInstance.AddComponent<ClassWeaponManager>();
            Debug.Log($"[SkillManager] üîß ClassWeaponManager –¥–æ–±–∞–≤–ª–µ–Ω –∫ –º–µ–¥–≤–µ–¥—é");
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å –≤—Ä—É—á–Ω—É—é (–º–µ–¥–≤–µ–¥—å = –ø–∞–ª–∞–¥–∏–Ω —Å –æ—Ä—É–∂–∏–µ–º)
        bearWeaponManager.SetCharacterClass(CharacterClass.Paladin);

        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ—Ä—É–∂–∏–µ –∫ –∫–æ—Å—Ç—è–º –º–µ–¥–≤–µ–¥—è
        bearWeaponManager.AttachWeaponForClass();
        Debug.Log($"[SkillManager] ‚öîÔ∏è –û—Ä—É–∂–∏–µ –ø–∞–ª–∞–¥–∏–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –º–µ–¥–≤–µ–¥—é");

        originalMesh = null; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º mesh swapping
        originalMaterials = null;

        isTransformed = true;

        Debug.Log($"[SkillManager] üêª ‚úÖ –ú–µ–¥–≤–µ–¥—å —Å–æ–∑–¥–∞–Ω –∫–∞–∫ child GameObject");

        // –û–†–£–ñ–ò–ï: –û—Ä—É–∂–∏–µ –∏–≥—Ä–æ–∫–∞ —Å–∫—Ä—ã—Ç–æ –≤–º–µ—Å—Ç–µ —Å –º–æ–¥–µ–ª—å—é, –∞ —É –º–µ–¥–≤–µ–¥—è —Å–≤–æ—ë –æ—Ä—É–∂–∏–µ (—á–µ—Ä–µ–∑ ClassWeaponManager –≤—ã—à–µ)

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
        if (healthSystem != null && skill.hpBonusPercent > 0f)
        {
            transformationHPBonus = healthSystem.MaxHealth * (skill.hpBonusPercent / 100f);
            healthSystem.AddTemporaryMaxHealth(transformationHPBonus);
            Debug.Log($"[SkillManager] ‚úÖ –ë–æ–Ω—É—Å HP: +{transformationHPBonus:F0} ({skill.hpBonusPercent}%)");
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
        Invoke(nameof(EndTransformation), skill.transformationDuration);

        Debug.Log($"[SkillManager] üêª ‚úÖ –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê (CHILD GAMEOBJECT) –Ω–∞ {skill.transformationDuration}—Å!");
    }

    /// <summary>
    /// –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é - CHILD GAMEOBJECT
    /// </summary>
    private void EndTransformation()
    {
        if (!isTransformed) return;

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∏–º–∞—Ç–æ—Ä
        if (originalBones != null && originalBones.Length > 1 && originalBones[1] != null)
        {
            Animator originalAnimator = originalBones[1].GetComponent<Animator>();
            if (originalAnimator != null)
            {
                animator = originalAnimator; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞
                Debug.Log($"[SkillManager] üé¨ –ê–Ω–∏–º–∞—Ç–æ—Ä –∏–≥—Ä–æ–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
            }
        }

        // –£–¥–∞–ª—è–µ–º –º–µ–¥–≤–µ–¥—è (child GameObject)
        if (originalBones != null && originalBones.Length > 0 && originalBones[0] != null)
        {
            GameObject bearInstance = originalBones[0].gameObject;
            Destroy(bearInstance);
            Debug.Log($"[SkillManager] ‚úÖ –ú–µ–¥–≤–µ–¥—å —É–¥–∞–ª—ë–Ω");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ
        if (playerRenderer != null)
        {
            playerRenderer.gameObject.SetActive(true);
            Debug.Log($"[SkillManager] ‚úÖ –ú–æ–¥–µ–ª—å –∏–≥—Ä–æ–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
        }

        // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å HP
        if (healthSystem != null && transformationHPBonus > 0f)
        {
            healthSystem.RemoveTemporaryMaxHealth(transformationHPBonus);
            transformationHPBonus = 0f;
        }

        // –û–†–£–ñ–ò–ï: –û—Ä—É–∂–∏–µ –∏–≥—Ä–æ–∫–∞ —Å–∫—Ä—ã—Ç–æ –≤–º–µ—Å—Ç–µ —Å –µ–≥–æ –º–æ–¥–µ–ª—å—é, –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –æ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è
        // ClassWeaponManager –º–µ–¥–≤–µ–¥—è —É–¥–∞–ª–∏—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å GameObject –º–µ–¥–≤–µ–¥—è (Destroy –≤—ã—à–µ)

        // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        playerRenderer = null;
        originalMesh = null;
        originalMaterials = null;
        originalBones = null;

        isTransformed = false;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if (SocketIOManager.Instance != null && SocketIOManager.Instance.IsConnected)
        {
            SocketIOManager.Instance.SendTransformationEnd();
        }

        Debug.Log("[SkillManager] üêª –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (CHILD GAMEOBJECT)");
    }

    /// <summary>
    /// –°–∫–∏–ª–ª –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏—è
    /// </summary>
    private void ExecuteRessurectSkill(SkillData skill, Transform target)
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ
        Debug.Log($"[SkillManager] ‚ö∞Ô∏è –í–æ—Å–∫—Ä–µ—à–µ–Ω–∏–µ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)");
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∫ —Ü–µ–ª–∏
    /// </summary>
    private void ApplyEffect(SkillEffect effect, Transform target)
    {
        if (target == null) return;

        // –î–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        Enemy enemy = target.GetComponent<Enemy>();
        if (enemy != null)
        {
            SkillManager enemySkillManager = enemy.GetComponent<SkillManager>();
            if (enemySkillManager == null)
            {
                enemySkillManager = enemy.gameObject.AddComponent<SkillManager>();
            }
            enemySkillManager.AddEffect(effect, target);
        }
        // –î–ª—è —Å–µ–±—è/—Å–æ—é–∑–Ω–∏–∫–∞
        else
        {
            AddEffect(effect, target);
        }

        OnEffectApplied?.Invoke(effect);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
    /// </summary>
    public void AddEffect(SkillEffect effect, Transform target)
    {
        ActiveEffect activeEffect = new ActiveEffect(effect, target);
        activeEffects.Add(activeEffect);

        Debug.Log($"[SkillManager] ‚ú® –î–æ–±–∞–≤–ª–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç: {effect.effectType} –Ω–∞ {effect.duration}—Å");
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π)
    /// </summary>
    private void UpdateCooldowns()
    {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        // –ù—É–∂–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ UseSkill() –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –≤–æ –≤—Ä–µ–º—è Update()
        if (skillCooldowns.Count == 0) return;

        // –ö–æ–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ —Å–ø–∏—Å–æ–∫ (—ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ)
        var keys = new List<int>(skillCooldowns.Keys);

        foreach (int skillId in keys)
        {
            float cooldown = skillCooldowns[skillId];

            if (cooldown > 0f)
            {
                skillCooldowns[skillId] = Mathf.Max(0f, cooldown - Time.deltaTime);
            }
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    /// </summary>
    private void UpdateActiveEffects()
    {
        for (int i = activeEffects.Count - 1; i >= 0; i--)
        {
            bool shouldRemove = activeEffects[i].Update(Time.deltaTime);
            if (shouldRemove)
            {
                activeEffects.RemoveAt(i);
            }
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∫—É–ª–¥–∞—É–Ω —Å–∫–∏–ª–ª–∞
    /// </summary>
    public float GetCooldown(int skillId)
    {
        return skillCooldowns.ContainsKey(skillId) ? skillCooldowns[skillId] : 0f;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è
    /// </summary>
    public bool IsUnderCrowdControl()
    {
        foreach (ActiveEffect effect in activeEffects)
        {
            if (effect.isStunned || effect.isSilenced)
            {
                return true;
            }
        }
        return false;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–µ–∑–¥–≤–∏–∂–∏–≤–∞–Ω–∏—è
    /// </summary>
    public bool IsRooted()
    {
        foreach (ActiveEffect effect in activeEffects)
        {
            if (effect.isRooted || effect.isStunned)
            {
                return true;
            }
        }
        return false;
    }

    /// <summary>
    /// –ù–∞–π—Ç–∏ —Å–∫–∏–ª–ª –ø–æ ID
    /// </summary>
    private SkillData GetSkillById(int skillId)
    {
        foreach (SkillData skill in allAvailableSkills)
        {
            if (skill.skillId == skillId)
            {
                return skill;
            }
        }
        return null;
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∏–∑–≤–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤
    /// </summary>
    private void ClearSummons()
    {
        foreach (GameObject summon in summonedCreatures)
        {
            if (summon != null)
            {
                Destroy(summon);
            }
        }
        summonedCreatures.Clear();
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–∏–ª–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    /// –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç skillType –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    /// </summary>
    private void SendSkillToServer(SkillData skill, Transform target)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ
        if (SocketIOManager.Instance == null || !SocketIOManager.Instance.IsConnected)
        {
            Debug.Log("[SkillManager] –ù–µ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º target socketId (–µ—Å–ª–∏ —Ü–µ–ª—å - –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫)
        string targetSocketId = "";
        if (target != null)
        {
            NetworkPlayer networkTarget = target.GetComponent<NetworkPlayer>();
            if (networkTarget != null)
            {
                targetSocketId = networkTarget.socketId;
            }
        }

        // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º —Ç–∏–ø —Å–∫–∏–ª–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        string skillType = skill.skillType.ToString(); // "Transformation", "Damage", "Heal" –∏ —Ç.–¥.

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        Vector3 targetPos = target != null ? target.position : transform.position;
        SocketIOManager.Instance.SendPlayerSkill(skill.skillId, targetSocketId, targetPos, skillType);

        Debug.Log($"[SkillManager] üì° –°–∫–∏–ª–ª {skill.skillName} (ID:{skill.skillId}, —Ç–∏–ø:{skillType}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    }

    void OnDestroy()
    {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ Invoke (EndTransformation –∏ –¥—Ä—É–≥–∏–µ)
        CancelInvoke();

        ClearSummons();
    }
}
