using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–∏–ª–ª–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç SkillData –∏–∑ Resources/Skills/)
/// –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ—Å—Ç–æ —Ö—Ä–∞–Ω–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–∫–∏–ª–ª–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∏—Ö –≤ SkillExecutor
/// </summary>
public class SkillManager : MonoBehaviour
{
    [Header("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã (SkillData)")]
    [Tooltip("–î–æ 5 —Å–∫–∏–ª–ª–æ–≤, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Å–ø–∞–≤–Ω–µ")]
    public List<SkillConfig> equippedSkills = new List<SkillConfig>(5);

    [Header("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–ª–ª—ã –∫–ª–∞—Å—Å–∞")]
    [Tooltip("–í—Å–µ 5 —Å–∫–∏–ª–ª–æ–≤ –∫–ª–∞—Å—Å–∞")]
    public List<SkillConfig> allAvailableSkills = new List<SkillConfig>(5);

    [Header("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")]
    private SkillExecutor skillExecutor;

    void Start()
    {
        skillExecutor = GetComponent<SkillExecutor>();

        if (skillExecutor == null)
        {
            Debug.LogError("[SkillManager] ‚ùå SkillExecutor –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SkillExecutor.");
        }

        Debug.Log($"[SkillManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–∏–ª–ª–æ–≤: {equippedSkills.Count}");
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∏–ª–ª—ã –ø–æ –º–∞—Å—Å–∏–≤—É skillIds
    /// </summary>
    public void LoadEquippedSkills(List<int> skillIds)
    {
        equippedSkills.Clear();

        Debug.Log($"[SkillManager] üìö –ó–∞–≥—Ä—É–∑–∫–∞ {skillIds.Count} —Å–∫–∏–ª–ª–æ–≤: {string.Join(", ", skillIds)}");

        foreach (int skillId in skillIds)
        {
            SkillConfig skill = SkillConfigLoader.LoadSkillById(skillId);
            if (skill != null)
            {
                equippedSkills.Add(skill);
                Debug.Log($"[SkillManager] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–∫–∏–ª–ª: {skill.skillName} (ID: {skill.skillId})");
            }
            else
            {
                Debug.LogError($"[SkillManager] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∏–ª–ª —Å ID: {skillId}");
            }
        }

        Debug.Log($"[SkillManager] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {equippedSkills.Count}/{skillIds.Count} —Å–∫–∏–ª–ª–æ–≤");

        // –í–ê–ñ–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º —Å–∫–∏–ª–ª—ã –≤ SkillExecutor
        TransferSkillsToExecutor();
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –í–°–ï —Å–∫–∏–ª–ª—ã –∫–ª–∞—Å—Å–∞ –≤ allAvailableSkills
    /// </summary>
    public void LoadAllSkillsForClass(string characterClass)
    {
        allAvailableSkills = SkillConfigLoader.LoadSkillsForClass(characterClass);
        Debug.Log($"[SkillManager] üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ {allAvailableSkills.Count} —Å–∫–∏–ª–ª–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ {characterClass}");
    }

    /// <summary>
    /// –ü–µ—Ä–µ–¥–∞—Ç—å —Å–∫–∏–ª–ª—ã –≤ SkillExecutor (—Å–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º)
    /// </summary>
    private void TransferSkillsToExecutor()
    {
        // –ï—Å–ª–∏ skillExecutor –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (Start –Ω–µ –≤—ã–∑–≤–∞–Ω), –∏—â–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        if (skillExecutor == null)
        {
            skillExecutor = GetComponent<SkillExecutor>();
        }

        if (skillExecutor == null)
        {
            Debug.LogError("[SkillManager] ‚ùå SkillExecutor –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SkillExecutor –¥–æ–±–∞–≤–ª–µ–Ω.");
            return;
        }

        // –í–ê–ñ–ù–û: SetSkill –æ–∂–∏–¥–∞–µ—Ç slotNumber –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-5 (–≤–Ω—É—Ç—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ 0-4)
        // PlayerAttackNew –ø–µ—Ä–µ–¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å—ã 0-2 –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à 1-3
        for (int i = 0; i < equippedSkills.Count && i < 5; i++)
        {
            skillExecutor.SetSkill(i + 1, equippedSkills[i]); // –ü–µ—Ä–µ–¥–∞—ë–º 1-5, –≤–Ω—É—Ç—Ä–∏ SetSkill –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ 0-4
            Debug.Log($"[SkillManager] ‚úÖ –°–∫–∏–ª–ª '{equippedSkills[i].skillName}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç {i + 1} (–∫–ª–∞–≤–∏—à–∞ {i + 1})");
        }

        Debug.Log($"[SkillManager] ‚úÖ {equippedSkills.Count} —Å–∫–∏–ª–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ SkillExecutor (—Å–ª–æ—Ç—ã 0-{equippedSkills.Count - 1})");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–∏–ª–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É (0-4)
    /// </summary>
    public SkillConfig GetEquippedSkill(int index)
    {
        if (index < 0 || index >= equippedSkills.Count)
        {
            return null;
        }
        return equippedSkills[index];
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã
    /// </summary>
    public List<SkillConfig> GetEquippedSkills()
    {
        return new List<SkillConfig>(equippedSkills);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–ª–ª—ã –∫–ª–∞—Å—Å–∞
    /// </summary>
    public List<SkillConfig> GetAllAvailableSkills()
    {
        return new List<SkillConfig>(allAvailableSkills);
    }

    /// <summary>
    /// –ù–∞–π—Ç–∏ —Å–∫–∏–ª–ª –ø–æ ID (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    /// </summary>
    public SkillConfig GetSkillById(int skillId)
    {
        // –ò—â–µ–º –≤ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        foreach (var skill in equippedSkills)
        {
            if (skill.skillId == skillId)
                return skill;
        }

        // –ò—â–µ–º –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        foreach (var skill in allAvailableSkills)
        {
            if (skill.skillId == skillId)
                return skill;
        }

        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ SkillConfigLoader
        return SkillConfigLoader.LoadSkillById(skillId);
    }

    /// <summary>
    /// –≠–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Å–ª–æ—Ç (–¥–ª—è Character Selection)
    /// </summary>
    public void EquipSkillToSlot(int slotIndex, SkillConfig skill)
    {
        if (slotIndex < 0 || slotIndex >= 5)
        {
            Debug.LogError($"[SkillManager] ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ª–æ—Ç–∞: {slotIndex}");
            return;
        }

        // –†–∞—Å—à–∏—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while (equippedSkills.Count <= slotIndex)
        {
            equippedSkills.Add(null);
        }

        equippedSkills[slotIndex] = skill;
        Debug.Log($"[SkillManager] ‚úÖ –°–∫–∏–ª–ª {skill.skillName} —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–æ—Ç {slotIndex + 1}");

        // –û–±–Ω–æ–≤–ª—è–µ–º SkillExecutor
        if (skillExecutor != null)
        {
            skillExecutor.SetSkill(slotIndex + 1, skill);
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å–∫–∏–ª–ª
    /// </summary>
    public bool IsSkillEquipped(int skillId)
    {
        foreach (var skill in equippedSkills)
        {
            if (skill != null && skill.skillId == skillId)
                return true;
        }
        return false;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤
    /// </summary>
    public int GetEquippedSkillCount()
    {
        int count = 0;
        foreach (var skill in equippedSkills)
        {
            if (skill != null)
                count++;
        }
        return count;
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ú–ï–¢–û–î–´ –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç Root/Stun (–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ThirdPersonController
    /// </summary>
    public bool IsRooted()
    {
        if (skillExecutor == null)
        {
            skillExecutor = GetComponent<SkillExecutor>();
            if (skillExecutor == null) return false;
        }

        return skillExecutor.IsRooted();
    }

    /// <summary>
    /// –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Ü–µ–ª—å (—Å—Ç–∞—Ä—ã–π API –¥–ª—è projectile —Å–∫—Ä–∏–ø—Ç–æ–≤)
    /// –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ SkillExecutor
    /// </summary>
    public void AddEffect(EffectConfig effect, Transform target)
    {
        if (skillExecutor == null)
        {
            skillExecutor = GetComponent<SkillExecutor>();
            if (skillExecutor == null)
            {
                Debug.LogError("[SkillManager] ‚ùå SkillExecutor –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞!");
                return;
            }
        }

        skillExecutor.ApplyEffectToTarget(effect, target);
    }

    /// <summary>
    /// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–∏–ª–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É (—Å—Ç–∞—Ä—ã–π API –¥–ª—è PlayerAttack/SkillBarUI)
    /// –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ SkillExecutor
    /// </summary>
    public bool UseSkill(int skillIndex, Transform target = null)
    {
        if (skillExecutor == null)
        {
            skillExecutor = GetComponent<SkillExecutor>();
            if (skillExecutor == null)
            {
                Debug.LogError("[SkillManager] ‚ùå SkillExecutor –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–ª–ª–∞!");
                return false;
            }
        }

        // SkillExecutor –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ—Ç—ã 0-4, –∞ —Å—Ç–∞—Ä—ã–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å—ã 0-4
        return skillExecutor.UseSkill(skillIndex, target);
    }
}
