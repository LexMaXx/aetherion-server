using UnityEngine;

/// <summary>
/// –ê–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ (–±–∞—Ñ/–¥–µ–±–∞—Ñ/–∫–æ–Ω—Ç—Ä–æ–ª—å)
/// –°–¢–ê–†–ê–Ø –°–ò–°–¢–ï–ú–ê - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ SkillManager
/// </summary>
public class OldActiveEffect
{
    public SkillEffect effectData;
    public float remainingDuration;
    public float nextTickTime;
    public GameObject particleInstance;
    public Transform target;

    // –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
    public bool isStunned = false;
    public bool isRooted = false;
    public bool isSleeping = false;
    public bool isSilenced = false;

    // –û—Å–æ–±—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    public bool isInvulnerable = false;
    public float shieldAmount = 0f; // –©–∏—Ç (–ø–æ–≥–ª–æ—â–∞–µ—Ç —É—Ä–æ–Ω)

    public OldActiveEffect(SkillEffect effect, Transform target)
    {
        this.effectData = effect;
        this.remainingDuration = effect.duration;
        this.nextTickTime = effect.tickInterval;
        this.target = target;

        // –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –≤—Ä–∞–≥–æ–≤ (Enemy) –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ù–û –ù–ï –¥–ª—è NetworkPlayer
        Debug.Log($"[OldActiveEffect] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ {effect.effectType} –¥–ª—è {target.name}");
        Debug.Log($"[OldActiveEffect] üîç particleEffectPrefab: {(effect.particleEffectPrefab != null ? effect.particleEffectPrefab.name : "NULL")}");

        if (effect.particleEffectPrefab != null && target != null)
        {
            NetworkPlayer networkPlayer = target.GetComponent<NetworkPlayer>();
            Enemy enemy = target.GetComponent<Enemy>();

            Debug.Log($"[OldActiveEffect] üîç Enemy: {enemy != null}, NetworkPlayer: {networkPlayer != null}");

            // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç –µ—Å–ª–∏ —ç—Ç–æ:
            // 1. –í—Ä–∞–≥ (Enemy) - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –≤—Ä–∞–≥–∞—Ö
            // 2. –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ (–Ω–µ—Ç NetworkPlayer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
            // –ù–ï —Å–æ–∑–¥–∞—ë–º –¥–ª—è NetworkPlayer (–¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏)
            if (enemy != null || networkPlayer == null)
            {
                // –°–æ–∑–¥–∞—ë–º —ç—Ñ—Ñ–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π (90 –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ X) –∏ –ø–æ–∑–∏—Ü–∏–µ–π (1 –º–µ—Ç—Ä –≤–≤–µ—Ä—Ö)
                Vector3 effectPosition = target.position + Vector3.up * 1f;
                Quaternion effectRotation = Quaternion.Euler(90f, 0f, 0f);

                particleInstance = Object.Instantiate(effect.particleEffectPrefab, effectPosition, effectRotation, target);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
                particleInstance.transform.localPosition = Vector3.up * 1f;
                particleInstance.transform.localRotation = effectRotation;

                Debug.Log($"[OldActiveEffect] ‚ú® –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ {target.name}: {effect.particleEffectPrefab.name}, position: {effectPosition}, rotation: (90,0,0)");

                // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫)
                if (networkPlayer == null && SocketIOManager.Instance != null && SocketIOManager.Instance.IsConnected)
                {
                    string effectName = effect.particleEffectPrefab.name;
                    string effectTypeString = GetEffectTypeString(effect.effectType);

                    // –ü–æ–ª—É—á–∞–µ–º socketId –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞
                    string localSocketId = SocketIOManager.Instance.SocketId;

                    SocketIOManager.Instance.SendVisualEffect(
                        effectTypeString, // —Ç–∏–ø —ç—Ñ—Ñ–µ–∫—Ç–∞ ("buff", "debuff", "burn", "poison" –∏ —Ç.–¥.)
                        effectName, // –Ω–∞–∑–≤–∞–Ω–∏–µ prefab
                        effectPosition, // –ø–æ–∑–∏—Ü–∏—è (—Å offset +1 –≤–≤–µ—Ä—Ö)
                        effectRotation, // —Ä–æ—Ç–∞—Ü–∏—è (90, 0, 0)
                        localSocketId, // –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
                        effect.duration // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞
                    );
                    Debug.Log($"[OldActiveEffect] ‚ú® –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç {effectTypeString} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {effectName}, targetSocketId={localSocketId}");
                }
            }
            else
            {
                Debug.Log($"[OldActiveEffect] ‚è≠Ô∏è NetworkPlayer detected - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç {effect.effectType}");
            }
        }
        else
        {
            Debug.Log($"[OldActiveEffect] ‚ö†Ô∏è –ù–µ—Ç particleEffectPrefab –∏–ª–∏ target –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ {effect.effectType}");
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
        ApplyEffect();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
        switch (effect.effectType)
        {
            case OldEffectType.Stun:
                isStunned = true;
                break;
            case OldEffectType.Root:
                isRooted = true;
                break;
            case OldEffectType.Sleep:
                isSleeping = true;
                break;
            case OldEffectType.Silence:
                isSilenced = true;
                break;
            case OldEffectType.Invulnerability:
                isInvulnerable = true;
                Debug.Log("[OldActiveEffect] üõ°Ô∏è –ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–¨ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!");
                break;
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
    /// </summary>
    public bool Update(float deltaTime)
    {
        remainingDuration -= deltaTime;
        nextTickTime -= deltaTime;

        // –¢–∏–∫–æ–≤—ã–π —É—Ä–æ–Ω/–ª–µ—á–µ–Ω–∏–µ
        if (nextTickTime <= 0f && effectData.damageOrHealPerTick != 0f)
        {
            ApplyTick();
            nextTickTime = effectData.tickInterval;
        }

        // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        if (remainingDuration <= 0f)
        {
            Remove();
            return true; // –£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞
        }

        return false;
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–∏–∫–æ–≤—ã–π —É—Ä–æ–Ω/–ª–µ—á–µ–Ω–∏–µ
    /// </summary>
    private void ApplyTick()
    {
        if (target == null) return;

        // –£—Ä–æ–Ω
        if (effectData.damageOrHealPerTick < 0f)
        {
            HealthSystem healthSystem = target.GetComponent<HealthSystem>();
            if (healthSystem != null)
            {
                healthSystem.TakeDamage(-effectData.damageOrHealPerTick);
            }
        }
        // –õ–µ—á–µ–Ω–∏–µ
        else if (effectData.damageOrHealPerTick > 0f)
        {
            HealthSystem healthSystem = target.GetComponent<HealthSystem>();
            if (healthSystem != null)
            {
                healthSystem.Heal(effectData.damageOrHealPerTick);
            }
        }
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç (–ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
    /// </summary>
    private void ApplyEffect()
    {
        if (target == null) return;

        CharacterStats stats = target.GetComponent<CharacterStats>();
        if (stats == null) return;

        float bonusValue = (effectData.power / 100f); // power –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (25 = 25%)

        switch (effectData.effectType)
        {
            case OldEffectType.IncreaseAttack:
                float attackBonus = stats.physicalDamage * bonusValue;
                stats.ModifyPhysicalDamage(attackBonus);
                Debug.Log($"[ActiveEffect] ‚öîÔ∏è –ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {effectData.power}% (+{attackBonus:F0})");
                break;

            case OldEffectType.IncreaseDefense:
                float defenseBonus = stats.physicalDefense * bonusValue;
                stats.ModifyPhysicalDefense(defenseBonus);
                Debug.Log($"[ActiveEffect] üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {effectData.power}% (+{defenseBonus:F0})");
                break;

            case OldEffectType.IncreaseSpeed:
                float speedBonus = stats.movementSpeed * bonusValue;
                stats.ModifyMovementSpeed(speedBonus);
                Debug.Log($"[ActiveEffect] üèÉ –°–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {effectData.power}% (+{speedBonus:F1})");
                break;

            case OldEffectType.IncreasePerception:
                int perceptionBonus = Mathf.RoundToInt(effectData.power); // power = –ø—Ä—è–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ –ø—Ä–æ—Ü–µ–Ω—Ç)
                Debug.Log($"[ActiveEffect] üîç –û–¢–õ–ê–î–ö–ê PERCEPTION:");
                Debug.Log($"[ActiveEffect] üîç effectData.power: {effectData.power}");
                Debug.Log($"[ActiveEffect] üîç perceptionBonus: {perceptionBonus}");
                Debug.Log($"[ActiveEffect] üîç stats: {stats != null}");
                Debug.Log($"[ActiveEffect] üîç target.name: {target.name}");
                stats.ModifyPerception(perceptionBonus);
                Debug.Log($"[ActiveEffect] üëÅÔ∏è –í–æ—Å–ø—Ä–∏—è—Ç–∏–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ {perceptionBonus}");
                break;

            case OldEffectType.DecreaseAttack:
                float attackPenalty = -stats.physicalDamage * bonusValue;
                stats.ModifyPhysicalDamage(attackPenalty);
                Debug.Log($"[ActiveEffect] ‚öîÔ∏è –ê—Ç–∞–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {effectData.power}% ({attackPenalty:F0})");
                break;

            case OldEffectType.DecreaseDefense:
                float defensePenalty = -stats.physicalDefense * bonusValue;
                stats.ModifyPhysicalDefense(defensePenalty);
                Debug.Log($"[ActiveEffect] üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {effectData.power}% ({defensePenalty:F0})");
                break;

            case OldEffectType.DecreaseSpeed:
                float speedPenalty = -stats.movementSpeed * bonusValue;
                stats.ModifyMovementSpeed(speedPenalty);
                Debug.Log($"[ActiveEffect] üèÉ –°–∫–æ—Ä–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {effectData.power}% ({speedPenalty:F1})");
                break;

            case OldEffectType.Shield:
                shieldAmount = effectData.power; // power = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HP —â–∏—Ç–∞
                Debug.Log($"[ActiveEffect] üõ°Ô∏è –©–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {shieldAmount:F0} HP");
                break;
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç
    /// </summary>
    public void Remove()
    {
        // –°–Ω–∏–º–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å—Ç–∞—Ç–æ–≤
        RemoveEffect();

        if (particleInstance != null)
        {
            Object.Destroy(particleInstance);
        }

        isStunned = false;
        isRooted = false;
        isSleeping = false;
        isSilenced = false;
        isInvulnerable = false;
    }

    /// <summary>
    /// –°–Ω—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç (–ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏)
    /// </summary>
    private void RemoveEffect()
    {
        if (target == null) return;

        CharacterStats stats = target.GetComponent<CharacterStats>();
        if (stats == null) return;

        float bonusValue = (effectData.power / 100f);

        switch (effectData.effectType)
        {
            case OldEffectType.IncreaseAttack:
                float attackBonus = stats.physicalDamage * bonusValue;
                stats.ModifyPhysicalDamage(-attackBonus); // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å
                Debug.Log($"[ActiveEffect] ‚öîÔ∏è –ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏ —Å–Ω—è—Ç (-{attackBonus:F0})");
                break;

            case OldEffectType.IncreaseDefense:
                float defenseBonus = stats.physicalDefense * bonusValue;
                stats.ModifyPhysicalDefense(-defenseBonus);
                Debug.Log($"[ActiveEffect] üõ°Ô∏è –ë–æ–Ω—É—Å –∑–∞—â–∏—Ç—ã —Å–Ω—è—Ç (-{defenseBonus:F0})");
                break;

            case OldEffectType.IncreaseSpeed:
                float speedBonus = stats.movementSpeed * bonusValue;
                stats.ModifyMovementSpeed(-speedBonus);
                Debug.Log($"[ActiveEffect] üèÉ –ë–æ–Ω—É—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–Ω—è—Ç (-{speedBonus:F1})");
                break;

            case OldEffectType.IncreasePerception:
                int perceptionBonus = Mathf.RoundToInt(effectData.power);
                stats.ModifyPerception(-perceptionBonus); // –£–±–∏—Ä–∞–µ–º –±–æ–Ω—É—Å
                Debug.Log($"[ActiveEffect] üëÅÔ∏è –ë–æ–Ω—É—Å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è —Å–Ω—è—Ç (-{perceptionBonus})");
                break;

            case OldEffectType.DecreaseAttack:
                float attackPenalty = -stats.physicalDamage * bonusValue;
                stats.ModifyPhysicalDamage(-attackPenalty); // –£–±–∏—Ä–∞–µ–º –ø–µ–Ω–∞–ª—å—Ç–∏
                Debug.Log($"[ActiveEffect] ‚öîÔ∏è –ü–µ–Ω–∞–ª—å—Ç–∏ –∞—Ç–∞–∫–∏ —Å–Ω—è—Ç (+{-attackPenalty:F0})");
                break;

            case OldEffectType.DecreaseDefense:
                float defensePenalty = -stats.physicalDefense * bonusValue;
                stats.ModifyPhysicalDefense(-defensePenalty);
                Debug.Log($"[ActiveEffect] üõ°Ô∏è –ü–µ–Ω–∞–ª—å—Ç–∏ –∑–∞—â–∏—Ç—ã —Å–Ω—è—Ç (+{-defensePenalty:F0})");
                break;

            case OldEffectType.DecreaseSpeed:
                float speedPenalty = -stats.movementSpeed * bonusValue;
                stats.ModifyMovementSpeed(-speedPenalty);
                Debug.Log($"[ActiveEffect] üèÉ –ü–µ–Ω–∞–ª—å—Ç–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–Ω—è—Ç (+{-speedPenalty:F1})");
                break;

            case OldEffectType.Shield:
                shieldAmount = 0f; // –©–∏—Ç —É–¥–∞–ª—è–µ—Ç—Å—è
                Debug.Log($"[ActiveEffect] üõ°Ô∏è –©–∏—Ç —Å–Ω—è—Ç");
                break;
        }
    }

    /// <summary>
    /// –ü–æ–≥–ª–æ—Ç–∏—Ç—å —É—Ä–æ–Ω —â–∏—Ç–æ–º (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HealthSystem)
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —É—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≥–ª–æ—â–µ–Ω–∏—è
    /// </summary>
    public float AbsorbDamage(float damage)
    {
        if (shieldAmount <= 0f) return damage;

        if (damage <= shieldAmount)
        {
            // –©–∏—Ç –ø–æ–≥–ª–æ—â–∞–µ—Ç –≤–µ—Å—å —É—Ä–æ–Ω
            shieldAmount -= damage;
            Debug.Log($"[ActiveEffect] üõ°Ô∏è –©–∏—Ç –ø–æ–≥–ª–æ—Ç–∏–ª {damage:F0} —É—Ä–æ–Ω–∞ (–æ—Å—Ç–∞–ª–æ—Å—å: {shieldAmount:F0})");
            return 0f;
        }
        else
        {
            // –©–∏—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≥–ª–æ—â–∞–µ—Ç —É—Ä–æ–Ω
            float remainder = damage - shieldAmount;
            Debug.Log($"[ActiveEffect] üõ°Ô∏è –©–∏—Ç —Ä–∞–∑—Ä—É—à–µ–Ω! –ü–æ–≥–ª–æ—â–µ–Ω–æ {shieldAmount:F0}, –æ—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–Ω–∞: {remainder:F0}");
            shieldAmount = 0f;
            remainingDuration = 0f; // –©–∏—Ç —Ä–∞–∑—Ä—É—à–µ–Ω - —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
            return remainder;
        }
    }

    /// <summary>
    /// –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–æ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
    /// </summary>
    public void OnDamageTaken()
    {
        if (effectData.effectType == OldEffectType.Sleep)
        {
            remainingDuration = 0f; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–Ω
            Debug.Log("[ActiveEffect] –°–æ–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    /// </summary>
    private string GetEffectTypeString(OldEffectType effectType)
    {
        switch (effectType)
        {
            case OldEffectType.Burn:
            case OldEffectType.Poison:
            case OldEffectType.Bleed:
                return "dot"; // Damage Over Time

            case OldEffectType.IncreaseAttack:
            case OldEffectType.IncreaseDefense:
            case OldEffectType.IncreaseSpeed:
            case OldEffectType.IncreaseHPRegen:
            case OldEffectType.IncreaseMPRegen:
            case OldEffectType.IncreasePerception:
            case OldEffectType.HealOverTime:
            case OldEffectType.Shield:
            case OldEffectType.Invulnerability:
                return "buff";

            case OldEffectType.DecreaseAttack:
            case OldEffectType.DecreaseDefense:
            case OldEffectType.DecreaseSpeed:
            case OldEffectType.Stun:
            case OldEffectType.Root:
            case OldEffectType.Silence:
            case OldEffectType.Sleep:
            case OldEffectType.Fear:
            case OldEffectType.Taunt:
                return "debuff";

            default:
                return "effect";
        }
    }
}
