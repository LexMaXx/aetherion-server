#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Transformation –≤ SkillExecutor.cs
"""

file_path = 'Assets/Scripts/Skills/SkillExecutor.cs'

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open(file_path, 'r', encoding='utf-8') as f:
    content = f.read()

# 1. –î–æ–±–∞–≤–ª—è–µ–º case Transformation –≤ switch
# –ò—â–µ–º "case SkillConfigType.Summon:" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –µ–≥–æ break
old_switch = """            case SkillConfigType.Summon:
                ExecuteSummon(skill);
                break;
        }
    }"""

new_switch = """            case SkillConfigType.Summon:
                ExecuteSummon(skill);
                break;
            case SkillConfigType.Transformation:
                ExecuteTransformation(skill);
                break;
        }
    }"""

if old_switch in content:
    content = content.replace(old_switch, new_switch)
    print("‚úÖ Added Transformation case to switch")
else:
    print("‚ö†Ô∏è Switch statement not found - –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

# 2. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ ExecuteTransformation –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–æ–º Log
# –ò—â–µ–º "    private void Log(string message)"
log_method_marker = "    private void Log(string message)"

transformation_method = """    /// <summary>
    /// –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (Bear Form –¥–ª—è Paladin/Druid)
    /// </summary>
    private void ExecuteTransformation(SkillConfig skill)
    {
        Log($"Using transformation skill: {skill.skillName}");

        // –°–ø–∞–≤–Ω–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        SpawnEffect(skill.castEffectPrefab, transform.position, Quaternion.identity);
        SpawnEffect(skill.casterEffectPrefab, transform.position + Vector3.up * 1.5f, Quaternion.identity);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ prefab —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (skill.transformationModel == null)
        {
            Log($"‚ùå Transformation model –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {skill.skillName}!");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç SimpleTransformation
        SimpleTransformation transformation = GetComponent<SimpleTransformation>();
        if (transformation == null)
        {
            transformation = gameObject.AddComponent<SimpleTransformation>();
            Log($"‚úÖ SimpleTransformation –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∏–º–∞—Ç–æ—Ä –ø–∞–ª–∞–¥–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ TransformTo
        Animator paladinAnimator = GetComponent<Animator>();
        if (paladinAnimator == null)
        {
            paladinAnimator = GetComponentInChildren<Animator>();
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
        bool success = transformation.TransformTo(skill.transformationModel, paladinAnimator);

        if (!success)
        {
            Log($"‚ùå –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!");
            return;
        }

        Log($"‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {skill.skillName}");
        Log($"üêª –ú–æ–¥–µ–ª—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {skill.transformationModel.name}");

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å-—ç—Ñ—Ñ–µ–∫—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (skill.effects != null && skill.effects.Count > 0)
        {
            EffectManager targetEffectManager = GetComponent<EffectManager>();
            if (targetEffectManager != null)
            {
                foreach (EffectConfig effect in skill.effects)
                {
                    targetEffectManager.ApplyEffect(effect, stats);
                    Log($"Effect applied: {effect.effectType}");
                }
            }
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (HP, —É—Ä–æ–Ω)
        if (skill.hpBonusPercent > 0)
        {
            HealthSystem healthSystem = GetComponent<HealthSystem>();
            if (healthSystem != null)
            {
                float hpBonus = healthSystem.MaxHealth * (skill.hpBonusPercent / 100f);
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫ MaxHP
                Log($"üíö HP –±–æ–Ω—É—Å: +{skill.hpBonusPercent}% (+{hpBonus:F0} HP)");
            }
        }

        if (skill.damageBonusPercent > 0)
        {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫ —É—Ä–æ–Ω—É —á–µ—Ä–µ–∑ CharacterStats
            Log($"‚öîÔ∏è –£—Ä–æ–Ω –±–æ–Ω—É—Å: +{skill.damageBonusPercent}%");
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if (skill.transformationDuration > 0)
        {
            StartCoroutine(RevertTransformationAfterDelay(transformation, skill.transformationDuration));
            Log($"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {skill.transformationDuration} —Å–µ–∫—É–Ω–¥");
        }
    }

    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    /// </summary>
    private IEnumerator RevertTransformationAfterDelay(SimpleTransformation transformation, float delay)
    {
        yield return new WaitForSeconds(delay);

        if (transformation != null && transformation.IsTransformed())
        {
            transformation.RevertToOriginal();
            Log($"‚è±Ô∏è –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)");

            // –°–ø–∞–≤–Ω–∏–º —ç—Ñ—Ñ–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞
            SpawnEffect(Resources.Load<GameObject>("Effects/CFXR Magic Poof"), transform.position, Quaternion.identity);
        }
    }

    """

if log_method_marker in content and "ExecuteTransformation" not in content:
    content = content.replace(log_method_marker, transformation_method + log_method_marker)
    print("‚úÖ Added ExecuteTransformation method")
elif "ExecuteTransformation" in content:
    print("‚ö†Ô∏è ExecuteTransformation already exists")
else:
    print("‚ùå Log method marker not found")

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open(file_path, 'w', encoding='utf-8') as f:
    f.write(content)

print(f"\n‚úÖ –ì–û–¢–û–í–û! –§–∞–π–ª {file_path} –æ–±–Ω–æ–≤–ª—ë–Ω")
print("\n–î–æ–±–∞–≤–ª–µ–Ω–æ:")
print("1. case SkillConfigType.Transformation –≤ switch")
print("2. –ú–µ—Ç–æ–¥ ExecuteTransformation() –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
print("3. –ú–µ—Ç–æ–¥ RevertTransformationAfterDelay() –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞")
